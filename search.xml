<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2022/08/26/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/26/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><center>JavaScript学习笔记</center><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h2 id="JavaScript的概述"><a href="#JavaScript的概述" class="headerlink" title="JavaScript的概述"></a>JavaScript的概述</h2><p>JavaScript ，它包含了三大部分：<strong>ECMAScript</strong>、<strong>DOM</strong>、<strong>BOM</strong></p><ul><li>ECMAScript：ECMAScript是JavaScript这门语言的核心组成，是这门语言的精髓所在。规定了语法格式</li><li>DOM：文档对象模型(document object model)。我们知道标签的嵌套，就产生了父子关系，而DOM，提供了大量的API，让我们可以轻松操作DOM树。使用DOM，我们能动态修改页面内容，调整样式等等，这也是JS多样化的一个体现。</li><li>BOM：浏览器对象模型(brower object model)。和DOM类似，只不过主体变成了浏览器。浏览器同样提供了大量的API，其中部分对JS开放，为我们提供了操作浏览器窗口的方法。</li></ul><p>JavaScript是脚本语言，也就是说js属于编程语言。</p><p>JavaScript是一种基于对象的语言。</p><p>脚本语言：也就说js是不需要编译就可以直接执行了。js是浏览器解析的，每个浏览器中都有js解析器。</p><h2 id="JavaScript书写位置"><a href="#JavaScript书写位置" class="headerlink" title="JavaScript书写位置"></a>JavaScript书写位置</h2><p><strong>base.js:</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我是外来的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>JavaScript书写位置<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>当使用的html的版本为<span class="token constant">H5</span>，则type<span class="token operator">=</span><span class="token string">"text/javascript"</span> 可以省略<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>在script脚本在，通过找到按钮控件，然后添加点击事件，这种写法表示“嵌入式” 理解：通过scriptbi标签 ，完成对页面上某个控件，添加一些事件（样式，赋值）        优点：比较通用，起作用的区域为当前文档 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 单行注释</span><span class="token comment">/* 多行注释 */</span><span class="token comment">// 嵌入式</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你来了，老弟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    通过scrip标签，关联独立的js文件，到当前的html文件中来，在js文件中处理的还是html文件中的控件           注意：外链式，必须使用双标签           优点：解耦，好维护           缺点：可读性变差              外链式是通过script标签的src属性引入的   注意：外链式的script标签中不能再编写js代码 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"js/base.js"</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span> charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 行内式       理解：直接把事件添加骚button的控件上优点：简便，快捷，一目了然        缺点：复用性差        单引号和双引号 都是字符串         <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>p onclick<span class="token operator">=</span><span class="token string">"alert('还真的点啊');"</span><span class="token operator">></span>点我<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript输出"><a href="#JavaScript输出" class="headerlink" title="JavaScript输出"></a>JavaScript输出</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>JavaScript输出<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 控制台输出</span>            <span class="token comment">//相当于java中的 System.out.println()</span><span class="token comment">// js中字符串可以使用单双引号,推荐使用单引号</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//特殊场合区分颜色</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出到html页面--> 输出到浏览器上展示</span><span class="token comment">// html页面在js中就是文档对象</span><span class="token comment">// document 内置对象，已经被初始化好了的对象，内置：表示对象在内存，可以直接使用</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>hello,javascript&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="variable变量"><a href="#variable变量" class="headerlink" title="variable变量"></a>variable变量</h2><h3 id="声明变量和初始化"><a href="#声明变量和初始化" class="headerlink" title="声明变量和初始化"></a>声明变量和初始化</h3><ul><li>变量名必须以字母(包含大小写字母)、下划线(_)、$和数字组成，变量不能以数字开头；</li><li>不能使用JavaScript中的关键字作为变量名(var、true等)；</li><li>JavaScript变量名是严格区分大小写的；  wangErMaZi</li><li>变量命名使用“小驼峰”命名法则，第一个单词首字母小写，第二个单词起首字母大写，例如userName。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>声明变量和初始化<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> a<span class="token punctuation">;</span> <span class="token comment">// 声明变量</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 变量初始化</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 声明变量的同时初始化</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>js是弱类型的语言，变量是没有数据类型，变量值才有数据类型。所以变量的数据类型由值决定。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>数据类型<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 变量a的数据类型由值决定</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>a <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript中的数据类型分为<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><p>基本数据类型: number、boolean、undefined、null、string</p><p>引用数据类型: Object(Array, Function, Object, Date等)，后续再讲。</p><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>基本数据类型<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">/*   number数值类型：     包含：整数型、浮点型、NaN(not a number)和Infinity（正负无穷大）  */</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// boolean: 布尔类型，布尔类型只有两个值：true 和 false</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b= "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// undefined类型只有一个值，就是undefined</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c= "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 只声明变量不初始化,结果就是undefined</span><span class="token keyword">var</span> d<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d= "</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* string类型就是字符串，在JavaScript语言中，使用单引号或双引号包裹的内容，我们都称之为字符串。  */</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"s= "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// null类型</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"n= "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为null表示的是一个空对象的指针，所以使用typeof操作符检测null会返回object的原因。</p><p>本质上这是一个bug，因为当初设计JavaScript这门语言的时候比较仓促，后来发现的时候已经好多开发者在使用了，如果修改这个bug对原有项目的代码改动极大，所以就只能将错就错了。</p><h2 id="表达式与运算符"><a href="#表达式与运算符" class="headerlink" title="表达式与运算符"></a>表达式与运算符</h2><ul><li><p>算数运算符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>运算符<span class="token number">01</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 算术运算符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token comment">// +遇到字符串就是拼接符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1,null转换成0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span><span class="token comment">// +号和-号的特殊作用,可以做类型转换</span><span class="token comment">// 在数字类型的字符串前面使用+,就会将字符串转数字</span><span class="token comment">// -号会改变正负,所以一般不会使用</span><span class="token comment">// 注意: +"123"前不能添加其他内容</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token operator">+</span><span class="token string">"123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 其他符号（* / % ++ --）和java一样</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>赋值运算符</p><p>执行结果和java的一样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件运算符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment">// == 只会比较内容,不会判断类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>    <span class="token comment">// === 不仅仅比较内容,还会比较类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>    <span class="token comment">// != 只会比较内容,不会判断类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>    <span class="token comment">// !== 不仅仅比较内容,还会比较类型</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>区别：“&#x3D;&#x3D;”表示相等，“&#x3D;&#x3D;&#x3D;&#x3D;”表示严格相等。“&#x3D;&#x3D;”运算符会在进行相等比较之前先进行必要值的类型转换；而“&#x3D;&#x3D;&#x3D;”运算符不会执行类型转换，因此如果两个值类型不同，那么比较时，直接返回false。</strong></p></li><li><p>逻辑运算符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// &amp;&amp; 短路与  || 短路或  ! 逻辑非</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>a<span class="token operator">++</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>三目运算符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 接收用户输入的年龄,进行判断</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeof age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 数字类型的字符串做比较,会转成数值类型</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"该淘汰了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"该工作了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"未成年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swith语句"><a href="#swith语句" class="headerlink" title="swith语句"></a>swith语句</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> season <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入季节："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> spring <span class="token operator">=</span> <span class="token string">'春'</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>season<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// js中case后面可以使用变量</span>        <span class="token keyword">case</span> <span class="token literal-property property">spring</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"春眠不觉晓"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'夏'</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"处处蚊子咬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'秋'</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"打上敌敌畏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'冬'</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不知死多少"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你输啥玩意儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment">// 在页面上输出九九乘法表</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">'*'</span> <span class="token operator">+</span> i <span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment">// while循环输出1-10的偶数</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token comment">// do...while循环输出1-10的偶数</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><p>break终止整个循环，continue终止本次循环，进入下一次循环</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// break;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="格式一："><a href="#格式一：" class="headerlink" title="格式一："></a>格式一：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    函数体；    <span class="token punctuation">[</span><span class="token keyword">return</span> <span class="token punctuation">[</span>返回值<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>和Java相比，js 中的函数没有返回值类型，该函数，可以返回，也可以不返回参数列表，直接给变量，无需给变量类型。</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>自定义函数_格式一<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 定义函数</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello,js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>show<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于Syetem.out.println(student);输出对象内容信息</span><span class="token comment">// function是object类型,js是函数式编程</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> show<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// function</span><span class="token comment">// 调用函数</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 形参是不能使用var修饰的</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a= "</span> <span class="token operator">+</span> a <span class="token operator">+</span><span class="token string">",b= "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用函数</span><span class="token comment">// 在js中实参列表和形参列表的数量不一致,是不会报错的</span><span class="token comment">// 没有实参赋值的形参就是undefined</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="格式二："><a href="#格式二：" class="headerlink" title="格式二："></a>格式二：</h3><ul><li><strong>匿名函数的定义规则：</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">变量名</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     函数体；    <span class="token punctuation">[</span><span class="token keyword">return</span> <span class="token punctuation">[</span>返回值<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>自定义函数_格式二<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名函数主要是用来做参数传递的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>eg：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>自定义函数_格式二<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"定时器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"页面加载完毕事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="内置函数-数据类型转换函数"><a href="#内置函数-数据类型转换函数" class="headerlink" title="内置函数-数据类型转换函数"></a>内置函数-数据类型转换函数</h2><ul><li>Number(value)——把给定的值转换成数字(可以是整数或浮点数)</li><li>Boolean(value)——把给定的值转换成Boolean型</li><li>String(value)——把给定的值转换成字符串</li><li>parseInt(value) ——把String解析成整数</li><li>parseFloat(value) ——把String解析成number</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>内置函数<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 将字符串123转成数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'123a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4.140000000000001</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span><span class="token comment">//在javascript 中，正数，负数就是 true ；0 就是false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 没有实际内容的值转成boolean都是false</span><span class="token comment">// 0 "" null NaN undefined转成boolean都是false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String(value)将任意类型的数据转成String;也就是转成'value'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "NaN"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 'undefined'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'null'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Object]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'true'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// parseInt只能提取数字开头的字符串,不是数字开头的就是NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"a123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123.99"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// parseFloat只能提取数字开头的字符串,不是数字开头的就是NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.14</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"3.14aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.14</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"a3.14aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"undefined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内置函数-编码和解码函数"><a href="#内置函数-编码和解码函数" class="headerlink" title="内置函数-编码和解码函数"></a>内置函数-编码和解码函数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>内置函数<span class="token operator">-</span>编码和解码函数<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=%E6%89%8B%E6%9C%BA</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"http://www.baidu.com?keyword=手机"</span><span class="token punctuation">;</span><span class="token comment">// 编码</span><span class="token keyword">var</span> encode <span class="token operator">=</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// http://www.baidu.com?keyword=%E6%89%8B%E6%9C%BA</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解码</span><span class="token keyword">var</span> decode <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// http://www.baidu.com?keyword=手机</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内置函数-isNaN"><a href="#内置函数-isNaN" class="headerlink" title="内置函数-isNaN"></a>内置函数-isNaN</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>内置函数<span class="token operator">-</span>isNaN<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// isNaN() 判断值是不是NaN类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="弹出框"><a href="#弹出框" class="headerlink" title="弹出框"></a>弹出框</h2><p><strong>警告框     alert, 常用。</strong></p><p><strong>询问框     prompt返回提示框中的值。</strong></p><p><strong>确认框     confirm返回true&#x2F;false。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>弹出框<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'来了，老弟'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回输入的值</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回boolean</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"确定删除？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h2><h3 id="方式一-使用-表示对象"><a href="#方式一-使用-表示对象" class="headerlink" title="方式一:使用{}表示对象"></a>方式一:使用{}表示对象</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>自定义对象_方式一<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">/*    json：javascript对象表示法   所以js中定义对象使用json格式 */</span><span class="token comment">// var stu = &#123;&#125;</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">// js中对象的属性可以使用引号,也可以不使用引号</span><span class="token comment">// 属性</span><span class="token string-property property">'name'</span><span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string-property property">'sex'</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token comment">// 方法</span><span class="token function-variable function">study</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"好好学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> stu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用对象的属性和方法</span><span class="token comment">// 方式一: 使用点语法</span>stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">// console.log(stu.user.name);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二: 使用 对象[属性]</span><span class="token comment">// 如果属性名中有特殊符号就可以使用方式二</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//console.log(stu.aa); //undefined</span><span class="token comment">//stu.aa = 'aa';  //说明属性可以动态添加</span><span class="token comment">//console.log(stu.aa); //aa</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式二：使用new-Object"><a href="#方式二：使用new-Object" class="headerlink" title="方式二：使用new Object()"></a>方式二：使用new Object()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>自定义对象_方式二<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 创建一个空对象,是没有定义属性和方法的</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 随意给空对象定义属性和方法</span>stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吃饭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上创建对象的两种方式都有一个很大的弊端：属性的值固定了，也就是只能创建一个对象，需要创建多个对象的话，属性和方法需要重复编写。如何解决?使用构造函数创建对象</p><h3 id="方式三：使用构造函数创建对象"><a href="#方式三：使用构造函数创建对象" class="headerlink" title="方式三：使用构造函数创建对象"></a>方式三：使用构造函数创建对象</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>自定义对象_方式三<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 构造函数的规范: 方法名首字母大写</span><span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// this不能省略</span><span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token comment">// 成员方法</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">eat</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吃啥呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> 变量名 <span class="token keyword">in</span> 对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 这里的变量名就是对象的成员名称</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>遍历对象<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历对象</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> stu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM对象-重中之重"><a href="#DOM对象-重中之重" class="headerlink" title="DOM对象-重中之重"></a>DOM对象-重中之重</h2><p>DOM: Document Object Model 文档对象模型</p><h3 id="HTML-DOM-树"><a href="#HTML-DOM-树" class="headerlink" title="HTML DOM 树"></a>HTML DOM 树</h3><p><img src="/.io//powernode\course\03_Web\JavaScript.assets\wps1.jpg" alt="img"></p><p>在js中将一个html页面当做一个文档对象：document对象</p><p>js将html中的标签、属性等也封装成了对应的DOM对象</p><p>所以操作DOM对象就是操作HTML页面</p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token constant">DOM_</span>获取元素<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"p1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"c1"</span> name<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>段落<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"c1"</span><span class="token operator">></span>段落<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p name<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>段落<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 通过id获取元素,返回的是元素的DOM对象</span><span class="token keyword">var</span> pELe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pELe<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> pELe<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span><span class="token comment">// 操作pEle对象就是操作id是p1的标签</span>pELe<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'xyz'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过类名获取元素,返回的是元素的DOM对象组成的数组</span><span class="token keyword">var</span> eles <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过[索引]获取数组中的元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> eles<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过标签名称获取元素,返回的是元素的DOM对象组成的数组</span><span class="token keyword">var</span> eleList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eleList<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eleList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> eleList<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过name属性获取元素,返回的是元素的DOM对象组成的数组</span><span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="innerText和innerHTML"><a href="#innerText和innerHTML" class="headerlink" title="innerText和innerHTML"></a>innerText和innerHTML</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>innerText和innerHTML<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> divEle01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> divEle02 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  在js中  dom对象.属性=xxx 就是给属性赋值；   dom对象.属性 就是获取属性的值  */</span><span class="token comment">// 给元素添加文本内容</span><span class="token comment">// innerText所有内容当成普通字符串,不会识别html标签</span>divEle01<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'&lt;h1>我爱你，中国&lt;/h1>'</span><span class="token punctuation">;</span><span class="token comment">// innerHTML 会识别html标签</span>divEle02<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'&lt;h1>我爱你，中国&lt;/h1>'</span><span class="token punctuation">;</span><span class="token comment">// 获取元素的文本内容</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divEle01<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divEle02<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><blockquote><p>在js中  dom对象.属性&#x3D;xxx 就是给属性赋值；<br>dom对象.属性 就是获取属性的值</p></blockquote><h3 id="动态生成表格"><a href="#动态生成表格" class="headerlink" title="动态生成表格"></a>动态生成表格</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>动态生成表格<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>table<span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> 300px<span class="token punctuation">;</span><span class="token comment">/* 折叠边框线 */</span>border<span class="token operator">-</span>collapse<span class="token operator">:</span> collapse<span class="token punctuation">;</span><span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>table<span class="token punctuation">,</span>td<span class="token punctuation">,</span>th<span class="token punctuation">&#123;</span><span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid black<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>table<span class="token operator">></span><span class="token operator">&lt;</span>thead<span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>th<span class="token operator">></span>姓名<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span><span class="token operator">&lt;</span>th<span class="token operator">></span>年龄<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span><span class="token operator">&lt;</span>th<span class="token operator">></span>性别<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span><span class="token operator">&lt;</span>th<span class="token operator">></span>地址<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span><span class="token operator">&lt;</span>tbody id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span><span class="token operator">&lt;</span>tfoot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tfoot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">"成都"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">"北京"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"韩梅梅"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">"上海"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">"成都"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">// 获取table</span><span class="token keyword">var</span> tbodyEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数组的长度 = tr的数量</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> students<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 创建tr标签</span><span class="token keyword">var</span> trEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将tr标签添加到tbody中</span>tbodyEle<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>trEle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数组中每个对象的属性数量 = td的数量</span><span class="token keyword">var</span> stu <span class="token operator">=</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> stu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 创建td标签</span><span class="token keyword">var</span> tdEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"td"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 给td设置文本内容</span><span class="token comment">// td的文本内容 = 对象的属性值</span>tdEle<span class="token punctuation">.</span>innerText <span class="token operator">=</span> stu<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 将td标签添加到tr中</span>trEle<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>tdEle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h3><p>事件：就是和元素的交互行为</p><p><strong>事件三要素：</strong></p><p>事件主体：也就是和哪一个元素交互</p><p>事件类型：发生了什么类型的交互，比如说单击、鼠标按下</p><p>事件的功能：发生事件后需要完成什么功能</p><h4 id="单击事件"><a href="#单击事件" class="headerlink" title="单击事件"></a>单击事件</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token constant">DOM</span>事件<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"p1"</span><span class="token operator">></span>段落<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> pEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  pEle 事件主体 onclick  事件类型是click单击事件    onclick是click单击事件的句柄（引用）onxxx 就是xxx事件的句柄，事件句柄是元素的属性 function()  事件功能 */</span>pEle<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"nihao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取焦点和失去焦点的事件"><a href="#获取焦点和失去焦点的事件" class="headerlink" title="获取焦点和失去焦点的事件"></a>获取焦点和失去焦点的事件</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>获取焦点和失去焦点的事件<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>#tip<span class="token punctuation">&#123;</span>font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span><span class="token literal-property property">color</span><span class="token operator">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>hidden<span class="token punctuation">&#123;</span><span class="token literal-property property">display</span><span class="token operator">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token literal-property property">display</span><span class="token operator">:</span> inline<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"#"</span> method<span class="token operator">=</span><span class="token string">"get"</span><span class="token operator">></span>账号：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> id<span class="token operator">=</span><span class="token string">"account"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入5-8位名称"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"tip"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hidden"</span><span class="token operator">></span>账号长度不正确<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"password"</span> id<span class="token operator">=</span><span class="token string">"pwd"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment">// 1. 获取账号的input</span><span class="token keyword">var</span> nameEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"account"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tipEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"tip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 设置失去焦点的事件</span>nameEle<span class="token punctuation">.</span><span class="token function-variable function">onblur</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 失去焦点后获取input的值进行判断</span><span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">||</span> val<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// class是js中的关键字,表示类</span><span class="token comment">// className就是标签的class属性</span>tipEle<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'show'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3. 设置获取焦点事件</span>nameEle<span class="token punctuation">.</span><span class="token function-variable function">onfocus</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tipEle<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'hidden'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>鼠标事件<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>div<span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token operator">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 鼠标移到某元素之上。</span>div<span class="token punctuation">.</span><span class="token function-variable function">onmouseenter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>div<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"background-color: blue"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 鼠标从某元素移开。</span>div<span class="token punctuation">.</span><span class="token function-variable function">onmouseleave</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>div<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">"background-color: red"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事件的另一种写法"><a href="#事件的另一种写法" class="headerlink" title="事件的另一种写法"></a>事件的另一种写法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>事件的另一种写法<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p onclick<span class="token operator">=</span><span class="token string">"show();"</span><span class="token operator">></span>段落<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="event事件对象"><a href="#event事件对象" class="headerlink" title="event事件对象"></a>event事件对象</h4><p>Event 对象代表事件的状态，比如事件在其中发生的元素、键盘按键的状态、鼠标的位置、鼠标按钮的状态。</p><p>事件通常与函数结合使用，函数不会在事件发生前被执行！</p><p>注意： 每一个事件中都有event事件对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>event事件对象<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"p1"</span><span class="token operator">></span>段落<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这里的实参event名称不能乱写 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>p onmousemove<span class="token operator">=</span><span class="token string">"show(event);"</span><span class="token operator">></span>段落<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> pEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里的event仅仅是一个变量,可以是其他任意的名字</span>pEle<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当事件被触发时，鼠标指针的水平和垂直坐标。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX <span class="token operator">+</span><span class="token string">"--"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>clientX <span class="token operator">+</span><span class="token string">"--"</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="阻止事件的默认行为"><a href="#阻止事件的默认行为" class="headerlink" title="阻止事件的默认行为"></a>阻止事件的默认行为</h4><p>在html中，有些元素是自带事件的，比如 a标签、submit类型的按钮、reset类型的按钮</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>阻止事件的默认行为<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 点击超链接标签后控制台输出语句，不跳转页面 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span> id<span class="token operator">=</span><span class="token string">"a1"</span><span class="token operator">></span>百度一下<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> aEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a标签有默认的事件行为（跳转页面）,根据我们的需求需要阻止</span>aEle<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 阻止默认行为</span><span class="token comment">// return false;</span><span class="token comment">// console.log(event.defaultPrevented); // false</span><span class="token comment">// 阻止默认行为</span><span class="token keyword">return</span> event<span class="token punctuation">.</span>defaultPrevented<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><p>父元素和子元素都绑定了事件，此时触发子元素的事件，父元素的事件也被触发，这就是子元素的事件向上</p><p>传播给了父元素，造成父元素的事件也被触发了，这叫做事件冒泡。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>阻止事件冒泡<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>#d1 <span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token operator">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#d2 <span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token operator">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d1"</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d2"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> d1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> d2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fu-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>d2<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"zi-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 阻止事件冒泡</span>event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全选案例"><a href="#全选案例" class="headerlink" title="全选案例"></a>全选案例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>全选案例<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>table<span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> 300px<span class="token punctuation">;</span><span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>table<span class="token punctuation">,</span>th<span class="token punctuation">,</span>td<span class="token punctuation">&#123;</span><span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid black<span class="token punctuation">;</span>border<span class="token operator">-</span>collapse<span class="token operator">:</span> collapse<span class="token punctuation">;</span>text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>table<span class="token operator">></span><span class="token operator">&lt;</span>thead<span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>th<span class="token operator">></span>学号<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span><span class="token operator">&lt;</span>th<span class="token operator">></span>姓名<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span><span class="token operator">&lt;</span>th<span class="token operator">></span>年龄<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span><span class="token operator">&lt;</span>th<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span>  id<span class="token operator">=</span><span class="token string">"all"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">></span><span class="token operator">&lt;</span>tbody id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">1001</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>张三<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">20</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">1002</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>李四<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">21</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">1003</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>王五<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">23</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">1004</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>李磊<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token number">22</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 用来统计每一行被选中的个数</span><span class="token comment">// 全选按钮 联动 每一行的按钮</span><span class="token comment">// 1. 获取全选按钮</span><span class="token keyword">var</span> all <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取tbody中的input</span><span class="token keyword">var</span> inputList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 给全选按钮设置单击事件</span>all<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 3. 获取全选按钮的状态</span><span class="token keyword">var</span> allState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>allState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 4. 每一行的按钮的状态和全选按钮的状态一致</span><span class="token comment">// 4.1 获取每一行的按钮</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 获取每一行的按钮,设置状态和全选按钮的状态一致</span>inputList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> allState<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//每一行的按钮 联动 全选按钮 </span><span class="token comment">// 1. 给每一行的按钮添加单击事件</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 获取每一行的按钮,添加单击事件</span>inputList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断count和 inputList.length是否相等</span><span class="token comment">// 相等就说明每一行的按钮都选中了</span>all<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> inputList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JS常用对象"><a href="#JS常用对象" class="headerlink" title="JS常用对象"></a>JS常用对象</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>常用对象<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">884545786457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2022-10-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// document.write(date.toLocaleString());</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -3</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -3</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -4</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"js"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;hr/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// var arr01 = new Array(); // 定义一个长度为0的数组</span><span class="token comment">// var arr01 = new Array(3);// 定义一个长度为3的数组</span><span class="token keyword">var</span> arr01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义一个初始值为1,2,3的数组</span><span class="token comment">// js中的数组会自动扩容</span>arr01<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>arr01<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>arr01<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr01<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除最后一个元素</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;br/>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>arr01<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BOM对象-熟悉"><a href="#BOM对象-熟悉" class="headerlink" title="BOM对象-熟悉"></a>BOM对象-熟悉</h2><p>BOM: (Browser Object Model)浏览器对象模型</p><p>浏览器在js中对应BOM对象。</p><p>BOM包含DOM对象</p><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p>window对象代表了整个浏览器窗口</p><blockquote><p>所有浏览器都支持 window 对象。它表示浏览器窗口。</p><p>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。</p><p>全局变量是 window 对象的属性。</p><p>全局函数是 window 对象的方法。 window.alert()&#x2F;prompt()&#x2F;confirm()</p><p>甚至 HTML DOM 的 document 也是 window 对象的属性之一：</p><p>window.document.getElementById(“header”);</p><p>与下面的代码相同：</p><p>document.getElementById(“header”);</p></blockquote><h3 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h3><p><img src="/.io//powernode\course\03_Web\JavaScript.assets\wps2.jpg" alt="img"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Location对象<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"show();"</span><span class="token operator">></span>点击<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>   <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// http://127.0.0.1:8848/JSDemo/39-Location%E5%AF%B9%E8%B1%A1.html?username=zhangsan&amp;pwd=123456</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"protocol="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// http:</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"host="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 127.0.0.1:8848</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"port="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 8848</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pathname="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// /JSDemo/39-Location%E5%AF%B9%E8%B1%.html?username=zhangsan&amp;pwd=123456</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"search="</span> <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ?username=zhangsan&amp;pwd=123456</span>         <span class="token comment">// 跳转到百度</span>       <span class="token comment">// window.location.href = 'http://www.baidu.com';</span>    <span class="token comment">// window.location.replace("http://www.bjpowernode.com")</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">"http://www.bjpowernode.com"</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="History对象"><a href="#History对象" class="headerlink" title="History对象"></a>History对象</h3><p>History对象01.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>History对象01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40-History对象02.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>History对象02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>前进<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 调到下一个页面</span><span class="token comment">// history.forward();</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>History对象02.html</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>History对象<span class="token number">02</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"priv();"</span><span class="token operator">></span>回退<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">priv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 返回上一个页面</span><span class="token comment">// history.back();</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>定时器<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span><span class="token punctuation">.</span>c1 <span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token operator">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>c2 <span class="token punctuation">&#123;</span><span class="token literal-property property">width</span><span class="token operator">:</span> 300px<span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span> 300px<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token operator">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"d1"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"c1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"d1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// div -- 2秒后变成蓝色</span><span class="token comment">// var code = setTimeout(function,time) 只会执行一次</span><span class="token comment">// setTimeout(function()&#123;</span><span class="token comment">// div.className='c2';</span><span class="token comment">// &#125;,2000);</span>           <span class="token comment">// setInterval(function,time) 周期性执行一次</span>   <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'c2'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'c1'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token operator">=</span> <span class="token operator">!</span>bool<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// clearTimeout()</span><span class="token comment">// 清除定时器</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h3><p>把JavaScript 字符串参数作为脚本代码来执行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>eval函数<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'&#123;"name":"张三","age":22,"sex":"male"&#125;'</span><span class="token punctuation">;</span><span class="token comment">/*   在js中&#123;&#125;除了表示对象外，还是代码块   所以这里直接将json传入eval中，eval函数将&#123;&#125;当做代码块解析  此时需要将 json使用（）括起来表示是一个值，这个值是对象 */</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token operator">+</span>json<span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h3><p>意为本地会话存储:  值存储进去，如果浏览器关闭，那么这个值就没有了。</p><p>sessionStorage存储数据大小最多5M</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>sessionStorage<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span>  id<span class="token operator">=</span><span class="token string">"t1"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"save();"</span><span class="token operator">></span>保存<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"get();"</span><span class="token operator">></span>获取<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"del();"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 存储格式给 kv键值对</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>input<span class="token punctuation">.</span>value <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>意为本地存储:值存储进去，如果浏览器不清空或者不调用它本身的删除方法，那么这个值会永久的存在客户端。</p><p>localStorage存储数据大小最多10M</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>localStorage<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span>  id<span class="token operator">=</span><span class="token string">"t1"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"save();"</span><span class="token operator">></span>保存<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"get();"</span><span class="token operator">></span>获取<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> onclick<span class="token operator">=</span><span class="token string">"del();"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 存储格式给 kv键值对</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>input<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>input<span class="token punctuation">.</span>value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h1>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="/2022/08/24/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/24/CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><center>CSS学习笔记</center><hr><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS是Cascading Style Sheets（层叠样式表）的简称，是负责美化页面的</p><h2 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>     <span class="token property">属性1</span><span class="token punctuation">:</span> 值1<span class="token punctuation">;</span>     <span class="token property">属性2</span><span class="token punctuation">:</span> 值2<span class="token punctuation">;</span>     ...     <span class="token property">属性N</span><span class="token punctuation">:</span> 值N<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>选择器就是用来选择需要美化的html标签。</strong></p><p>html中属性的格式是： <strong>属性&#x3D;”属性值”</strong></p><p>css中属性的格式是： <strong>属性: 值;</strong> </p><h2 id="CSS引入"><a href="#CSS引入" class="headerlink" title="CSS引入"></a>CSS引入</h2><ul><li><p>方式一：行内式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>css引入_行内式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   css行内式： 就是使用标签的style属性添加样式  优点：编写方便，针对要处理的内容，可以直观的看到结果。  缺点：复用性太差，样式只能作用在当前单个标签，多个标签不能共享该样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式二：嵌入式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>css引入_嵌入式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--     嵌入式通过在head标签中添加style标签，在style标签内部编写css代码type="text/css"  text是大的类型  css是小的类型  -- MIME类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/* 这是css的注释 */</span><span class="token comment">/*   嵌入式：            作用：针对当前文档中所有符合标签名称的标签内容，按照设置的样式进行展示。  优点：同一个页面中的标签可以共享样式  缺点：同一个项目的不同页面不能共享样式 */</span><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式三：外联式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>css引入_外联式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  外联式:也就说css和html不在同一个页面，css从html中独立出去成为一个css文件 然后在html中引入css文件  外联式： 优点：css和html解耦了，所以css可以被多个html页面共享 缺点：可读性差，样式覆盖问题，使用样式采用的是就近原则 --></span> <span class="token comment">&lt;!--     通过link标签引入外部css文件rel="stylesheet"   rel属性表示关联的是样式表href属性就是样式文件的路径  --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/base.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="样式的优先级"><a href="#样式的优先级" class="headerlink" title="样式的优先级"></a>样式的优先级</h2><p>  多重样式：如果外部样式、内部样式和内联样式同时应用于同一个元素，就是使多重样式的情况。</p><p>  样式优先级总结：<strong>谁离得近，谁优先级高！</strong>行内样式优先级最高！</p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标签选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*    标签选择器的语法格式：标签名&#123;属性:值;&#125; */</span><span class="token comment">/*   以下选择器表示选中当前页面中的所有div标签            缺点：只能给符合标签名称的所有标签设置样式。            比如：想给符合标签的部分标签设置样式，标签选择器是做不到的            解决方案：采用类选择器             */</span><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>div01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>div02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>类选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--     类选择器的语法格式：.类名&#123;属性:值;&#125;注意：类名是通过标签的class属性设置的.相同的类名可以用在多个标签上一个标签可以有多个类名其值可重复使用，使用 . 开头 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"> <span class="token selector">.c1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c2</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c</span><span class="token punctuation">&#123;</span><span class="token comment">/* color属性表示文字的颜色 */</span><span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 一个标签可以有多个类名，类名之间使用空格分开 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1 c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c2 c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1 c<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>id选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*             很少使用，因为css样式文件，是前端提供的，然后后台程序员，根据需求，经常会使用到id属性。前端要考虑这个问题，所以前端那边，尽量不要使用id选择器。                        就近原则：使用的前提是采用同种手段，设置的样式            确定性原则，那个选择器的确定性更高，设置哪个选择启动样式。            什么时候使用就近原则：当设置样式的规则是一样的（要么全部使用类选择器，要么全部使用标签选择器）            什么时候使用确定性原则：当设置样式的规则不同的时候（比如，设置同一个标签的样式，采用了id选择器，标签选择器）             id选择器语法格式：  #id号&#123;  属性:值;  &#125;  注意：id号是通过标签的id属性设置的.  规范要求：每个标签的id号唯一。因为id主要是为了配合js代码。 */</span><span class="token selector">#p1</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>通配符选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--     通配符选择器的语法格式： *&#123;属性:值; &#125;*表示选中body页面中的所有标签  --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"> <span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>我爱你祖国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基础选择器的优先级"><a href="#基础选择器的优先级" class="headerlink" title="基础选择器的优先级"></a>基础选择器的优先级</h3><p><strong>不同选择器的相同样式作用在同一个标签上才需要区分优先级。</strong></p><p><strong>范围越小优先级越高</strong></p><p><strong>!important &gt; 行内式 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符选择器</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>基础选择器的优先级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token comment">/*   !important 用来提升优先级 */</span><span class="token property">color</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#p1</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c1</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> yellow</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><p>复合选择器就是<strong>多个基础选择器组成的选择器</strong></p><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>后代选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*   后代选择器语法格式：   选择器1 选择器n&#123;   属性:值;   &#125;   后代：包含子子孙孙            查找 类选择器.c1 里面的所有span标签 */</span><span class="token selector">.c1 span</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>粗体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>子代选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*    子代选择器语法格式：    选择器1>选择器n&#123;   属性:值;    &#125;    子代：亲儿子  */</span><span class="token selector">div>span</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>粗体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>相邻兄弟选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*                和标签的类型无关  相邻兄弟选择器的语法格式：    选择器1+选择器n&#123;属性:值;&#125;相邻兄弟选择器必须是紧挨着的，且只能向下查找 */</span><span class="token selector">div+p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a>通用兄弟选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>通用兄弟选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*  通用兄弟选择器语法格式：   选择器1~选择器n&#123;    属性:值;    &#125;  通用兄弟选择器只要是指定的兄弟标签即可  div~* 表示div下的所有兄弟，不过很少这样使用 */</span><span class="token selector">div~p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>交集选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*  交集选择器语法格式：  选择器1选择器n&#123;  属性:值;  &#125;  注意：标签选择器只能位于最前面 */</span><span class="token comment">/*   p.c1表示选择p标签且类名是c1的 */</span><span class="token selector">p.c1</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>并集选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*  并集选择器语法格式：  选择器1,选择器n&#123;  属性:值;  &#125; */</span><span class="token selector">.c1,b,i,span</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复合选择器的优先级"><a href="#复合选择器的优先级" class="headerlink" title="复合选择器的优先级"></a>复合选择器的优先级</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>复合选择器的优先级<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*    复合选择器的优先级需要根据基础选择器的优先级来判断   id选择器 > 类选择器 > 标签选择器    100          10        1             ---- 虚拟的优先级权重复合选择器的虚拟的优先级权重累加，结果最大的优先级最高；如果累加的结果一样，就按照就近原则 */</span><span class="token selector">div p span</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#d1>.c2>span</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#d1>#p1>#s1</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token selector">.c1>#p1>.c3</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> deeppink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#d1>.c2>.c3</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*    属性选择器的语法格式：   格式一：[属性名]&#123;属性：值；&#125;[type]&#123;border: 2px solid blue;&#125;   格式二：[属性名="值"]&#123;属性：值；&#125;                        eg：[name="xxx"]&#123;属性：值;&#125; */</span> <span class="token selector">[type="text"]</span><span class="token punctuation">&#123;</span>     <span class="token property">border</span><span class="token punctuation">:</span> 2px solid blue<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p><strong>伪类通过冒号来定义，它定义了元素的状态，伪类不是我们自己定义的类，而是css值已经定义好的类.</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>伪类选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*   :link 表示默认的状态 */</span><span class="token selector">a:link</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*  :visited 表示被访问后的状态 */</span><span class="token selector">a:visited</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*   :visited 表示鼠标停留在上面的状态 */</span><span class="token selector">a:hover</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*   :active 表示鼠标点击按下的状态 */</span><span class="token selector">a:active</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>背景属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token comment">/* 背景图片会覆盖背景色 */</span> <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>image/bg.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token comment">/*    是否重复   repeat 表示重复，就是平铺 -- 默认   no-repeat 表示不重复，就是不平铺 */</span><span class="token property">background-repeat</span><span class="token punctuation">:</span> repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文字属性"><a href="#文字属性" class="headerlink" title="文字属性"></a>文字属性</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>字体属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*     所有的颜色都是由三原色组成   三原色： 红-red,绿-green，蓝-blue   css的中颜色可以使用英文、十进制、十六进制表示   英文： red   green  skyblue pink   十六进制：      - 三位表示法：#000-#fff    000 黑色  fff 白色f00 红色  0f0 绿色  00f 蓝色 - 六位表示法: #000000-#ffffff    ff0000 红色ffff00 黄色    十进制：    0-255    RGB(255,0,0)RGBA(255,0,0,)A：alpha通道  表示透明度  0-10表示透明，内容看不到     1表示不透明，内容看得到 */</span><span class="token selector">span</span><span class="token punctuation">&#123;</span><span class="token comment">/*    文字的颜色 */</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token comment">/*    文字的大小 */</span><span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token comment">/*    文字的样式   normal: 正常   italic: 斜体 */</span><span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span><span class="token comment">/*    文字的权重：加粗 */</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token comment">/*    文字的字体   如果属性值中有特殊符号，属性值需要使用""引起来 */</span><span class="token property">font-family</span><span class="token punctuation">:</span> 华文彩云<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token comment">/* font的简写注意点：   font简写必须包含font-size和font-family，必须是font-size font-family的顺序且必须在最后font-style和font-weight在前面，两者之间没有顺序要求 */</span><span class="token property">font</span><span class="token punctuation">:</span>bold italic 20px 华文彩云 <span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>好好学习，天天向上<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>好好学习<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文本属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token comment">/*   文本装饰:  none  什么装饰都没有，如果是a标签就会取消默认的下划线  underline 下划线  line-through  删除线  overline 顶格线 */</span><span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span><span class="token comment">/*    文本水平对齐方式 */</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment">/*    行高: 从文字的中央基线向上和向下延伸的距离   将行高设置成父容器的高度就可以做到单行文本的垂直居中 */</span><span class="token property">line-height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token comment">/*  设置字与字之间,字母和字母之间的间距。 */</span><span class="token property">letter-spacing</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p</span><span class="token punctuation">&#123;</span><span class="token comment">/*    文本缩进    2em 表示2个文字的大小 */</span><span class="token property">text-indent</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span><span class="token comment">/*  opacity用来设置透明度，默认值为1，1为不透明，0为完全透明。 隐藏一个元素 ，完全不显示，但是会占空间，只是看不到。 */</span><span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>好好学习,good<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>浙江品诺机械有限公司车间里热火朝天，电机声隆隆，每台设备上装着传感器，通过5G技术联上“轴承产业大脑”，设备状况、产品产量及质量等数据在LED显示屏上一目了然。经过数字化改造后，该车间产出效率提升8%，自动采集的数据上传汇总还能让管理事半功倍。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><strong>实现溢出文本ellipsis的解决，让溢出的文字以省略号显示。</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>实现溢出文本eclipsis的解决<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 5em<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token comment">/*设置文本不能换行*/</span><span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span><span class="token comment">/*设置文本超出文本框时隐藏文本*/</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token comment">/*用略符号来代表被修剪的文本*/</span><span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>好好学习，天天向上<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="边框线"><a href="#边框线" class="headerlink" title="边框线"></a>边框线</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>边框线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 3px solid blue<span class="token punctuation">;</span><span class="token comment">/* 半径是宽高的一半，就是圆 */</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token comment">/* border-bottom-width: 3px;border-bottom-color: #0000FF;border-bottom-style: solid; */</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>列表属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">ul</span><span class="token punctuation">&#123;</span><span class="token comment">/* 设置列表编号类型 */</span><span class="token comment">/* list-style-type: circle; */</span><span class="token comment">/*    取消列表的编号 */</span><span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元素的分类"><a href="#元素的分类" class="headerlink" title="元素的分类"></a>元素的分类</h2><p><strong>html元素分为行内元素、块级元素、行内块元素</strong></p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><ul><li>不能设置宽高，宽高是包裹内容的</li><li>一行可以显示多个行内元素</li><li>常见的行内元素：span、a，em，strong, i, u, del</li></ul><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><ul><li>可以设置宽高。宽度默认独占一行，高度默认包裹内容</li><li>一行只能显示一个元素</li><li>常见的块级元素：div, body,p，h1~h6，ul，ol，li，pre</li></ul><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><ul><li>可以设置宽高</li><li>一行可以显示多个行内块元素</li><li>常见的行内块元素： img、input</li></ul><h2 id="元素类型的转换"><a href="#元素类型的转换" class="headerlink" title="元素类型的转换"></a>元素类型的转换</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>元素的分类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#s1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token comment">/* 转成块级元素 */</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#s2</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token comment">/* 转换成行内元素 */</span><span class="token comment">/* display: inline; */</span><span class="token comment">/* 转换成行内块元素，一行可以显示多个，元素之间默认有间距 */</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c2</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> peru<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><strong>盒子模型不是html中的一个元素，也不是css的一个样式，而是对css中一组属性的形象化描述。</strong></p><p><strong>宽高、边框线、内边距、外边距就是盒子模型的形象化描述</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>盒子模型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.c1</span><span class="token punctuation">&#123;</span><span class="token comment">/*    盒子内容的宽高  */</span><span class="token property">width</span><span class="token punctuation">:</span> 96px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 96px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> salmon<span class="token punctuation">;</span><span class="token comment">/*    border会撑大盒子的大小 */</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span><span class="token comment">/*    padding表示盒子的内边距，盒子内容和盒子边框的距离   padding: 1px 2px 3px 4px  上右下左的内边距   padding: 1px 2px 3px;  上右下，左和右的值一样   padding: 1px 2px; 上右，下和上一样，左和右的值一样   padding: 1px; 上右下左都一样 */</span><span class="token comment">/*  padding会撑大盒子的大小 */</span><span class="token property">padding</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span><span class="token comment">/*  margin盒子的外边距，盒子和盒子外其他内容之间的距离 margin: 1px; 上右下左都一样 */</span><span class="token comment">/*  margin 不会撑大盒子的大小 */</span><span class="token property">margin</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.c2</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 2px solid blue<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span><span class="token comment">/* css3的属性 使用box-sizing: border-box;这个后 宽高就是盒子的宽高，内容的宽高自动减少了 */</span><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="盒子水平居中"><a href="#盒子水平居中" class="headerlink" title="盒子水平居中"></a>盒子水平居中</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>盒子水平居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*    清除页面默认的外边距和内边距   0可以不带px单位 */</span><span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token comment">/* 盒子水平居中 */</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css页面的布局"><a href="#css页面的布局" class="headerlink" title="css页面的布局"></a>css页面的布局</h2><p><strong>css中页面的布局分为：标准流、浮动流、定位流</strong></p><h3 id="标准流"><a href="#标准流" class="headerlink" title="标准流"></a>标准流</h3><p>页面默认就是标准流，<strong>也就是从上到下，从左到右的显示布局</strong></p><h3 id="浮动流"><a href="#浮动流" class="headerlink" title="浮动流"></a>浮动流</h3><p>浮动流是一种<strong>脱离标准流</strong>的<strong>水平布局</strong>方式</p></h1>]]></content>
      
      
      
        <tags>
            
            <tag> CSS学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2022/08/23/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/23/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><center>HTML学习笔记</center><hr><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h2 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h2><ul><li><p>C&#x2F;S架构（Client&#x2F;Server，客户端&#x2F;服务器模式）</p><ul><li>QQ，360，idea，浏览器等都是C&#x2F;S架构</li><li>弊端：必须下载安装才能使用，更新需要重新安装</li><li>优点：界面效果更好，更方便将数据缓存在本地</li></ul></li><li><p>B&#x2F;S架构（Browser&#x2F;Server，浏览器&#x2F;服务器模式）</p><ul><li>京东、淘宝等都是B&#x2F;S架构</li><li>优点: 无需安装，只要有浏览器随时随地可以打开，更新用户可以实时看到</li><li>缺点：数据缓存没有cs方便</li></ul><p><strong>现在java开发更多的是B&#x2F;S架构结构的程序。</strong></p></li></ul><h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><ul><li>结构标准：HTML，负责页面的内容结构  – 人体</li><li>样式标准：CSS，负责页面的美化 – 给人化妆</li><li>行为标准：JavaScript，负责页面的交互 – 给人进行交互</li></ul><h2 id="HTML是什么"><a href="#HTML是什么" class="headerlink" title="HTML是什么"></a>HTML是什么</h2><p>HTML（Hyper Text Markup Language-EndFragment）: <strong>超文本标记语言</strong></p><p>文本：只能是字符串内容</p><p><strong>超文本：</strong> <strong>不仅仅是文本，还可以是音频、视频、图片</strong></p><p><strong>标记语言：</strong>就是使用标签来表示语义，html中的标签都是内置好的，表达什么语义就使用什么标签</p><p>超文本也是文本，所以使用所有的文本软件都可以打开和编辑。那么音频、视频、图片用文本是怎么打开的呢？？？</p><p>注意：音频、视频、图片并不是真的将音频、视频、图片的数据添加进文本，而是<strong>使用表示音频、视频、图片的语义标签来引入音频、视频、图片的地址。</strong></p><p><strong>所以学习HTML就是学习它的语义标签。</strong></p><p><strong>html文件的扩展名是：<code>.html</code>或者<code>.htm</code></strong></p><h2 id="HTML骨架"><a href="#HTML骨架" class="headerlink" title="HTML骨架"></a>HTML骨架</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- !DOCTYPE html HTML5的文档声明 --></span><span class="token comment">&lt;!--  html 只能有且只有一个根标签html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    head是html页面的头   head是双标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  meta 元数据标签   meta单标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 页面的关键字信息： 这是给搜索引擎使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java,c,php<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>动力节点专业IT培训机构,一家只教java的培训机构<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 页面的标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>百度一下，以后啥也不知道<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    身体：主体部分   页面的内容就编写在该标签中 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  你干啥呢<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- !DOCTYPE html HTML5的文档声明 --></span><span class="token comment">&lt;!--  html 只能有且只有一个根标签html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    head是html页面的头   head是双标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  meta 元数据标签   meta单标签 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 页面的关键字信息： 这是给搜索引擎使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java,c,php<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>动力节点专业IT培训机构,一家只教java的培训机构<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 页面的标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>百度一下，以后啥也不知道<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    身体：主体部分   页面的内容就编写在该标签中      bgcolor 背景颜色属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skyblue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  你干啥呢<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="br和hr标签"><a href="#br和hr标签" class="headerlink" title="br和hr标签"></a>br和hr标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>br和hr标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    在html表达什么意思需要使用标签   br 换行标签 --></span>床前明月光，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>疑是地上霜。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>举头望明月，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>低头思故乡。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!-- hr标签表示水平线 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="h1到h6的标题标签"><a href="#h1到h6的标题标签" class="headerlink" title="h1到h6的标题标签"></a>h1到h6的标题标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>h1到h6的标题标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--     h1到h6的标题标签 是body中内容的标题标签文字大小和粗体是样式负责的，属于css的范畴。但是h1到h6的标题标签自带默认样式，但是这些自带的样式都可以被css修改所以h1到h6的标题标签的主要重要是标签的语义表示的权重不一样h1的权重最大；h6的权重最小权重是给搜索引擎使用的。一个页面最多一个h1标签，网站的logo需要使用h1 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>标题2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>标题3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>标题4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>标题5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>标题6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="p段落标签和pre标签"><a href="#p段落标签和pre标签" class="headerlink" title="p段落标签和pre标签"></a>p段落标签和pre标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>p段落标签和pre标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    p标签是段落标签，段落是英文格式的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>党的十八大以来，以习近平同志为核心的党中央，先后部署开展了党的群众路线教育实践活动、“三严三实”专题教育、“两学一做”学习教育、“不忘初心、牢记使命”主题教育、党史学习教育等5次党内集中学习教育，频度之密、力度之大、成效之显著，放眼百年党史都不多见。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>习近平总书记指出：“党的十八大以来，我们先后开展一系列集中学习教育，一个重要目的就是教育引导全党牢记中国共产党是什么、要干什么这个根本问题，始终保持党同人民的血肉联系。”<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span><span class="token comment">&lt;!--    pre 是预格式标签，保留内容中的空格、换行等符号 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>public static void main(String[] args)&#123;   System.out.println(1234); &#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="格式标签"><a href="#格式标签" class="headerlink" title="格式标签"></a>格式标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>格式标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   b标签是文字粗体标签，但是文字粗体根据web标准是属于css的范畴  所以文字粗体应该由css来控制。  所以在开发中b标签用来作为css的钩子使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   i标签是文字斜体标签，但是文字斜体根据web标准是属于css的范畴  所以文字斜体应该由css来控制。  所以在开发中i标签用来作为css的钩子使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   u标签是文字下划线标签，但是文字下划线根据web标准是属于css的范畴  所以文字下划线应该由css来控制。  所以在开发中u标签用来作为css的钩子使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  strong也是粗体标签，但是比b的权重更大，语义的主要作用是表示强调 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  em也是斜体标签，但是比i的权重更大，语义的主要作用是表示强调 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    del表示删除线，同样css可以控制 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>我爱你，中国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    sup 标签：定义上标文本。 --></span><span class="token comment">&lt;!-- (a-b)²=a²-2ab+b² --></span>(a-b)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>=a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>-2ab+b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    sub 标签：定义下标文本。 --></span>log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="img图像标签"><a href="#img图像标签" class="headerlink" title="img图像标签"></a>img图像标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>img图像标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    img 图片标签   src属性表示图片的地址      html中的资源的路径分为：   绝对路径：就是路径本身就能定位到资源【一般开发中都用的绝对路径】     常见的绝对路径是： 文件系统的根路径开头、网络协议开头的地址 &lt;img src="D:\mm.gif" >   相对路径：就是路径本身无法定位资源，必须借助参照路径以点开头的路径：./【当前路径】 ../【上一级路径】   参照路径：当前页面的路径      绝对路径 = 参照路径 + 相对路径   参照路径: D:/course/03_Web/HTML/code/HtmlDemo/html/   相对路径: mv.webp   绝对路径: D:/course/03_Web/HTML/code/HtmlDemo/image/mm01.webp      注意： 相对路径要求在同一个项目中的资源才能使用      开发中需要使用相对路径   --></span>   <span class="token comment">&lt;!--      width="300px"  表示图片宽度为300像素 宽度和高度设置一个即可，另一个会按照比例缩放 width="50%" 表示图片宽度是页面宽度的50%  title属性是鼠标停留在图片上显示的文字信息 alt属性是图片加载失败后显示的信息 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../mvxx.webp<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>这是哪个美女<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>美女图片<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../image/mm01.webp<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="a超链接标签"><a href="#a超链接标签" class="headerlink" title="a超链接标签"></a>a超链接标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>a超链接标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    a标签表示超链接   href属性就是超链接需要链接的地址      target 表示超链接打开的方式   target="_self" 表示在当前标签页打开   target="_blank" 表示在一个新的空白标签页中打开 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.126.com<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>126<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 这里的#仅仅是占位的，超链接点击后还是在当前页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用a标签完成锚点功能"><a href="#使用a标签完成锚点功能" class="headerlink" title="使用a标签完成锚点功能"></a>使用a标签完成锚点功能</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>使用a标签完成锚点功能<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    给标签设置id,然后在a标签中使用#id就可以跳转到指定id的位置   这就是锚点功能 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到段落1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳转到段落2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="span标签和div标签"><a href="#span标签和div标签" class="headerlink" title="span标签和div标签"></a>span标签和div标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>span标签和div标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>我爱你，祖国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   文本内容使用span标签后，视觉效果没有任何的变化  span在这里仅仅是一个文本标签，主要是用来充当css的钩子 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我爱你，祖国<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    div标签的作用是将整个页面分区   分区的作用是为了给不同的区域做不同的美化效果 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>列表标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    html中的列表分为有序列表、无序列表、定义列表   有序列表：ordered list 简写为 ol标签   无序列表：unordered list 简写为 ul标签   列表项： list item 简写为 li标签 --></span> <span class="token comment">&lt;!--   type="1" 表示列表编号类型是数字类型  --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span> <span class="token comment">&lt;!--   type="square" 表示列表项的符号是方块  --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">></span></span> <span class="token comment">&lt;!--     定义列表： definition list 简写为dl标签定义列表由dl dt dd 组成dt  definition titledd  definition data 一个dl可以有多个dt 一个dt可以有多个dd  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>四川省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>成都市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>绵阳市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>自贡市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>云南省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>昆明市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>玉溪市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>昭通市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="table表格标签"><a href="#table表格标签" class="headerlink" title="table表格标签"></a>table表格标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>table表格标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    table标签表示表格   表格的行 table row 简写成 tr标签   表头  table head 简写成 th标签   表格的数据   table data 简写成 td标签 --></span> <span class="token comment">&lt;!--   border="1px" 表示表格和单元格边框线为1px  width 表格的宽度  cellspacing="0px" 设置单元格的外边距为0px  cellpadding="0px" 设置单元格的内边距为0px  align="center" 设置对齐方式为水平居中对齐  --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>学号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>zhangsan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>lisi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1003<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>wangwu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格合并行和列"><a href="#表格合并行和列" class="headerlink" title="表格合并行和列"></a>表格合并行和列</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>合并行和列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    html页面默认是从上到下，从左到右显示的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  rowspan="2" 表示合并两行，也就是该单元格占据两行的位置 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   colspan="2" 表示合并2列，也就是该单元格占据两列的空间 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>表单标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    form表示表示表单标签   表单的作用就是用来收集用户信息，然后将信息提交到指定路径   action="" 该属性就是提交信息的路径地址   method="get" 表示数据提交的方式是 get/post --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    for="标签的id号"，此时点击该标签就会关联到id对应的元素上 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--     type="text" 表示类型是明文的文本placeholder="请输入账号" 占位符，也就是没有输入内容的时候显示的信息   name属性是提交数据到指定路径时的参数名称   比如之前我们学习的jdbc的url    jdbc:mysql:///db01?username=root&amp;password=123456这里的username和password就是参数名称，也就是这里name属性的值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入账号<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwdId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwdId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>电话：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>生日：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>性别：<span class="token comment">&lt;!--  type="radio" 表示单选按钮，单选按钮必须互斥  checked="checked" 表示被选中了，如果属性名和属性值一样，可以只写属性名file 文件上传，文件上传的时候需要，表单中有个文件上传的控件（出现只有文件上传的时候，才会出现）reset 重置表单内容。h5 提供的内容：email 邮箱 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>头像：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userimg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>爱好：<span class="token comment">&lt;!--    type="checkbox" 表示是复选框，多选按钮（让多选按钮为一组，name值必须相同） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>抽烟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>喝酒<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>烫头<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--select 下拉选，name属性必须要提供，表示提交给后台的数据。option是子标签。value属性是提交给后台的数据值，如果不给则提交的是option标签体的内容。multiple属性，表示支持多选size 可见的长度大小--></span>地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>province<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>四川省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>云南省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>贵州省<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>成都市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>宜宾市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>昆明市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>area<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>锦江区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>武侯区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>青羊区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>备注：<span class="token comment">&lt;!--   textarea 文本域，特点是内容可以换行 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--     submit和reset类型的按钮，自带监听，也就说不需要使用js就可以点击交互submit点击后默认行为就是提交数据reset点击后默认行为就是清空数据button类型的按钮必须配合js才能交互value的值默认是on，需要我们重置value，因为不重置，后台无法区分提交来的数据是男还是女，必须要给value属性重新赋值（一般都是用0和1来表示）hidden 隐藏域，把需要提交给后台且不需要显示出来的属性，使用隐藏域，隐藏起来。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    &lt;button>注册2&lt;/button> 默认的类型是submit --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="框架和实体字符"><a href="#框架和实体字符" class="headerlink" title="框架和实体字符"></a>框架和实体字符</h2><h3 id="frameset框架集"><a href="#frameset框架集" class="headerlink" title="frameset框架集"></a>frameset框架集</h3><p>frameset标签可定义一个框架集，在同一个浏览器窗口中被用来组织多个窗口（框架），每个窗口（框架）存有独立的HTML文档。<strong>在使用frameset时，不可以同时存在body标签，它和body标签是同级的。</strong></p><p>在HTML5当中，为了推进新的web前端开发模式，frameset布局将不再被推荐，但是使用它做为企业后台界面开发的还是非常多。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>框架集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    frameset不能和body同时存在   noresize="noresize" 不允许改变大小 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10%,*<span class="token punctuation">"</span></span> <span class="token attr-name">noresize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noresize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top.html<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frameset</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20%,*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left.html<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>frame</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>frameset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>top.html:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>动力学生管理系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>left.html:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  target="frame的name"  表示页面在指定的frame中打开 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentManagment.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学员管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10-列表标签.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成绩管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>13-表单标签.html<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>班级管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内联框架-iframe"><a href="#内联框架-iframe" class="headerlink" title="内联框架-iframe"></a>内联框架-iframe</h3><p>iframe元素会创建包含另外一个文档的内联框架（即行内框架），用于一个网页中局域显示另外网页。<br>iframe是属于内联框架，它是body的子级，和body是父子关系。<br>iframe作为一个普通元素放在body里，而frameset是代替了body元素。<br>scrolling&#x3D;”yes&#x2F;no” 规定是否在框架中显示滚动条。</p><p>iframe标签属性：</p><ol><li><p>width 可设置内联框架的宽</p></li><li><p>height 可设置内联框架的高</p></li><li><p>name 设置框架名称</p></li><li><p>src 设置页面的路径</p></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>内联框架-iframe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10-列表标签.html<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10-列表标签.html<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40%<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h3><p>HTML 中的预留字符必须被替换为字符实体，在 HTML 中，某些字符是预留的。</p><p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>实体字符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>我们今天学习了<span class="token entity named-entity" title="&lt;">&amp;lt;</span>p<span class="token entity named-entity" title="&gt;">&amp;gt;</span>标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>你<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h1>]]></content>
      
      
      
        <tags>
            
            <tag> HTML学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习笔记</title>
      <link href="/2022/08/21/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/08/21/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><center>JDBC学习笔记</center><hr><h2 id="JDBC【8-21】"><a href="#JDBC【8-21】" class="headerlink" title="JDBC【8.21】"></a>JDBC【8.21】</h2><h3 id="JDBC是什么？"><a href="#JDBC是什么？" class="headerlink" title="JDBC是什么？"></a>JDBC是什么？</h3><ul><li>Java DataBase Connectivity（Java语言连接数据库）</li><li>也就是JDBC是java提供的操作数据库的接口（规范）。</li></ul><p><img src="/images/JDBC_images/JDBC%E4%BB%8B%E7%BB%8D.png"></p><hr><h3 id="JDBC的本质是什么？"><a href="#JDBC的本质是什么？" class="headerlink" title="JDBC的本质是什么？"></a>JDBC的本质是什么？</h3><ul><li><strong>JDBC是SUN公司制定的一套接口（interface）</strong></li><li>java.sql.*; （这个软件包下有很多接口）</li><li>接口都有调用者和实现者。</li><li>面向接口调用、面向接口写实现类，这都属于面向接口编程。</li></ul><hr><h3 id="为什么要面向接口编程？"><a href="#为什么要面向接口编程？" class="headerlink" title="为什么要面向接口编程？"></a>为什么要面向接口编程？</h3><ul><li><p>解耦合：降低程序的耦合度，提高程序的扩展力。</p></li><li><p>多态机制就是非常典型的：面向抽象编程。（不要面向具体编程）</p></li><li><p>建议：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//喂养的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 面向父类型编程。</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="思考：为什么SUN制定一套JDBC接口呢？"><a href="#思考：为什么SUN制定一套JDBC接口呢？" class="headerlink" title="思考：为什么SUN制定一套JDBC接口呢？"></a>思考：为什么SUN制定一套JDBC接口呢？</h3><ul><li><strong>因为每一个数据库的底层实现原理都不一样。</strong></li></ul><p>​        Oracle数据库有自己的原理。</p><p>​        MySQL数据库也有自己的原理。</p><p>​        MS SqlServer数据库也有自己的原理。</p><p>​        。。。</p><p>​        每一个数据库产品都有自己独特的实现原理。</p><p><img src="/images/JDBC_images/JDBC%E6%9C%AC%E8%B4%A8%E7%9A%84%E7%90%86%E8%A7%A3.png"></p><hr><h3 id="JDBC-的原理"><a href="#JDBC-的原理" class="headerlink" title="JDBC 的原理"></a>JDBC 的原理</h3><ul><li>早期SUN公司的天才们想编写一套可以连接天下所有数据库的API，但是当他们刚刚开始时就发现这是不可完成的任务，因为各个厂商的数据库服务器差异太大了。后来SUN开始与数据库厂商们讨论，最终得出的结论是，由SUN提供一套访问数据库的规范（就是一组接口），并提供连接数据库的协议标准，然后各个数据库厂商会遵循SUN的规范提供一套访问自己公司的数据库服务器的API出现。SUN提供的规范命名为JDBC，而各个厂商提供的，遵循了JDBC规范的，可以访问自己数据库的API被称之为驱动！</li></ul><hr><h3 id="程序员，JDBC，JDBC驱动的关系"><a href="#程序员，JDBC，JDBC驱动的关系" class="headerlink" title="程序员，JDBC，JDBC驱动的关系"></a>程序员，JDBC，JDBC驱动的关系</h3><ul><li><p>三方关系</p></li><li><p>SUN公司是规范制定者，制定了规范JDBC（连接数据库规范）</p><p>数据库厂商微软、甲骨文等分别提供实现JDBC接口的驱动jar包</p><p>程序员学习JDBC规范来应用这些jar包里的类。</p><p><img src="/images/JDBC_images/%E4%B8%89%E6%96%B9%E5%85%B3%E7%B3%BB.png" alt="三方关系"></p></li><li><p><strong>总结：</strong></p><p><strong>–&gt; 简单地说，JDBC 可做三件事：与数据库建立连接、发送指令操作数据库并处理结果。</strong></p><p><img src="/images/JDBC_images/%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AE%9E%E7%8E%B0%E7%B1%BB01.png"></p></li></ul><p><img src="/images/JDBC_images/%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AE%9E%E7%8E%B0%E7%B1%BB02.png"></p><hr><h3 id="JDBC操作数据库的步骤"><a href="#JDBC操作数据库的步骤" class="headerlink" title="JDBC操作数据库的步骤"></a>JDBC操作数据库的步骤</h3><h4 id="口诀：加连欲执释"><a href="#口诀：加连欲执释" class="headerlink" title="口诀：加连欲执释"></a><strong>口诀：加连欲执释</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** JDBC操作数据库的步骤： 必须掌握*  贾： 加载驱动*  琏： 获取数据库连接*  欲： 获取语句对象*  执： 执行语句*  事： 释放资源** 注意：操作数据库之前需要添加驱动jar包*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总体步骤</strong></p><ol><li><p><strong>官网下载驱动包</strong></p></li><li><p><strong>加载一个Driver驱动</strong></p><ul><li><p><strong>加载JDBC驱动是通过调用方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/JDBC_images/%E5%8A%A0%E8%BD%BD%E9%A9%B1%E5%8A%A8.png"></p></li><li><p><strong>注意，如果你的mysql版本是8或者以上的话，那么driver的写法需要改写成：com.mysql.cj.jdbc.Driver</strong></p></li></ul></li><li><p><strong>创建数据库连接（Connection）</strong></p><ul><li><p><strong>与数据库建立连接的方法是调用</strong> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> password <span class="token punctuation">)</span>     <span class="token comment">//eg:</span><span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> url<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/bjpowernode?charsetUnicode=UTF8&amp;serverTimezone=UTC"</span><span class="token punctuation">;</span><span class="token class-name">String</span> user<span class="token operator">=</span>“root"<span class="token punctuation">;</span><span class="token class-name">String</span> password<span class="token operator">=</span>“root"<span class="token punctuation">;</span>conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>创建SQL命令发送器Statement</strong></p><ul><li><p>Statement对象用于将 SQL 语句发送到数据库中，或者理解为执行sql语句</p><p><strong>有三种 Statement对象：</strong></p><ul><li><p>Statement：用于执行不带参数的简单SQL语句；</p></li><li><p><em><strong>*PreparedStatement（从 Statement 继承）：用于执行带或不带参数的预编译SQL语句；*</strong></em></p></li><li><p>CallableStatement（从PreparedStatement 继承）：用于执行数据库存储过程的调用。</p><p><img src="/images/JDBC_images/execute.png"></p></li></ul></li></ul></li><li><p><strong>创建SQL</strong></p></li><li><p><strong>通过Statement发送SQL命令并得到结果</strong></p><ul><li><p><strong>处理ResultSet结果</strong></p><ul><li><p>ResultSet对象是executeQuery()方法的返回值，它被称为结果集，它代表符合SQL语句条件的所有行，并且它通过一套getXXX方法（这些get方法可以访问当前行中的不同列）提供了对这些行中数据的访问。</p></li><li><p>ResultSet里的数据一行一行排列，每行有多个字段，且有一个记录指针，指针所指的数据行叫做当前数据行，我们只能来操作当前的数据行。我们如果想要取得某一条记录，就要使用ResultSet的next()方法 ,如果我们想要得到ResultSet里的所有记录，就应该使用while循环。</p></li><li><p>ResultSet对象自动维护指向当前数据行的游标。每调用一次next()方法，游标向下移动一行。 </p></li><li><p>初始状态下记录指针指向第一条记录的前面，通过next()方法指向第一条记录。循环完毕后指向最后一条记录的后面。</p><p><img src="/images/JDBC_images/ResultSet.png"></p></li></ul></li></ul></li><li><p><strong>处理SQL结果（select语句）</strong></p></li><li><p><strong>关闭数据库资源</strong></p><ul><li><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>ResultSet</strong></p></li><li><p><strong>Statement</strong></p></li><li><p><strong>Connection</strong></p></li><li><p><strong>用户不必关闭ResultSet。当它的 Statement 关闭、重新执行或用于从多结果序列中获取下一个结果时，该ResultSet将被自动关闭。</strong></p></li><li><p><strong>注意：要按先ResultSet结果集，后Statement，最后Connection的顺序关闭资源，因为Statement和ResultSet是需要连接是才可以使用的，所以在使用结束之后有可能其他的Statement还需要连接，所以不能先关闭Connection。</strong></p></li></ul></li></ol><hr><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="创建数据库及数据表"><a href="#创建数据库及数据表" class="headerlink" title="创建数据库及数据表"></a>创建数据库及数据表</h4><ul><li>在navicat Premium 15或者dos窗口中创建一个自己的数据库</li><li>在创建的数据库中创建自己的数据表</li></ul><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><ul><li>在idea中新建一个自己的项目</li></ul><h4 id="创建lib目录并引入MySQL驱动包"><a href="#创建lib目录并引入MySQL驱动包" class="headerlink" title="创建lib目录并引入MySQL驱动包"></a>创建lib目录并引入MySQL驱动包</h4><ul><li><p><strong>在项目下新建一个lib目录  –&gt;  与src同级</strong></p></li><li><p>在目录中引入MySQL驱动包</p></li><li><p><strong>在把lib包引入项目环境中  –&gt; 选中 jar 包  –&gt;  右击  –&gt;  add library</strong></p><p><img src="/.io//powernode\Notes\JDBC_images\添加jar包.png"></p></li></ul><hr><h3 id="使用JDBC完成数据的添加操作"><a href="#使用JDBC完成数据的添加操作" class="headerlink" title="使用JDBC完成数据的添加操作"></a>使用JDBC完成数据的添加操作</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>加载MySQL的JDBC驱动</li><li>建立数据的连接</li><li>创建SQL命令的发送器</li><li>编写SQL</li><li>使用SQL命令发送器发送SQL命令并得到结果</li><li>处理结果</li><li>关闭数据库资源</li></ol><h4 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.abc.jdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;public class Test01Add &#123;    &#x2F;&#x2F; 驱动器路径    private static final String DRIVER &#x3D; &quot;com.mysql.jdbc.Driver&quot;;    &#x2F;&#x2F;连接数据库地址    private static final String URL &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;whpowernode?useUnicode&#x3D;true&amp;useSSL&#x3D;false&amp;characterEncoding&#x3D;UTF8&quot;;    &#x2F;&#x2F;数据库用户名    private static final String USER_NAME &#x3D; &quot;root&quot;;    &#x2F;&#x2F;数据库密码    private static final String USER_PASSWORD &#x3D; &quot;123456&quot;;        public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;        &#x2F;&#x2F; 加载JDBC访问Oracle的驱动        Class.forName(DRIVER);        &#x2F;&#x2F; 建立和数据库的连接        Connection conn &#x3D; DriverManager.getConnection(URL, USER_NAME, USER_PASSWORD);        &#x2F;&#x2F; 创建SQL命令发送器        Statement stmt &#x3D; conn.createStatement();        &#x2F;&#x2F; 使用SQL命令发送器发送SQL命令并得到结果        String sql &#x3D; &quot;insert into student values(1,&#39;小刚&#39;,32,&#39;男&#39;,&#39;湖北省武汉市&#39;)&quot;;        int n &#x3D; stmt.executeUpdate(sql);        &#x2F;&#x2F; 处理结果        if (n &gt; 0) &#123;            System.out.println(&quot;添加成功&quot;);        &#125; else &#123;            System.out.println(&quot;添加失败&quot;);        &#125;        &#x2F;&#x2F; 关闭数据库资源        stmt.close();        conn.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解决jdbc传入数据库时中文乱码问题"><a href="#解决jdbc传入数据库时中文乱码问题" class="headerlink" title="解决jdbc传入数据库时中文乱码问题"></a>解决jdbc传入数据库时中文乱码问题</h4><p><img src="/images/JDBC_images/%E8%A7%A3%E5%86%B3%E4%BC%A0%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98.png"></p><ul><li><p>在java语句connect中添加字符编码集： </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///bjpowernode?useUnicode=true&amp;characterEncoding=UTF-8"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="URL详解"><a href="#URL详解" class="headerlink" title="URL详解"></a>URL详解</h4><ul><li><p>为什么要定义URL</p><ul><li>Java和MySQL是厂商的，Java程序和MySQL数据库此时不在同一个进程下，此时Java程序需要向MySQL发送请求。</li></ul></li><li><p>如何发送请求</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;whpowernode?useUnicode&#x3D;true&amp;useSSL&#x3D;false&amp;characterEncoding&#x3D;UTF8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用URL的方式发送</p><p>jdbc 主协议</p><p>mysql 子协议</p><p>localhost MySQL服务器的地址，如果服务器就是我自己的主机，那么定义localhost就可以了</p><p>3306 MySQL服务器的端口号</p><p>whpowernode MySQL数据库服务器的数据库名称</p><p>useUnicode&#x3D;true  Java和MySQL交互使用Unicode编码</p><p>useSSL&#x3D;false Java和MySQL交互不使用安全层协议</p><p>characterEncoding&#x3D;UTF8 Java和MySQL交互的编码方式为UTF8  <em><strong>*【如果不设置会有乱码的】*</strong></em></p></li></ul><hr><h3 id="一个URL由哪些部分组成"><a href="#一个URL由哪些部分组成" class="headerlink" title="一个URL由哪些部分组成"></a>一个URL由哪些部分组成</h3><p> 协议:&#x2F;&#x2F;服务器主机:端口&#x2F;服务器路径？查询参数</p><p>协议 jdbc:mysql:</p><p>服务器主机 localhost</p><p>端口 3306</p><p>服务器路径 whpowernode</p><p>参数useUnicode&#x3D;true&amp;useSSL&#x3D;false&amp;characterEncoding&#x3D;UTF8</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*           * jbdc中数据库url的格式：           *     jdbc:子协议://host:port/database           *  MySQL的url格式：           *     jdbc:mysql://host:port/database           *           * jdbc:mysql://localhost:3306/db01           * 如果url的host:port是localhost:3306，那么可以省略不写           * jdbc:mysql:///db01           */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="使用JDBC完成更新和删除操作"><a href="#使用JDBC完成更新和删除操作" class="headerlink" title="使用JDBC完成更新和删除操作"></a>使用JDBC完成更新和删除操作</h3><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><ul><li><p>代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.abc.jdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;public class Test02Update &#123;    &#x2F;&#x2F; 驱动器路径    private static final String DRIVER &#x3D; &quot;com.mysql.jdbc.Driver&quot;;    &#x2F;&#x2F;连接数据库地址    private static final String URL &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;whpowernode?useUnicode&#x3D;true&amp;useSSL&#x3D;false&amp;characterEncoding&#x3D;UTF8&quot;;    &#x2F;&#x2F;数据库用户名    private static final String USER_NAME &#x3D; &quot;root&quot;;    &#x2F;&#x2F;数据库密码    private static final String USER_PASSWORD &#x3D; &quot;123456&quot;;    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;        &#x2F;&#x2F; 加载Oracle的JDBC驱动        Class.forName(DRIVER);        &#x2F;&#x2F; 建立数据的连接        Connection conn&#x3D;DriverManager.getConnection(URL, USER_NAME, USER_PASSWORD);        &#x2F;&#x2F; 创建SQL命令的发送器        Statement stat&#x3D;conn.createStatement();        &#x2F;&#x2F; 编写SQL        String sql&#x3D;&quot;update student set name&#x3D;&#39;小明&#39;,age&#x3D;23,sex&#x3D;&#39;女&#39;,address&#x3D;&#39;武汉&#39; where id&#x3D;1&quot;;        &#x2F;&#x2F; 使用SQL命令发送器发送SQL命令并得到结果        int res&#x3D;stat.executeUpdate(sql);        &#x2F;&#x2F; 处理结果        if(res&gt;0)&#123;            System.out.println(&quot;修改成功&quot;);        &#125;        else&#123;            System.out.println(&quot;处理失败&quot;);        &#125;        &#x2F;&#x2F; 关闭数据库资源        stat.close();        conn.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><ul><li><p>代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.abc.jdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;public class Test03Delete &#123;    &#x2F;&#x2F; 驱动器路径    private static final String DRIVER &#x3D; &quot;com.mysql.jdbc.Driver&quot;;    &#x2F;&#x2F;连接数据库地址    private static final String URL &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;whpowernode?useUnicode&#x3D;true&amp;useSSL&#x3D;false&amp;characterEncoding&#x3D;UTF8&quot;;    &#x2F;&#x2F;数据库用户名    private static final String USER_NAME &#x3D; &quot;root&quot;;    &#x2F;&#x2F;数据库密码    private static final String USER_PASSWORD &#x3D; &quot;123456&quot;;    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;        &#x2F;&#x2F; 加载Oracle的JDBC驱动        Class.forName(DRIVER);        &#x2F;&#x2F; 建立数据的连接        Connection conn&#x3D;DriverManager.getConnection(URL, USER_NAME, USER_PASSWORD);        &#x2F;&#x2F; 创建SQL命令的发送器        Statement stat&#x3D;conn.createStatement();        &#x2F;&#x2F; 编写SQL        String sql&#x3D;&quot;delete from student where id&#x3D;1&quot;;        &#x2F;&#x2F; 使用SQL命令发送器发送SQL命令并得到结果        int res&#x3D;stat.executeUpdate(sql);        &#x2F;&#x2F; 处理结果        if(res&gt;0)&#123;            System.out.println(&quot;删除成功&quot;);        &#125;        else&#123;            System.out.println(&quot;删除失败&quot;);        &#125;        &#x2F;&#x2F; 关闭数据库资源        stat.close();        conn.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="DBUtils的简单封装"><a href="#DBUtils的简单封装" class="headerlink" title="DBUtils的简单封装"></a>DBUtils的简单封装</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li><p>我们为什么要封装，从以上代码可以看出，每一次写我们创建一个连接，创建一个发送SQL的对象，最后还要关闭，那么我们可以考虑把这重复的代码提取出来!</p></li><li><p>利用配置文件封装代码</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.powernode.utils;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Statement;import java.util.Properties;&#x2F;** * 工具类 *&#x2F;public class DBUtils &#123;    private static String driverClassName;    private static String dbUrl;    private static String dbUsername;    private static String dbPassword;    private DBUtils()&#123;&#125;    static &#123;        try &#123;            &#x2F;&#x2F; 加载配置文件            Properties prop &#x3D; new Properties();            prop.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;db.properties&quot;));            &#x2F;&#x2F;通过key获取value            driverClassName &#x3D; prop.getProperty(&quot;className&quot;);            dbUrl &#x3D; prop.getProperty(&quot;url&quot;);            dbUsername &#x3D; prop.getProperty(&quot;username&quot;);            dbPassword &#x3D; prop.getProperty(&quot;password&quot;);            &#x2F;&#x2F;加载驱动            Class.forName(driverClassName);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    &#x2F;**     * 获取数据库连接     * @return 返回连接对象     *&#x2F;    public static Connection getConnection() throws SQLException &#123;        return DriverManager.getConnection(dbUrl, dbUsername, dbPassword);    &#125;    &#x2F;**     * 释放资源     * @param closeables 资源     *&#x2F;    public static void close(AutoCloseable... closeables)&#123;        if(closeables !&#x3D; null)&#123;            try &#123;                for (AutoCloseable closeable : closeables) &#123;                    closeable.close();                &#125;            &#125; catch (Exception e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>db.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># JDBC\u56DB\u8981\u7D20</span><span class="token comment"># \u9A71\u52A8</span><span class="token attr-name">className</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment"># url</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql:///db01?rewriteBatchedStatements=true</span><span class="token comment"># \u7528\u6237\u540D</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token comment"># \u5BC6\u7801</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>url&#x3D;jdbc:mysql:&#x2F;&#x2F;&#x2F;db01?<strong>rewriteBatchedStatements&#x3D;true</strong> ：批处理要在配置文件中添加这一行</p></li><li><p>新建properties文件流程：</p><p><img src="/images/JDBC_images/properties%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE01.png"></p><p><img src="/images/JDBC_images/properties%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE02.png"></p><p><img src="/images/JDBC_images/properties%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E4%BD%8D%E7%BD%AE03.png"></p></li></ul></li></ul></li></ul><hr><h4 id="CRUD【增删查改】借用封装后的DBUtils工具类"><a href="#CRUD【增删查改】借用封装后的DBUtils工具类" class="headerlink" title="CRUD【增删查改】借用封装后的DBUtils工具类"></a>CRUD【增删查改】借用封装后的DBUtils工具类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DBUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * CRUD: 增删查改 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CRUDDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 贾琏</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 欲</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into db01.student values(0,1004,'java',20,'male','北京',default,default)"</span><span class="token punctuation">;</span>            <span class="token comment">// DML语句返回的是受影响的行数</span>            <span class="token keyword">int</span> rows <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 贾琏</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 欲</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"delete from student where sid = 1004"</span><span class="token punctuation">;</span>            <span class="token comment">// DML语句返回的是受影响的行数</span>            <span class="token keyword">int</span> rows <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 贾琏</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 欲</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update student set gender = 'female' where name = '李四'"</span><span class="token punctuation">;</span>            <span class="token comment">// DML语句返回的是受影响的行数</span>            <span class="token keyword">int</span> rows <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 贾琏</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 欲</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from student"</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 将表中的数据解析成对象</span>                <span class="token comment">//通过表字段名称获取其字段值 --> 与实体类的成员变量相对应</span>                <span class="token keyword">long</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> sid <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"sid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> age <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> gender <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> province <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"province"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> create_time <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"create_time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> update_time <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"update_time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 迭代表中一行数据，就对应一个实体对象</span>                <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>sid<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>province<span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">set_id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">setCreate_time</span><span class="token punctuation">(</span>create_time<span class="token punctuation">)</span><span class="token punctuation">;</span>                student<span class="token punctuation">.</span><span class="token function">setUpdate_time</span><span class="token punctuation">(</span>update_time<span class="token punctuation">)</span><span class="token punctuation">;</span>                students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 遍历集合</span>            students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span>statement<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Student.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token comment">/** * 学生实体类，对应student表中的数据 * * 和数据表中对应的实体类的属性的数据类型使用包装类 *  因为包装类默认值为null，基本数据类型默认值不为null */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> _id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sid<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> create_time<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> update_time<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sid<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">,</span> <span class="token class-name">String</span> province<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>province <span class="token operator">=</span> province<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> _id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set_id</span><span class="token punctuation">(</span><span class="token class-name">Long</span> _id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_id <span class="token operator">=</span> _id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProvince</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> province<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token class-name">String</span> province<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>province <span class="token operator">=</span> province<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCreate_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> create_time<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCreate_time</span><span class="token punctuation">(</span><span class="token class-name">String</span> create_time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>create_time <span class="token operator">=</span> create_time<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUpdate_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> update_time<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpdate_time</span><span class="token punctuation">(</span><span class="token class-name">String</span> update_time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>update_time <span class="token operator">=</span> update_time<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"_id="</span> <span class="token operator">+</span> _id <span class="token operator">+</span>                <span class="token string">", sid="</span> <span class="token operator">+</span> sid <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", gender='"</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", province='"</span> <span class="token operator">+</span> province <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", create_time="</span> <span class="token operator">+</span> create_time <span class="token operator">+</span>                <span class="token string">", update_time="</span> <span class="token operator">+</span> update_time <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="使用JDBC完成查询"><a href="#使用JDBC完成查询" class="headerlink" title="使用JDBC完成查询"></a>使用JDBC完成查询</h3><h4 id="查询前先循环向student表中插入20条数据"><a href="#查询前先循环向student表中插入20条数据" class="headerlink" title="查询前先循环向student表中插入20条数据"></a>查询前先循环向student表中插入20条数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>jdbc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DBUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01Add20</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建SQL命令发送器</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用SQL命令发送器发送SQL命令并得到结果</span>        <span class="token class-name">Random</span> random<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">20</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> id<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token operator">+</span>i<span class="token punctuation">;</span>            <span class="token keyword">int</span> age<span class="token operator">=</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sex<span class="token operator">=</span>random<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"男"</span><span class="token operator">:</span><span class="token string">"女"</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> address<span class="token operator">=</span><span class="token string">"武汉"</span><span class="token operator">+</span>i<span class="token punctuation">;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into student values("</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">",'"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"',"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">",'"</span><span class="token operator">+</span>sex<span class="token operator">+</span><span class="token string">"','"</span><span class="token operator">+</span>address<span class="token operator">+</span><span class="token string">"')"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 处理结果</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 关闭数据库资源</span>        <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JDBC查询"><a href="#JDBC查询" class="headerlink" title="JDBC查询"></a>JDBC查询</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package com.abc.jdbc;import com.abc.utils.DBUtils;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;public class Test04Query &#123;    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;        Connection conn &#x3D; DBUtils.getConn();        &#x2F;&#x2F; 创建SQL命令发送器        Statement stmt &#x3D; conn.createStatement();        &#x2F;&#x2F; 编写SQL        String sql&#x3D;&quot;select * from student&quot;;        &#x2F;&#x2F; 使用SQL命令发送器发送SQL命令并得到结果        ResultSet rs&#x3D;stmt.executeQuery(sql);        &#x2F;&#x2F; 处理结果        while(rs.next())&#123;            int id&#x3D;rs.getInt(1);            String name&#x3D;rs.getString(2);            int age&#x3D;rs.getInt(3);            String sex&#x3D;rs.getString(4);            String address&#x3D;rs.getString(5);            System.out.println(id+&quot;  &quot;+name+&quot;  &quot;+age+&quot;   &quot;+sex+&quot;   &quot;+address);        &#125;        &#x2F;&#x2F; 关闭数据库资源        DBUtils.close(rs);        DBUtils.close(stmt);        DBUtils.close(conn);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="使用JDBC完成分页查询"><a href="#使用JDBC完成分页查询" class="headerlink" title="使用JDBC完成分页查询"></a>使用JDBC完成分页查询</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DBUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Statement</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test05QueryForPage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建SQL命令发送器</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pageNum<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//页码</span>        <span class="token keyword">int</span> pageSize<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//每页显示的条数</span>        <span class="token comment">// 编写SQL</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select * from student limit "</span><span class="token operator">+</span><span class="token punctuation">(</span>pageNum<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>pageSize<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>pageSize<span class="token punctuation">;</span>        <span class="token comment">// 使用SQL命令发送器发送SQL命令并得到结果</span>        <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 处理结果</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> id<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> age<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sex<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> address<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>sex<span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 关闭数据库资源</span>        <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="JDBC常用接口详解（位于java-sql包下）"><a href="#JDBC常用接口详解（位于java-sql包下）" class="headerlink" title="JDBC常用接口详解（位于java.sql包下）"></a>JDBC常用接口详解（位于java.sql包下）</h3><ol><li><strong>Driver 接口：</strong><ul><li><strong>每个驱动程序类必须实现的接口。</strong>也就是说数据库厂商提供的驱动程序必须实现该接口。</li></ul></li><li><strong>DriverManager类：</strong><ul><li>驱动管理类。管理一组JDBC驱动程序的基本服务。</li></ul></li><li><strong>Connection接口：</strong><ul><li>与特定数据库的连接（会话）。在连接上下文中执行SQL语句并返回结果。</li></ul></li><li><strong>Statement接口：</strong><ul><li>用于执行静态SQL语句并返回它所生成结果的对象。</li></ul></li><li><strong>preparedStatement接口：</strong><ul><li>预编译的Statement对象，PreparedStatement是Statement的子接口，它允许数据库预编译sql语句(这些sql语句通常带有参数)，以后每次只改变sql命令的参数，避免数据库每次都需要编译sql语句，无需再传入sql语句。<br>只要为预编译的sql语句传入参数值即可。所以它比Statement多了如下方法：<br>void setXxx(int parameterIndex, Xxx value):该方法根据传入参数值的类型不同，需要使用不同的方法。传入的值根据索引传给sql语句中指定位置的参数。</li></ul></li><li><strong>ResultSet接口：</strong><ul><li><strong>表示数据库结果集的数据表</strong>，通常通过执行查询数据库的语句生成。</li><li>ResultSet 对象具有指向其当前数据行的光标。最初，光标被放置于第一行之前。</li><li>next 方法将光标移动到下一行：因为该方法在ResultSet 对象没有下一行时返回false，所以可以在while循环中使用它来迭代结果集。</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">Driver</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * JDBC操作数据库的步骤： 必须掌握 *  贾： 加载驱动 *  琏： 获取数据库连接 *  欲： 获取语句对象 *  执： 执行语句 *  事： 释放资源 * * 注意：操作数据库之前需要添加驱动jar包 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 贾： 加载驱动</span>            <span class="token comment">/*            * 通过查看Driver类的源码发现：            *  static &#123;                    try &#123;                        DriverManager.registerDriver(new Driver());                    &#125; catch (SQLException var1) &#123;                        throw new RuntimeException("Can't register driver!");                    &#125;                &#125;              Driver类中已经执行了DriverManager.registerDriver(new Driver());，所以我们没有必要             再编写DriverManager.registerDriver(new Driver()); 只需要调用Driver类中的即可。             * Driver中使用的是静态代码块，所以只需要加载Driver类即可。            */</span><span class="token comment">//            DriverManager.registerDriver(new Driver());</span>            <span class="token comment">/*            *  Class.forName("com.mysql.cj.jdbc.Driver");就会将"com.mysql.cj.jdbc.Driver"字节码加载进内存            * 所以Driver中使用的是静态代码块就会被执行。            *            * 注意：JDBC 4.0 Drivers 必须包括 META-INF/services/java.sql.Driver 文件。            * 此文件包含 java.sql.Driver 的 JDBC 驱动程序实现的名称。            * 应用程序不再需要使用 Class.forName() 显式地加载 JDBC 驱动程序。            */</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 琏： 获取数据库连接</span>            <span class="token comment">/*            * jbdc中数据库url的格式：            *     jdbc:子协议://host:port/database            *  MySQL的url格式：            *     jdbc:mysql://host:port/database            *            * jdbc:mysql://localhost:3306/db01            * 如果url的host:port是localhost:3306，那么可以省略不写            * jdbc:mysql:///db01            */</span>            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///db01"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 欲： 获取语句对象</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执： 执行语句</span>            <span class="token comment">/**             * DML语句使用：executeUpdate()             * DQL语句使用：executeQuery()             */</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select sid,name,age from student"</span><span class="token punctuation">;</span>            <span class="token comment">/*            * ResultSet表示数据库结果集的数据表，通常通过执行查询数据库的语句生成。            */</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 解析结果集数据</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">/*                * resultSet获取数据的时候都有两个重载的方法，分别是：                *    getXXX(int 投影字段的索引)                *      使用索引的弊端： 就是投影字段的顺序变化后就会出问题                *    getXXX(String 投影字段的名字) -- 推荐使用                *                */</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span>  throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 事： 释放资源，后用的先释放</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="SQL注入问题"><a href="#SQL注入问题" class="headerlink" title="SQL注入问题"></a>SQL注入问题</h3><ol><li><p><strong>SQL注入就是sql中接收的用户参数破坏了原有的sql语句。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from t_user where username &#x3D; &#39;xxx&#39; and password &#x3D; &#39;&#39; or &#39;1&#x3D;1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>上述代码就相当于是将 or 关键字也参加了sql语句的编译，where条件过滤的时候，先判断  and  条件，然后不管是否是真，当执行 or 时，结果都是真，就相当于破解了密码了。</li></ul></li><li><p>使用Statement操作动态SQL就会有sql注入的风险</p><ul><li><p><strong>为什么有sql注入的风险？</strong></p><p>–&gt; 因为接收的参数也参与sql语句的编译，所以参数中如果带有sql关键字，就可以破坏原有的sql语句。</p></li><li><p>解决思路：</p><p>–&gt; 先编译原有的sql，再使用参数，此时参数就不会参与到sql编译中，所以即使参数中出现了关键字，也只会当作普通参数使用了。</p></li></ul></li><li><p><strong>jdbc 中提供了Statement接口的子接口 PreparedStatement 来解决SQL注入问题。</strong></p><ul><li><p>PreparedStatement 接口：</p><p>表示预编译的SQL语句的对象</p><p><strong>SQL语句被预编译并存储再PreparedStatement 对象中。然后可以使用此对象多次高效地执行该语句。</strong></p></li></ul></li><li><p>实例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DBUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">//登录案例，演示动态SQL,也就是参数不固定</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> pwd <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * ? 表示占位符，也就是?处在sql语句编译后需要使用具体值替换            */</span>            <span class="token class-name">String</span> sql  <span class="token operator">=</span> <span class="token string">"select * from t_user where username = ? and password = ?"</span><span class="token punctuation">;</span>            <span class="token comment">// 预编译sql,并保存到PreparedStatement对象中</span>            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 预编译完成后，将？占位符的值替换成实际值</span>            <span class="token comment">/*            * setString(int parameterIndex, String x):            *   第一个参数： 表示?的索引位置，从1开始            *   第二个参数： 就是实际值            */</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * 因为 ps对象中存储了SQL语句，所以执行方法中不传入sql            */</span>            resultSet <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> username <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎"</span><span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"账号或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    *  存在SQL注入风险    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> pwd <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from t_user where username = '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"' and password = '"</span> <span class="token operator">+</span> pwd <span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> username <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎"</span><span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"账号或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span>statement<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h3 id="事务处理解决转帐问题"><a href="#事务处理解决转帐问题" class="headerlink" title="事务处理解决转帐问题"></a>事务处理解决转帐问题</h3><ul><li><p><strong>注意： 事务是通过Connection连接对象获取的</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DBUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token comment">/** * 事务： *   转账的案例： 张三给李四转账100元 * * 注意： 事务是通过Connection连接对象获取的 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 关闭事务的自动提交，事务通过手动提交</span>            connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开启事务</span>            <span class="token comment">// 张三的账户减少100元</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update account set money = money - ? where name = ? "</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果没有添加事务，此处发生异常，下面的代码也不会执行，则就会发生转账金额丢失，前后数据不一致的情况。</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>                         <span class="token comment">// 李四的账户增加100元</span>            sql <span class="token operator">=</span> <span class="token string">"update account set money = money + ? where name = ? "</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 手动提交事务</span>            connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 发生异常后，回滚事务</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="JDBC批处理"><a href="#JDBC批处理" class="headerlink" title="JDBC批处理"></a>JDBC批处理</h3><ul><li><strong>批处理： 批量执行多个DML语句</strong></li><li>url&#x3D;jdbc:mysql:&#x2F;&#x2F;&#x2F;db01?<strong>rewriteBatchedStatements&#x3D;true</strong> ：<strong>批处理需要用到要在配置文件中添加这一行</strong></li></ul><p><strong>使用批处理出入3000条数据</strong></p><ul><li><p><strong>注意： 插入3000条数据，只是数据不同，所以语句只需要写一个，只需要预编译一次，后面反复使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DBUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span><span class="token punctuation">;</span><span class="token comment">/** * 批处理： 批量执行多个DML语句 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        noUseBatch();</span>        <span class="token function">useBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 使用批处理插入3000条数据     *     * 注意： 插入3000条数据，只是数据不同，所以语句只需要写一个，只需要预编译一次，后面反复使用     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into account values (0,?,?)"</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"java"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加在批处理</span>            <span class="token punctuation">&#125;</span>            ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一次性执行批量数据</span>            connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 耗时：597</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 没有使用批处理插入3000条数据     *     * 注意： 插入3000条数据，只是数据不同，所以语句只需要写一个，只需要预编译一次，后面反复使用     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">noUseBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//这里的第一个参数为0的话必须要在mysql中将它设置为自动递增，否则报错</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into account values (0,?,?)"</span><span class="token punctuation">;</span>            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"java"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 耗时：2283</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DBUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>db.properties配置文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">className</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql:///db02?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true</span><span class="token attr-name">userName</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span><span class="token attr-name">password</span> <span class="token punctuation">=</span> <span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><hr><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><ol><li><p>连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。连接池是装有连接的容器，使用连接的话，可以从连接池中进行获取，使用完成之后将连接归还给连接池。</p></li><li><p><strong>DataSource 接口：</strong></p><ul><li><strong>java中提供的连接池接口。</strong></li><li>作为DriverManager 工具的替代项，DataSource 对象是获取连接的首选方法。</li></ul></li><li><p><strong>DataSource 接口由驱动程序供应商实现。</strong>共有三种类型的实现：</p><ul><li><strong>基本实现</strong> - 生成标准的Connection 对象</li><li><strong>连接池实现</strong> - 生成自动参与连接池的 Connection 对象。</li><li><strong>分布式事务实现</strong> - 生成一个Conneciton 对象，该对象可用于分布式事务，大多数情况下总是参与连接池。</li></ul></li><li><p><strong>Druid 德鲁伊连接池</strong></p><ul><li><p>为监控而生，内置强大的监控功能，监控特性不影响性能，功能强大，能防sql注入，内置Loging能诊断hack应用行为。</p></li><li><p><strong>在idea中使用Druid工厂要添加druid 的 jar 包。</strong></p><p><img src="/.io//powernode\Notes\JDBC_images\druid添加jar包.png"></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取连接池对象</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从连接池里获取连接对象s</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 以下的代码和之前操作一样</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>druid.properties配置文件<strong>【要根据druid官方的来配置，不能自己随意配置（key）】</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># driverClassName可配可不配，会自动根据url识别</span><span class="token attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql:///db02?rewriteBatchedStatements=true</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h4 id="DruidUtils封装"><a href="#DruidUtils封装" class="headerlink" title="DruidUtils封装"></a>DruidUtils封装</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cdpowernode<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token comment">/** * @Author 小白不白 * @Description: * @Version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义成员变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DruidUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token comment">//加载配置文件</span>        properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 创建连接池对象并从连接池中获取连接对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//线程池对象</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从线程池中获取连接对象</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 释放资源     * 注意传入的连接如果是从连接池中获取的，那么释放连接就是归还到连接池中     * @param closeables 资源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">AutoCloseable</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> closeables<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>closeables <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">AutoCloseable</span> closeable <span class="token operator">:</span> closeables<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    closeable<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="BaseDAO的封装【难点】"><a href="#BaseDAO的封装【难点】" class="headerlink" title="BaseDAO的封装【难点】"></a>BaseDAO的封装【难点】</h3><ol><li><p><strong>DAO: Data Access Object 数据访问对象，DAO 就是用来操作数据库的。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">DruidUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * DAO: Data Access Object 数据访问对象 * 也就是说DAO 就是用来操作数据库的 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseDao</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * DML语句操作     *     * @param sql  DML语句     * @param args 参数     * @return 返回受影响的行数     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection <span class="token operator">=</span> <span class="token class-name">DruidUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                statement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DruidUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * DQL语句     *     * @param cls  封装的实体类     * @param sql  sql语句     * @param args 参数     * @param &lt;T>  实体类泛型     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> cls<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            connection <span class="token operator">=</span> <span class="token class-name">DruidUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                statement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*             *  Java实体类和表中的数据是对应的，所以一般实体类的成员变量名称和字段的名称是对应的。             * 所以我们可以通过表字段的名称 使用反射的技术 获取到实体类的成员变量。             *             * resultSet对象中就是查询的结果集数据，所以可以通过resultSet获取字段数据             *             * 注意： 使用以下的方法前提条件是：             *   实体类的成员变量的数据类型要和表中字段的数据类型匹配。             *   表中字段的数据类型是无符号的int，实体类中需要使用Long             */</span>            <span class="token comment">// 获取元数据对象</span>            <span class="token class-name">ResultSetMetaData</span> metaData <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取投影字段的数量</span>            <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// while循环一次获取到一行数据</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">T</span> obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 获取表投影字段的名称</span><span class="token comment">//                String columnName = metaData.getColumnName(i);</span>                    <span class="token comment">/*                       getColumnLabel(): 如果字段没有别名就获取字段名称；如果有别名就获取别名                       可以通过别名的方式解决实体类的成员变量和表字段名称不相同的问题                     */</span>                    <span class="token class-name">String</span> columnName <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 通过表字段的名称 使用反射的技术 获取到实体类的成员变量</span>                    <span class="token class-name">Field</span> declaredField <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 给对象的字段赋值</span>                    declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Object</span> value <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">DruidUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> statement<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 分页查询     * @param cls 封装的实体类     * @param sql DQL语句     * @param page 第几页     * @param limitNum 每页显示的数量     * @param &lt;T> 实体类     * @return PageInfo对象     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> cls<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> limitNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> skip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//(第几页 -1) * 每页显示的数据条数</span>        skip <span class="token operator">=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> limitNum<span class="token punctuation">;</span>        <span class="token comment">//这里的拼接一定要注意空格</span>        <span class="token class-name">String</span> pageSql <span class="token operator">=</span> sql <span class="token operator">+</span> <span class="token string">" limit  "</span> <span class="token operator">+</span> skip <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> limitNum<span class="token punctuation">;</span>        <span class="token comment">// 查询得到指定页的数据</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> pageSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询总数据条数</span>        <span class="token class-name">Long</span> count <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pageInfo<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        pageInfo<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pageInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查询总数据条数     *     * @param sql     * @return     */</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*             *  这是一个子查询             *   sql = select * from student;             *   countSql =  select count(1) from (select * from student) rs;             */</span>                        <span class="token comment">//欲执行的sql语句 from后面用子查询一定要取别名</span>            <span class="token class-name">String</span> countSql <span class="token operator">=</span> <span class="token string">"select count(1) from ("</span> <span class="token operator">+</span> sql <span class="token operator">+</span> <span class="token string">") rs"</span><span class="token punctuation">;</span>            <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DruidUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">PreparedStatement</span> prep <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            prep <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>countSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> prep<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//初始光标在字段名称前面，当next()后就会指向第一条数据</span>            rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Long</span> count <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Student.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span><span class="token punctuation">;</span><span class="token comment">/** * @Author 小白不白 * @Date 2022/9/19 22:29 * @Description: * @Version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> _id<span class="token punctuation">;</span> <span class="token comment">//对于mysql中无符号的int型在java中只能用Long类型</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>    <span class="token comment">//进行对表字段反射的时候无法识别String类型，所以建议使用jdk1.8提供的LocalDataTime类</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> create_time<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> update_time<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sid<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">,</span> <span class="token class-name">String</span> province<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>province <span class="token operator">=</span> province<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> _id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set_id</span><span class="token punctuation">(</span><span class="token class-name">Long</span> _id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_id <span class="token operator">=</span> _id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSid</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProvince</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> province<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProvince</span><span class="token punctuation">(</span><span class="token class-name">String</span> province<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>province <span class="token operator">=</span> province<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">LocalDateTime</span> <span class="token function">getCreate_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> create_time<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCreate_time</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span> create_time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>create_time <span class="token operator">=</span> create_time<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">LocalDateTime</span> <span class="token function">getUpdate_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> update_time<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpdate_time</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span> update_time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>update_time <span class="token operator">=</span> update_time<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"_id="</span> <span class="token operator">+</span> _id <span class="token operator">+</span>                <span class="token string">", sid="</span> <span class="token operator">+</span> sid <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", gender='"</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", province='"</span> <span class="token operator">+</span> province <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", create_time="</span> <span class="token operator">+</span> create_time <span class="token operator">+</span>                <span class="token string">", update_time="</span> <span class="token operator">+</span> update_time <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>PageInfo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> data<span class="token punctuation">;</span><span class="token comment">// 具体的数据</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> count<span class="token punctuation">;</span> <span class="token comment">//符合条件的数据条数</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token class-name">Long</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @Author 小白不白 * @Description: * @Version 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DAOTestDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BaseDAO</span> baseDAO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//DML语句</span>        <span class="token comment">/*String sql = "insert into student values(5,1005,'柯南',23,'male','江户川',default,default)";        int i = baseDAO.update(sql);        System.out.println(i);*/</span>        <span class="token comment">//DQL语句</span>        <span class="token comment">/*String sql = "select * from student";        List&lt;Student> list = baseDAO.query(Student.class,sql);        for (Student student : list) &#123;            System.out.println(student);        &#125;*/</span>        <span class="token comment">//分页查询</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from student"</span><span class="token punctuation">;</span>        <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> studentPageInfo <span class="token operator">=</span> baseDAO<span class="token punctuation">.</span><span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>studentPageInfo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> studentPageInfo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out <span class="token operator">::</span> <span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ol><h3 id="CRUD利用BaseDao封装工具"><a href="#CRUD利用BaseDao封装工具" class="headerlink" title="CRUD利用BaseDao封装工具"></a>CRUD利用BaseDao封装工具</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * CRUD: 增删查改 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CRUDDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into db01.student values(0,?,?,?,?,?,default,default)"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"male"</span><span class="token punctuation">,</span> <span class="token string">"上海市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"delete from student where sid = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update student set gender = ? where name = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">"female"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from student"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from student"</span><span class="token punctuation">;</span>        <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总条数： "</span><span class="token operator">+</span>pageInfo<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> pageInfo<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h1>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="/2022/08/18/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%AE%8C%E7%BE%8E%E7%89%88/"/>
      <url>/2022/08/18/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%AE%8C%E7%BE%8E%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><p>数据库：存储数据的仓库</p><p>之前我们可以使用数组、集合、IO存储数据。其中数组和集合的数据在内存中，IO可以将数据持久化存储。</p><p>我们在实际开发中很多业务是需要将数据持久化的，此时使用IO将数据存储成一个普通的文件行不行？</p><p>可以，但是不高效。比如我们将用户的数据存储成一个txt文件：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">1000 张三 20 男 北京 海淀区1002 李四 21 男 上海 浦东区1003 韩梅梅 22 女 成都 武侯区.....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时如果我们需要查询年龄大于21岁的用户有哪些。我们需要将文本中的每一行信息读取出来，然后按照空格分割，得到age字符串，再将字符串转成int，然后做比较。这样操作会发现数据越多处理效率越低。</p><p>如果我们需要将1003的地址修改成重庆 渝北区，发现需要将数据全部读取，修改后的数据重新覆盖整个旧文件，依然效率低下。</p><p>以上的操作之所以效率低下，是因为我们存储数据的数据结构没有专门的进行设计，就是一个普通的文本文件，所有数据在一起，全部是String。</p><p>为了解决在实际开发中操作数据的高效问题，就产生了数据库这种产品。<strong>数据库也是将数据持久化存储成多个文件，这些文件都是经过专门的设计的，底层有专门的数据结构来存储数据，所以我们直接打开数据库的数据文件是看不懂的，只有数据库软件可以读取。</strong></p><p><strong>数据库：高效存储和操作数据的仓库</strong></p><h2 id="MySQL相关的概念"><a href="#MySQL相关的概念" class="headerlink" title="MySQL相关的概念"></a>MySQL相关的概念</h2><p><img src="/.io//MySQL.assets%5Cimage-20220330090451104.png" alt="image-20220330090451104"></p><h2 id="数据库的分类"><a href="#数据库的分类" class="headerlink" title="数据库的分类"></a>数据库的分类</h2><h3 id="一、关系型数据库"><a href="#一、关系型数据库" class="headerlink" title="一、关系型数据库"></a>一、关系型数据库</h3><p>关系型数据库就是由<strong>二维表</strong>及<strong>其之间的关系</strong>组成的一个数据组织。</p><h4 id="常见的关系型数据库"><a href="#常见的关系型数据库" class="headerlink" title="常见的关系型数据库"></a>常见的关系型数据库</h4><ul><li>Oracle- 甲骨文</li><li>DB2  - IBM</li><li>MySQL - 甲骨文</li><li>SQLServer - 微软</li><li>SQLite - 移动端</li></ul><h3 id="二、非关系型数据库-NoSQL"><a href="#二、非关系型数据库-NoSQL" class="headerlink" title="二、非关系型数据库 - NoSQL"></a>二、非关系型数据库 - NoSQL</h3><p>NoSQL &#x3D; Not Only SQL</p><p>不是二维表结构，表之间也没有关系,无模式</p><h4 id="常见的非关系型数据库"><a href="#常见的非关系型数据库" class="headerlink" title="常见的非关系型数据库"></a>常见的非关系型数据库</h4><ul><li>Redis  – kv格式的数据库</li><li>MongoDB – 文档型数据库 </li><li>HBase  – 列族式数据库</li></ul><h2 id="MySQL下载和安装"><a href="#MySQL下载和安装" class="headerlink" title="MySQL下载和安装"></a>MySQL下载和安装</h2><p>下载地址：<a href="https://dev.mysql.com/downloads/windows/installer/5.7.html">https://dev.mysql.com/downloads/windows/installer/5.7.html</a></p><h3 id="MySQL安装文件夹介绍"><a href="#MySQL安装文件夹介绍" class="headerlink" title="MySQL安装文件夹介绍"></a>MySQL安装文件夹介绍</h3><p><img src="/images/MySQL.assets/1658192425615.png" alt="1658192425615"></p><p><img src="/images/MySQL.assets/1658192969381.png" alt="1658192969381"></p><h3 id="配置MySQL环境变量"><a href="#配置MySQL环境变量" class="headerlink" title="配置MySQL环境变量"></a>配置MySQL环境变量</h3><p><img src="/images/MySQL.assets/1658193041148.png" alt="1658193041148"></p><p><img src="/images/MySQL.assets/1658193107789.png" alt="1658193107789"></p><p>验证环境变量是否成功：</p><p><img src="/images/MySQL.assets/1658193187973.png" alt="1658193187973"></p><h2 id="MySQL客户端"><a href="#MySQL客户端" class="headerlink" title="MySQL客户端"></a>MySQL客户端</h2><ul><li><p><strong>DOS窗口 (需要使用命令)</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># -h 表示MySQL安装的主机名# -P 表示MySQL的端口号# -u 表示MySQL的用户名# -p 表示MySQL用户的密码C:\Users\NINGMEI&gt;mysql -hlocalhost -P3306 -uroot -p123456mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor.  Commands end with ; or \g.mysql&gt; exitBye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果连接数据库的时候使用的是<code>-hlocalhost -P3306</code>，那么-h和-P可以省略</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">C:\Users\NINGMEI&gt;mysql -uroot -p123456mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上的写法不安全，密码明文显示了。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 推荐使用C:\Users\NINGMEI&gt;mysql -uroot -pEnter password: ******Welcome to the MySQL monitor.  Commands end with ; or \g.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>自带的workbench</strong></p></li><li><p><strong>第三方的客户端 （Navicat）</strong></p></li></ul><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><p>MySQL数据库中使用的语言是SQL语句，所以我们要想操作MySQL数据库就需要学习SQL语句。</p><p>SQL：结构化查询语言（Structured Query Language）</p><p>标准SQL：在关系型数据库中都可以使用</p><p>方言SQL:   只能本数据库中使用</p><p><strong>MySQL中SQL语句关键字推荐使用大写</strong></p><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><ul><li>DDL语句 - 数据定义语言（data definition language）<ul><li>作用：操作数据库相关对象（数据库、表、索引、视图等）</li><li>代表性的关键字：create(创建)、alter(修改)、drop(删除)</li></ul></li><li>DML语句 - 数据操作语言（Data Manipulation Language）<ul><li>作用：对表中的数据进行增加、删除、修改</li><li>代表性的关键字：insert(增加)、delete(删除)、update(修改)</li></ul></li><li>DQL语句 - 数据查询语言（data query language）<ul><li>作用：查询表中的数据</li><li>代表性的关键字：select(查询)</li></ul></li><li>TCL语句 - 事务控制语句（Transaction Control language）<ul><li>作用：事务的操作</li></ul></li></ul><h2 id="MySQL的数据类型"><a href="#MySQL的数据类型" class="headerlink" title="MySQL的数据类型"></a>MySQL的数据类型</h2><p><img src="/images/MySQL.assets/image-20220330112554284.png" alt="image-20220330112554284"></p><p><strong>MySQL的数据类型就是字段的数据类型。</strong></p><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul><li><p>整型（精确值）</p><table><thead><tr><th align="left">Type</th><th align="left">Storage (Bytes)</th><th align="left">Minimum Value Signed(有符号)</th><th align="left">Minimum Value Unsigned(无符号)</th><th align="left">Maximum Value Signed</th><th align="left">Maximum Value Unsigned</th></tr></thead><tbody><tr><td align="left"><code>TINYINT</code></td><td align="left">1</td><td align="left"><code>-128</code></td><td align="left"><code>0</code></td><td align="left"><code>127</code></td><td align="left"><code>255</code></td></tr><tr><td align="left"><code>SMALLINT</code></td><td align="left">2</td><td align="left"><code>-32768</code></td><td align="left"><code>0</code></td><td align="left"><code>32767</code></td><td align="left"><code>65535</code></td></tr><tr><td align="left"><code>MEDIUMINT</code></td><td align="left">3</td><td align="left"><code>-8388608</code></td><td align="left"><code>0</code></td><td align="left"><code>8388607</code></td><td align="left"><code>16777215</code></td></tr><tr><td align="left"><code>INT</code></td><td align="left">4</td><td align="left"><code>-2147483648</code></td><td align="left"><code>0</code></td><td align="left"><code>2147483647</code></td><td align="left"><code>4294967295</code></td></tr><tr><td align="left"><code>BIGINT</code></td><td align="left">8</td><td align="left"><code>-2^63</code></td><td align="left"><code>0</code></td><td align="left"><code>2^63-1</code></td><td align="left"><code>2^64-1</code></td></tr></tbody></table></li><li><p>浮点型（近似值）</p><ul><li>float 单精度，占4个字节</li><li>double 双精度，占8个字节</li><li>MySQL支持非标准的SQL: FLOAT(<em><code>M</code></em>,<em><code>D</code></em>),DOUBLE(<em><code>M</code></em>,<em><code>D</code></em>)<ul><li><strong>M表示总的数字位数</strong></li><li><strong>D表示小数位数，如果小数位超出了D的范围，会四舍五入。但是四舍五入后整数必须满足M的范围，否则出错</strong></li></ul></li></ul></li><li><p><strong>定点型（精确值）</strong></p><ul><li>DECIMAL(M,D)<ul><li>M表示总的数字位数</li><li>D表示小数位数</li><li>DECIMAL(M,0) 等价于DECIMAL(M)。就是个整数</li><li><strong>注意：涉及到计算钱的时候，就必须使用定点型</strong></li></ul></li></ul></li></ul><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>定长字符串：char(n),n表示字符的数量<ul><li>例如， <code>CHAR(30)</code>最多可容纳 30 个字符</li><li>n的取值范围0-255个字符</li><li>定长指的是，插入的数据长度小于n,尾部会使用空格将长度填充到n</li><li>弊端：浪费空间；优点：效率高 （以空间换时间）</li></ul></li><li>可变字符串： varchar(n),n表示字符的数量<ul><li>例如， <code>VARCHAR(30)</code>最多可容纳 30 个字符</li><li>n的取值范围0-65535个字节**(受到行大小（65535字节）的限制)**</li><li>可变的意思是，varchar中的数据占据的真实数据的长度的空间，不足n也不会使用空格填充</li><li><code>VARCHAR</code>值存储为 1 字节或 2 字节长度前缀加上数据。长度前缀表示值中的字节数。如果值需要不超过 255 个字节，则一列使用一个长度字节，如果值可能需要超过 255 个字节，则使用两个长度字节。</li><li>优点：节约空间；弊端：效率低（以时间换空间）</li><li>varchar字符数&#x3D; （65535 - 每个字段占据的内存大小 - 2 字节长度前缀 - 1字节空值） &#x2F; 字符集中单个字符的最大长度</li></ul></li><li>文本类型 - Text<ul><li>Text类型的数据只有9-12个字节和其他的字段共享行大小（65535字节）</li><li><strong>Text的数据部分是单独存储的，所以Text类型的数据大小不受到行大小（65535字节）的限制</strong></li></ul></li></ul><h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><ul><li>date: 日期类型<ul><li>只有年月日</li><li>取值范围：<code>&#39;1000-01-01&#39;</code> to <code>&#39;9999-12-31&#39;</code>.</li></ul></li><li>time: 时间类型<ul><li>只有时分秒</li><li>取值范围：’-838:59:59’<code>to</code>‘838:59:59’</li><li>time不仅表示时间，还表示时间的间隔</li></ul></li><li>year: 年<ul><li>只有年份</li><li>四位的年份取值范围：’1901’<code>to</code>‘2155’</li></ul></li><li>datetime：日期时间类型<ul><li>有年月日时分秒</li><li>取值范围：<code>&#39;1000-01-01 00:00:00&#39;</code> to <code>&#39;9999-12-31 23:59:59&#39;</code>.</li><li>值不受时区的影响</li></ul></li><li>timestamp: 时间戳<ul><li>有年月日时分秒</li><li>取值范围：1970-01-01 00:00:01’<code>UTC to</code>‘2038-01-19 03:14:07’</li><li>值受时区的影响</li><li>我们处于东八区，要更改为西巴区就 +8:00 小时。</li></ul></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建表create table if not exists db01.test(  name varchar(20),info text,time1 datetime,time2 timestamp);# 更改时区为西八区set time_zone&#x3D;&quot;-08:00&quot;;select * from db01.test;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># &#123;&#125; 表示必须要的内容# | 表示或# [] 表示可选CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name    [create_option] ...create_option: [DEFAULT] &#123;    CHARACTER SET [&#x3D;] charset_name  | COLLATE [&#x3D;] collation_name&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- --和#表示注释信息#  --和文字之间必须有空格# 创建数据库# 如果数据库不存在就创建，存在就不做操作# 数据库默认的字符集是 latin1,不能存储中文create database if not exists db01;# 创建数据库的时候指定字符集为utf8create database if not exists db02 character set utf8;# 创建数据库的时候指定字符集为utf8,指定排序规则为utf8_bincreate database if not exists db03 character set utf8 collate utf8_bin;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER &#123;DATABASE | SCHEMA&#125; [db_name]    alter_option ...alter_option: &#123;    [DEFAULT] CHARACTER SET [&#x3D;] charset_name  | [DEFAULT] COLLATE [&#x3D;] collation_name&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 切换(使用)数据库use db01;-- 修改数据库的字符集# 将db01的字符集修改成utf8# 没有指定utf8的排序规则，默认就是utf8_general_cialter database db01 character set utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除数据库-- 如果数据库存在就删除，不存在就不做处理drop database if exists db01;drop database if exists db02;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE [IF NOT EXISTS] tbl_name    (create_definition,...)    [table_options]CREATE TABLE [IF NOT EXISTS] tbl_name    [(create_definition,...)]    [table_options]    [AS] query_expressionCREATE TABLE [IF NOT EXISTS] tbl_name    &#123; LIKE old_tbl_name | (LIKE old_tbl_name) &#125;create_definition: &#123;    col_name column_definition  | &#123;INDEX | KEY&#125; [index_name] [index_type] (key_part,...)      [index_option] ...  | [CONSTRAINT [symbol]] PRIMARY KEY      [index_type] (key_part,...)      [index_option] ...  | [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]      [index_name] [index_type] (key_part,...)      [index_option] ...  | [CONSTRAINT [symbol]] FOREIGN KEY      [index_name] (col_name,...)      reference_definition&#125;column_definition: &#123;    data_type [NOT NULL | NULL] [DEFAULT default_value]      [AUTO_INCREMENT] [UNIQUE [KEY]] [[PRIMARY] KEY]      [COMMENT &#39;string&#39;]&#125;reference_definition:    REFERENCES tbl_name (key_part,...)      [ON DELETE reference_option]      [ON UPDATE reference_option]reference_option:    RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULTtable_options:    table_option [[,] table_option] ...table_option: &#123;    AUTO_INCREMENT [&#x3D;] value  | [DEFAULT] CHARACTER SET [&#x3D;] charset_name  | [DEFAULT] COLLATE [&#x3D;] collation_name  | COMMENT [&#x3D;] &#39;string&#39;  | ENGINE [&#x3D;] engine_name&#125;query_expression:    SELECT ...   (Some valid select or union statement)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 创建学生表create table if not exists db01.student(  -- 数据库中除了数字外，其余类型的值都是用单引号或双引号引起来  uid int comment &quot;学号&quot;,&#96;name&#96; char(4)  comment &quot;姓名&quot;,-- unsigned 表示无符号 --&gt; 年龄是正数age tinyint unsigned comment &quot;年龄&quot;,-- 最后一个字段没有逗号sex char(2) comment &quot;性别&quot;,    -- 建议在开发中给自己表添加&#39;创建时间&#39;和&#39;更新时间&#39;    create_time datatime comment &#39;创建时间&#39;,    update_time datatime comment &#39;更新时间&#39;)comment&#x3D;&quot;学生表&quot;;-- 查看建库语句show create database db01;-- 查看建表语句show create table db01.student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE tbl_name    [alter_option [, alter_option] ...]alter_option: &#123;    table_options  | ADD [COLUMN] col_name column_definition        [FIRST | AFTER col_name]  | ADD [COLUMN] (col_name column_definition,...)  | ADD &#123;INDEX | KEY&#125; [index_name]        [index_type] (key_part,...) [index_option] ...  | ADD [CONSTRAINT [symbol]] PRIMARY KEY        [index_type] (key_part,...)  | ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY]        [index_name] [index_type] (key_part,...)        [index_option] ...  | ADD [CONSTRAINT [symbol]] FOREIGN KEY        [index_name] (col_name,...)        reference_definition  | ALTER [COLUMN] col_name &#123;        SET DEFAULT &#123;literal | (expr)&#125;      | DROP DEFAULT    &#125;  | CHANGE [COLUMN] old_col_name new_col_name column_definition        [FIRST | AFTER col_name]  | DROP [COLUMN] col_name  | DROP &#123;INDEX | KEY&#125; index_name  | DROP PRIMARY KEY  | DROP FOREIGN KEY fk_symbol  | MODIFY [COLUMN] col_name column_definition        [FIRST | AFTER col_name]  | RENAME &#123;INDEX | KEY&#125; old_index_name TO new_index_name  | RENAME [TO | AS] new_tbl_name&#125;table_options:    table_option [[,] table_option] ...table_option: &#123;    AUTO_INCREMENT [&#x3D;] value  | [DEFAULT] CHARACTER SET [&#x3D;] charset_name  | [DEFAULT] COLLATE [&#x3D;] collation_name  | COMMENT [&#x3D;] &#39;string&#39;  | ENGINE [&#x3D;] engine_name&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 在student表中添加address字段alter table db01.student add address varchar(20) not null;-- 在student表中添加score字段在sex字段之后alter table db01.student add score int after sex;-- 将student表中的uid字段设置成主键alter table db01.student add primary key(uid);-- 将student表中的sex字段改成gender-- change 主要用于修改字段的名称alter table db01.student change sex gender char(2);-- 将student表中的uid主键设置成自增alter table db01.student change uid uid int auto_increment;-- 将student表中的gender修改成varchar(3)-- modify更改字段的其他信息，除了名字alter table db01.student modify gender varchar(3);-- 删除student表中的addressalter table db01.student drop address;-- 删除student表中的name字段的unique索引alter table db01.student drop index name_key;-- 删除student表中的主键-- 删除主键之前需要先取消自增-- 先取消自增alter table db01.student modify uid int;-- 删除主键alter table db01.student drop primary key;-- 将student表名修改成t_studentalter table db01.student rename to t_student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RENAME-TABLE-语句"><a href="#RENAME-TABLE-语句" class="headerlink" title="RENAME TABLE 语句"></a>RENAME TABLE 语句</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">RENAME TABLE    tbl_name TO new_tbl_name    [, tbl_name2 TO new_tbl_name2] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 将t_student表名修改成studentrename table t_student to student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP TABLE [IF EXISTS]    tbl_name [, tbl_name] ...    [RESTRICT | CASCADE]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除表drop table if exists student,student01,student02,student03;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="TRUNCATE-TABLE-语句"><a href="#TRUNCATE-TABLE-语句" class="headerlink" title="TRUNCATE TABLE 语句"></a>TRUNCATE TABLE 语句</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">TRUNCATE [TABLE] tbl_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- truncate清空数据-- 1.先将数据表删除-- 2.创建一张空表truncate table student04;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字段约束"><a href="#字段约束" class="headerlink" title="字段约束"></a>字段约束</h2><p>字段约束的作用就是<strong>对字段的值进行限制</strong>，保证数据的安全性和完整性。</p><h3 id="主键约束-primary-key"><a href="#主键约束-primary-key" class="headerlink" title="主键约束-primary key"></a>主键约束-primary key</h3><ul><li><strong>一张表只能有一个主键</strong></li><li><strong>主键的值唯一且非空的</strong></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建学生表01create table if not exists db01.student01(    -- uid设置成主键    -- primary key 表示主键， primary key在建表语句中只能出现一次    uid int primary key,name char(10),age int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的方式只能将一个字段设置成主键。<strong>开发中有时候我们需要将多个字段组合成一个主键,这种主键叫做复合主键。</strong></p><p>复合主键需要使用以下的方式设置：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建学生表02create table if not exists db01.student02(  uid int,name char(10),age int,-- 复合主键，主键只有一个，只是这个主键是由两个字段组成的primary key(uid,name));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>如果主键字段的数据类型是数字类型，可以使用自动增长（auto_increment）</strong></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建学生表03create table if not exists db01.student03(  -- 设置主键并自增,自增初始化是1  uid int primary key auto_increment,name char(10),age int);-- 创建学生表04create table if not exists db01.student04(  -- 设置主键并自增  uid int primary key auto_increment,name char(10),age int-- 更改自增的初始值为1000)auto_increment&#x3D;1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：自增字段的值只会自增。当删除自增字段已自增的记录后，下一个自增字段值不会改变，依然是“数值+1”。</strong></p><p><strong>在开发中推荐使用一个跟业务无关的字段作为主键。</strong></p><h3 id="唯一性约束-unique"><a href="#唯一性约束-unique" class="headerlink" title="唯一性约束 - unique"></a>唯一性约束 - unique</h3><ul><li><strong>字段的值不能有重复的</strong></li><li><strong>允许为null，且null值不受唯一性约束</strong></li><li><strong>一张表可以有多个唯一性约束</strong></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建学生表05create table if not exists db01.student05(    -- 设置主键并自增    uid int primary key auto_increment,-- name必须唯一name char(10) unique,age int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非空约束-Not-Null"><a href="#非空约束-Not-Null" class="headerlink" title="非空约束 - Not Null"></a>非空约束 - Not Null</h3><ul><li>值不能为null</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建学生表06create table if not exists db01.student06(  -- 设置主键并自增  uid int primary key auto_increment,-- name必须唯一且不能为nullname char(10) unique not null,age int);-- 查看表的信息mysql&gt; desc student06;+-------+----------+------+-----+---------+----------------+| Field | Type     | Null | Key | Default | Extra          |+-------+----------+------+-----+---------+----------------+| uid   | int(11)  | NO   | PRI | NULL    | auto_increment || name  | char(10) | NO   | UNI | NULL    |                || age   | int(11)  | YES  |     | NULL    |                |+-------+----------+------+-----+---------+----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>unique not null 和primary key的区别</strong>：</p><ul><li>primary key 一张表只能有一个</li><li>unique not null 一张表可以有多个</li></ul><h3 id="默认值约束-default"><a href="#默认值约束-default" class="headerlink" title="默认值约束 - default"></a>默认值约束 - default</h3><ul><li>可以给字段设置默认值</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建学生表08create table if not exists db01.student08(  uid int,-- name必须唯一且不能为nullname char(10) unique not null default &quot;&quot;,age int,-- 设置字段的默认值sex char(6) default &#39;male&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外键约束-后面讲"><a href="#外键约束-后面讲" class="headerlink" title="外键约束 - 后面讲"></a>外键约束 - 后面讲</h3><h2 id="显示宽度"><a href="#显示宽度" class="headerlink" title="显示宽度"></a>显示宽度</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table if not exists db01.student09(  -- 3表示的是显示宽度，需要配合零填充才有效果  uid int(3) zerofill,name char(10) unique not null default &quot;&quot;,age int,sex char(6) default &#39;male&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h2><blockquote><p>DML语句操作的数据表中的数据</p></blockquote><h3 id="插入语句-insert"><a href="#插入语句-insert" class="headerlink" title="插入语句-insert"></a>插入语句-insert</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT [INTO] tbl_name    [(col_name [, col_name] ...)]    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...INSERT [INTO] tbl_name    [(col_name [, col_name] ...)]    SELECT ...value_list:    value [, value] ...    value:    &#123;expr | DEFAULT&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建学生表create table if not exists student (  _id bigint primary key auto_increment,sid int unsigned not null unique,name varchar(12) not null,gender char(6) default &#39;male&#39;,province text,create_time datetime,update_time datetime);-- 插入一条数据insert into student (_id,sid,name,gender,province,create_time,update_time)values (1,1001,&#39;zhangsan&#39;,&#39;male&#39;,&#39;四川省&#39;,&#39;2022-03-30 17:22:10&#39;,&#39;2022-03-30 17:22:10&#39;);-- 插入多条数据insert into student (_id,sid,name,gender,province,create_time,update_time)values (2,1002,&#39;lisi&#39;,&#39;male&#39;,&#39;四川省&#39;,&#39;2022-03-30 17:25:10&#39;,&#39;2022-03-30 17:25:10&#39;),(3,1003,&#39;hanmeimei&#39;,&#39;male&#39;,&#39;重庆市&#39;,&#39;2022-03-30 17:25:10&#39;,&#39;2022-03-30 17:25:10&#39;);-- 插入数据的时候，如果是插入全部字段的数据，字段可以不写insert into student values (4,1004,&#39;zhaosi&#39;,&#39;male&#39;,&#39;四川省&#39;,&#39;2022-03-30 17:25:10&#39;,&#39;2022-03-30 17:25:10&#39;),(5,1005,&#39;liuneng&#39;,&#39;male&#39;,&#39;重庆市&#39;,&#39;2022-03-30 17:25:10&#39;,&#39;2022-03-30 17:25:10&#39;);-- 插入部分字段的数据，字段不可以省略-- 非空字段必须插入值，除非有默认值insert into student (sid,name) values (1006,&#39;test&#39;);-- 有默认值的字段，插入数据的时候可以使用default表示默认值insert into student (sid,name,gender) values (1007,&#39;test01&#39;,default);-- 插入数据的时候，自增的主键可以使用0或nullinsert into student (_id,sid,name) values (0,1008,&#39;test02&#39;);insert into student (_id,sid,name) values (null,1009,&#39;test03&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新语句-update"><a href="#更新语句-update" class="headerlink" title="更新语句-update"></a>更新语句-update</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE tableName    SET assignment_list    [WHERE where_condition]    [LIMIT row_count]        assignment_list:    assignment [, assignment] ...   assignment:    col_name &#x3D; value    value:    &#123;expr | DEFAULT&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">## 将student表中的性别修改成female## 修改所有行的数据update student set gender &#x3D; &#39;female&#39;;## 修改前三行的数据update student set gender &#x3D; &#39;male&#39; limit 3;## 将student中sid为1006的gender修改成male## where子句进行条件过滤update student set gender &#x3D; &#39;male&#39; where sid &#x3D; 1006;## 有默认值的字段赋值的时候可以使用defaultupdate student set gender &#x3D; default where sid &#x3D; 1008;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除语句-delete"><a href="#删除语句-delete" class="headerlink" title="删除语句-delete"></a>删除语句-delete</h3><p><strong>单表语法：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM tbl_name    [WHERE where_condition]    [LIMIT row_count]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>多表语句：</strong>– 了解</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE tbl_name[.*] [, tbl_name[.*]] ...    FROM table_references    [WHERE where_condition]DELETE FROM tbl_name[.*] [, tbl_name[.*]] ...     USING table_references    [WHERE where_condition]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除student表的所有数据，属于DML-- 逐行删除delete from student;-- 删除表再新建一张空表，属于DDLtruncate table student;-- 使用where过滤指定的数据delete from student where sid &#x3D; 1009;-- 删除student表的所有数据delete student.*    from student;-- 删除多张表  -- 了解-- 92语法： using后面多张表使用逗号delete from db01.student,db01.student01 using student,student01;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><ul><li><p><strong>一对一</strong>： 一张表中的一行数据只会对应另外一张表的一行数据</p><p><img src="/images/MySQL.assets/image-20220401095533764.png" alt="image-20220401095533764"></p></li><li><p><strong>一对多&#x2F;多对一</strong>：一张表中一行数据对应另外一张表中的多行数据</p><ul><li><p>比如班级和学生、员工和部门</p><p><img src="/images/MySQL.assets/image-20220401100428723.png" alt="image-20220401100428723"></p><p>以上设计的表有问题：</p><ol><li>部门数据冗余，浪费空间</li><li>如果现在部门名称发生变更，那么以上表中的数据就要将该部门的所有员工数据进行更新，效率也不高</li></ol><p>所以我们需要将以上的表进行拆分，以上的表是一对多&#x2F;多对一的关系，所以我们拆成两张表：</p><p><strong>拆分规则：</strong></p><ol><li>将一的方拆成一张表（部门表）</li><li>将多的一方也拆成一张表（员工表）</li><li><strong>多的一方添加外键，引用少的一方的主键字段</strong></li></ol><p><img src="/images/MySQL.assets/image-20220401101117777-16487790832141.png" alt="image-20220401101117777"></p></li></ul></li><li><p><strong>多对多</strong>：表1中一行数据对应表2中的多行数据，表2中一行数据对应表1中的多行数据</p><ul><li><p>学生和老师或者学生和科目</p><p><img src="/images/MySQL.assets/image-20220401101951654.png" alt="image-20220401101951654"></p></li></ul></li></ul><p>以上设计的表，数据冗余了。所以需要拆表。以上表的关系是多对多的关系，所以<strong>拆分规则如下：</strong></p><ol><li>将两边多的一方都拆成一张独立表（就有两张表了）</li><li><strong>创建一张中间关系表，关系表中使用以上两张表的主键作为外键字段</strong></li></ol><p><img src="/images/MySQL.assets/image-20220401102727436.png" alt="image-20220401102727436"></p><h2 id="外键约束-foreign-key"><a href="#外键约束-foreign-key" class="headerlink" title="外键约束 - foreign key"></a>外键约束 - foreign key</h2><p><strong>外键：就是外部的键。也就是该字段的内容来自其他表。</strong></p><h3 id="外键的作用"><a href="#外键的作用" class="headerlink" title="外键的作用"></a>外键的作用</h3><p><strong>保证数据的一致性和完整性、安全性。</strong>有了外键约束后字段的数据就不能乱写了。</p><h3 id="一对多的外键约束"><a href="#一对多的外键约束" class="headerlink" title="一对多的外键约束"></a>一对多的外键约束</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建部门表create table dept(  did int primary key,name char(10));-- 创建员工表create table emp( eid int primary key, name char(10), age tinyint, sex char(6), did int, -- 约束     约束名            外键     外键字段  引用  表   引用字段 constraint fk_emp_dept_did foreign key (did) references dept(did));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/MySQL.assets/image-20220401110006844.png" alt="image-20220401110006844"></p><p><strong>父表：被外键引用的表叫做父表。</strong>（上面的部门表就是父表）</p><p><strong>子表：有外键的表。</strong>（上面的员工表就是子表）</p><h3 id="多对多关系的外键创建"><a href="#多对多关系的外键创建" class="headerlink" title="多对多关系的外键创建"></a>多对多关系的外键创建</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建学生表create table t_stu(    sid int primary key,name char(10),age int,sex char(10));-- 创建学科表create table t_subject( sub_id int primary key, sname char(10));-- 创建学生和学科的关系表create table t_stu_sub_rel( _id int primary key, sid int, sub_id int, foreign key (sid) references t_stu(sid), foreign key (sub_id) references t_subject(sub_id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外键的注意事项"><a href="#外键的注意事项" class="headerlink" title="外键的注意事项"></a>外键的注意事项</h3><ul><li>外键引用表中的引用字段必须具备唯一性</li><li>外键字段和引用字段的数据类型要一致，数值类型长度和符号要一致。字符串类型长度可以不一样</li><li><strong>建议：外键字段和引用字段的数据类型一致，长度也一致</strong></li><li>删除表，需要先删除子表，再删除父表</li><li>父子表必须使用相同的存储引擎，不能定义为临时表。</li><li>虚拟表（dual）</li></ul><h2 id="DQL语句⭐⭐⭐"><a href="#DQL语句⭐⭐⭐" class="headerlink" title="DQL语句⭐⭐⭐"></a>DQL语句⭐⭐⭐</h2><p>DML语句操作会修改原始数据；返回的是多少行受影响。</p><p><strong>DQL语句不会修改原始数据；返回的是查询到的结果集，是一张虚拟表。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT    [ALL | DISTINCT ]    select_expr [, select_expr] ...    [FROM table_references]    [WHERE where_condition]    [GROUP BY &#123;col_name&#125;    [HAVING where_condition]    [ORDER BY &#123;col_name&#125;      [ASC | DESC], ...]    [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]    [FOR UPDATE]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询student表的所有数据-- select 返回的是虚拟表，数据在内存中-- select 后面跟的字段叫做投影(project)字段-- 投影字段：也就是虚拟表中需要显示的字段-- * 表示所有的字段，也就是投影所有的字段select * from student;-- 下面的语句表示只投影nane和gender-- 虽然只投影了name和gender，但是其他的所有字段也在内存中select name,gender from student;-- 查找性别是male的学生的名字和性别select name,gender from student where gender &#x3D;&#39;male&#39;;-- select语句不会修改原始数据select sid+1000,name,gender from student;-- as 给字段取别名，as可以省略select sid as id ,name,gender from student;-- distinct前面不能再写投影字段-- 按照job字段的值去重select distinct job from emp;-- 按照job+ename的值去重select distinct job,ename from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/MySQL.assets/image-20220401114338165.png" alt="image-20220401114338165"></p><h2 id="单行函数和操作符"><a href="#单行函数和操作符" class="headerlink" title="单行函数和操作符"></a>单行函数和操作符</h2><h3 id="比较函数和操作符"><a href="#比较函数和操作符" class="headerlink" title="比较函数和操作符"></a>比较函数和操作符</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_greater-than"><code>&gt;</code></a></td><td align="left">大于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_greater-than-or-equal"><code>&gt;=</code></a></td><td align="left">大于或等于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_less-than"><code>&lt;</code></a></td><td align="left">小于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_not-equal"><code>&lt;&gt;</code>,<code>!=</code></a></td><td align="left">不等于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_less-than-or-equal"><code>&lt;=</code></a></td><td align="left">小于或等于运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_equal-to"><code>&lt;=&gt;</code></a></td><td align="left"><strong>NULL 安全等于运算符</strong></td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_equal"><code>=</code></a></td><td align="left">等号运算符</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_between"><code>BETWEEN ... AND ...</code></a></td><td align="left">一个值是否在一个值范围内</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_in"><code>IN()</code></a></td><td align="left">一个值是否在一组值内</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_is-not-null"><code>IS NOT NULL</code></a></td><td align="left">NOT NULL 值测试</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_is-null"><code>IS NULL</code></a></td><td align="left">空值测试</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#function_isnull"><code>ISNULL()</code></a></td><td align="left">测试参数是否为 NULL</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html#operator_like"><code>LIKE</code></a></td><td align="left"><strong>简单的模式匹配</strong></td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_not-between"><code>NOT BETWEEN ... AND ...</code></a></td><td align="left">值是否不在值范围内</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_not-in"><code>NOT IN()</code></a></td><td align="left">一个值是否不在一组值内</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html#operator_not-like"><code>NOT LIKE</code></a></td><td align="left">简单模式匹配的否定</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html#function_strcmp"><code>STRCMP()</code></a></td><td align="left"><strong>比较两个字符串</strong></td></tr></tbody></table><p>在MySQL中可以使用<code>&lt;&gt;</code>和<code>!=</code>表示不等于。但是!&#x3D;是编程语言中使用的，MySQL兼容了。<strong>真正MySQL的不等于是&lt;&gt;。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不是四川省的学生信息select * from student where province !&#x3D; &quot;四川省&quot;;select * from student where province &lt;&gt; &quot;四川省&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&lt;&#x3D;&gt;null安全等于操作符</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询省份是null的学生信息-- &lt;&#x3D;&gt;是MySQL的SQL方言select * from student where province &lt;&#x3D;&gt; null;-- 查询省份是null的学生信息select * from student where province is null;-- 查询省份不是null的学生信息select * from student where province is not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询年龄大于等于22小于等于25的学生信息-- between 22 and 25 : 大于等于22小于等于25select * from student where age between 22 and 25;-- 查询年龄是21，23，25的学生信息-- age in(21,23,25) 表示age等于()中的任何一个值select * from student where age &#x3D; 21 or age &#x3D; 23 or age &#x3D; 25;select * from student where age in(21,23,25);-- where后面的表达式结果是boolean-- 查询age是null的信息-- is null是操作符select * from db02.student where age is null;-- isnull()是函数select * from db02.student where isnull(age);select isnull(10); -- mysql中0可以表示falseselect isnull(null); -- mysql中1可以表示true,非0都是true-- 查询姓张的学生-- like 模糊查询-- %表示0到多个字符-- _表示1个字符select * from student where name like &#39;张%&#39;;-- 查询名字是张x的学生select * from student where name like &#39;张_&#39;;-- 查询姓名中包含张的学生信息-- 注意：%或者_在最前面，索引就会失效select * from student where name like &#39;%张%&#39;;-- 比较两个字符串-- 0 表示相等-- -1 表示小于-- 1 表示大于select strcmp(&quot;java&quot;,&quot;java&quot;); -- 0select strcmp(&quot;hello&quot;,&quot;java&quot;); -- -1select strcmp(&quot;zero&quot;,&quot;hello&quot;); -- 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html#operator_and"><code>AND</code>,<code>&amp;&amp;</code></a></td><td align="left">逻辑与</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html#operator_not"><code>NOT</code>,<code>!</code></a></td><td align="left">否定价值</td></tr><tr><td align="left">[<code>OR</code>,&#96;</td><td align="left"></td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html#operator_xor"><code>XOR</code></a></td><td align="left">逻辑异或</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询年龄大于等于22小于等于25的学生信息select * from student where age &gt;&#x3D; 22 and age &lt;&#x3D; 25;select * from student where age &gt;&#x3D; 22 &amp;&amp; age &lt;&#x3D; 25;-- 查询年龄等于22或者等于25的学生信息select * from student where age &#x3D; 22 or age &#x3D; 25;select * from student where age &#x3D; 22 || age &#x3D; 25;-- 查询姓名不姓张的学生信息select * from student where name not like &#39;张%&#39;;-- 查询四川或重庆的女生-- and和or同时存在，and的优先级高select * from student where (province &#x3D; &#39;四川省&#39; or province &#x3D; &#39;重庆市&#39;) and gender &#x3D; &#39;female&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>XOR逻辑异或</strong>：<strong>如果任意一个操作数为NULL，则返回NULL。非空的操作数，相同为假，不同为真</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT 1 XOR 1;        -&gt; 0mysql&gt; SELECT 1 XOR 0;        -&gt; 1mysql&gt; SELECT 1 XOR NULL;        -&gt; NULLmysql&gt; SELECT 1 XOR 1 XOR 1;        -&gt; 1        -- 逻辑运算符连接的是boolean值-- 非0 都表示真SELECT 2 XOR 1 XOR 1; -- 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/assignment-operators.html#operator_assign-value"><code>:=</code></a></td><td align="left">赋值</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/assignment-operators.html#operator_assign-equal"><code>=</code></a></td><td align="left">赋值（作为 <a href="https://dev.mysql.com/doc/refman/5.7/en/set-variable.html"><code>SET</code></a> 语句的一部分，或作为UPDATE语句中<code>SET</code>子句的 一部分）</td></tr></tbody></table><p>&#x3D;号可以用作比较运算符，还可以作为赋值运算符</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 赋值运算符set time_zone &#x3D; &quot;-08:00&quot;;update student set name &#x3D; &quot;不知道&quot;;-- 与&#x3D;不同，:&#x3D; 运算符永远不会被解释为比较运算符set time_zone :&#x3D; &quot;+08:00&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算术操作符"><a href="#算术操作符" class="headerlink" title="算术操作符"></a>算术操作符</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>%</code>,<code>MOD</code></td><td align="left">模运算符</td></tr><tr><td align="left"><code>*</code></td><td align="left">乘法运算符</td></tr><tr><td align="left"><code>+</code></td><td align="left">加法运算符</td></tr><tr><td align="left"><code>-</code></td><td align="left">减号运算符</td></tr><tr><td align="left"><code>-</code></td><td align="left">更改参数的符号</td></tr><tr><td align="left"><code>/</code></td><td align="left">除法运算符</td></tr><tr><td align="left"><code>DIV</code></td><td align="left">整数除法</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- mysql中+用于数字计算，不能用于字符串拼接-- 字符串做运算，会将字符串转成数字相加-- 字符串不是数值类型，就不能转具体的数字，就会转成0-- true表示1，false表示0-- null和任何数做运算都是nullselect &quot;1&quot;+&quot;2&quot;; -- 3select &quot;1&quot; + 2; -- 3select &quot;a&quot; + 2; -- 2select &quot;a&quot; + &quot;b&quot;; -- 0-- 如果是数字开头的字符串转数字，只能将非数字字符串前面的数字字符串转成数值型select &quot;2a&quot; + &quot;2b&quot;; -- 4select &quot;2a2&quot; + &quot;2b2&quot;; -- 4select &quot;a2&quot; + 2; -- 2select true + 2; -- 3select false + 2; -- 2select &quot;a&quot; + true; -- 1select null + 2; -- nullselect null + &quot;a&quot;; -- null-- mysql中除数是0，结果为nullselect 1 &#x2F; 0; -- nullselect -6 &#x2F; 3; -- -2.0000select -5 &#x2F; 2; -- -2.5000select -5 &#x2F; -2; -- 2.5000-- div 表示整除，也就是取结果的整数部分-- MySQL中的div才相当于java中的&#x2F;除法select -6 div 3; -- -2select -5 div 2; -- -2select -5 div -2; -- 2-- %结果的符号取决于被除数的符号select 1 % 0; -- nullselect 5 % 2; -- 1select -5 % 2; -- -1select -5 % -2; -- -1select 5 % -2; -- 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><ul><li>abs(): 绝对值函数</li><li>ceil():向上取整</li><li>floor():向下取整</li><li>round():四舍五入</li><li>power(): 指数函数</li><li>pi():圆周率函数</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select abs(-110); -- 110select ceil(-3.11); -- -3select floor(-3.11); -- -4-- 绝对值的四舍五入加负号select round(-3.11); -- -3select round(-3.45); -- -3select round(-3.5); -- -4select power(2,3); -- 8select pi(); -- 3.141593<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><ul><li><p>case语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 类似于java中的switchCASE value WHEN compare_value THEN result [WHEN compare_value THEN result ...] [ELSE result] END--  类似于java中的 if...else ifCASE WHEN condition THEN result [WHEN condition THEN result ...] [ELSE result] END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询学生的信息，如果是male返回帅哥，如果是female就返回美女select name,gender,    case gender  when &quot;male&quot; then &quot;帅哥&quot;when &quot;female&quot; then &quot;美女&quot;else &quot;人渣&quot;end as infofrom student;-- 查询学生的信息，如果是male返回帅哥，如果是female就返回美女select name,gender,   case  when gender &#x3D; &quot;male&quot; then &quot;帅哥&quot; when gender &#x3D; &quot;female&quot; then &quot;美女&quot; else &quot;人渣&quot; end as info from student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>if语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 类似于三目运算符-- 如果expr1是TRUE (expr1 &lt;&gt; 0和expr1 IS NOT NULL)，则IF() 返回expr2。否则，它返回expr3.IF(expr1,expr2,expr3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT IF(1&gt;2,2,3);        -&gt; 3mysql&gt; SELECT IF(1&lt;2,&#39;yes&#39;,&#39;no&#39;);        -&gt; &#39;yes&#39;mysql&gt; SELECT IF(STRCMP(&#39;test&#39;,&#39;test1&#39;),&#39;no&#39;,&#39;yes&#39;);        -&gt; &#39;no&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ifnull语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 如果expr1不是 NULL， 则IFNULL()返回 expr1；否则返回 expr2。IFNULL(expr1,expr2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT IFNULL(1,0);        -&gt; 1mysql&gt; SELECT IFNULL(NULL,10);        -&gt; 10mysql&gt; SELECT IFNULL(1&#x2F;0,10);        -&gt; 10mysql&gt; SELECT IFNULL(1&#x2F;0,&#39;yes&#39;);        -&gt; &#39;yes&#39;                -- 将学生的年龄+10select name,age,ifnull(age,0)+10 from db02.student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>nullif语句 – 了解</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- Returns NULL if expr1 &#x3D; expr2 is true, otherwise returns expr1.-- 如果expr1 &#x3D; expr2，返回null，否则返回expr1NULLIF(expr1,expr2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT NULLIF(1,1);        -&gt; NULLmysql&gt; SELECT NULLIF(1,2);        -&gt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 返回字符串的长度（以字节为单位）select length(&quot;java&quot;); -- 4select length(&quot;我&quot;); -- 3-- char_length(): 返回字符数量select char_length(&quot;java&quot;); -- 4select char_length(&quot;我&quot;); -- 1-- concat()返回连接的字符串select concat(name,province) from student; -- concat_ws()返回与分隔符连接select concat_ws(&quot;,&quot;,name,province) from student;-- find_in_set(): 第二个参数中第一个参数的索引（位置）-- MySQL的索引从1开始select find_in_set(&quot;b&quot;,&quot;a,b,c,d&quot;); -- 2-- format(): 返回格式化为指定小数位数的数字-- format会四舍五入select format(3.1415926,3); -- 3.142-- instr()返回子字符串第一次出现的索引-- 查找to在&quot;welcome to chengdu&quot;中第一次出现的索引select instr(&quot;welcome to chengdu&quot;,&quot;to&quot;); -- 9-- locate()返回子字符串第一次出现的位置select locate(&quot;to&quot;,&quot;welcome to chengdu&quot;); -- 9-- 从位置10开始查找子串的索引select locate(&quot;to&quot;,&quot;welcome to chengdu&quot;,10); -- 0-- lcase()和lower()相同，返回小写select lcase(&quot;JAVA&quot;); -- java-- ucase()和upper()一样，返回大写select ucase(&quot;java&quot;); -- JAVA-- substr(str,pos,len): 返回指定的子字符串select substr(&quot;welcome&quot;,1,3); -- welselect substring(&quot;welcome&quot;,1,3);-- wel-- trim()：删除前后空格select trim(&quot;     hello &quot;);select &quot;    hello &quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html">https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html</a></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- CURRENT_DATE(),CURRENT_DATE,CURDATE():返回当前日期select current_date();select current_date;select curdate();-- CURRENT_TIME(),CURRENT_TIME,CURTIME():返回当前时间select current_time();select concat_ws(&quot; &quot;,current_date(),current_time()) as time;-- CURRENT_TIMESTAMP(),CURRENT_TIMESTAMP,NOW():返回当前日期时间select current_timestamp();select now();-- ADDDATE(): 将时间值（间隔）添加到日期值-- 2天后select adddate(now(),2);-- 2天前select adddate(now(),interval -2 day);-- 2天后select adddate(now(),interval 2 day);-- 2年后select adddate(now(),interval 2 year);-- 2小时后select adddate(now(),interval 2 hour);-- 2分钟后select adddate(now(),interval 2 minute);-- ADDTIME(): 添加时间-- ADDTIME()将expr2添加到expr1并返回结果。-- 其中，Expr1为时间或datetime表达式，expr2为时间表达式。select addtime(now(),&#39;2:10&#39;);-- DATE(): 提取日期或日期时间表达式的日期部分select date(now());select date(create_time) from student;-- DATE_ADD()将时间值（间隔）添加到日期值-- DATE_SUB()：从日期中减去时间值（间隔）select date_add(now(),interval 2 day);-- DATE_FORMAT(date,format): 日期格式化select date_format(now(),&quot;%Y年%m月%d日 %H:%i:%s&quot;)-- DATEDIFF():两个日期之差select datediff(now(),&#39;1990-10-10&#39;);-- DAY(),DAYOFMONTH() 的同义词,返回月中的天select day(now());-- DAYNAME()返回工作日的名称,返回星期的名字select dayname(now());-- DAYOFWEEK()返回参数的工作日索引-- 周日是第一天select dayofweek(now());-- EXTRACT(unit from date)：提取日期的一部分select extract(year from now());-- QUARTER()从日期参数返回季度select quarter(now());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换函数-了解"><a href="#转换函数-了解" class="headerlink" title="转换函数  - 了解"></a>转换函数  - 了解</h3><ul><li><code>CAST(expr AS </code>type<code>)</code><ul><li>*允许的<code>type</code>*类型<ul><li>BINARY[(<em><code>N</code></em>)]</li><li>CHAR[(<em><code>N</code></em>)]</li><li>DATE</li><li>DATETIME[(<em><code>M</code></em>)]</li><li>DECIMAL[(<em><code>M</code></em>[,<em><code>D</code></em>])]</li><li>TIME[(<em><code>M</code></em>)]</li><li>SIGNED [INTEGER]</li><li>UNSIGNED [INTEGER]</li></ul></li></ul></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- cast 转换函数select locate(&#39;0&#39;,cast(110 as char));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="位运算-了解"><a href="#位运算-了解" class="headerlink" title="位运算 - 了解"></a>位运算 - 了解</h3><table><thead><tr><th align="left">Name</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-and"><code>&amp;</code></a></td><td align="left">按位与</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_right-shift"><code>&gt;&gt;</code></a></td><td align="left">右移</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_left-shift"><code>&lt;&lt;</code></a></td><td align="left">左移</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-xor"><code>^</code></a></td><td align="left">按位异或</td></tr><tr><td align="left">[&#96;</td><td align="left">&#96;](<a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-or">https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-or</a>)</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/bit-functions.html#operator_bitwise-invert"><code>~</code></a></td><td align="left">位反转</td></tr></tbody></table><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- md5加密select md5(111);-- password()计算并返回密码字符串select password(123456);-- *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- INET_ATON()：返回 IP 地址的数值 SELECT INET_ATON(&#39;10.0.5.9&#39;); -- 167773449 -- INET_NTOA():从数值返回 IP 地址SELECT INET_NTOA(167773449);-- 10.0.5.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- DATABASE()返回默认（当前）数据库名称select database();-- VERSION()返回一个表示 MySQL 服务器版本的字符串select version();-- 使用MySQL命令查看版本C:\Users\NINGMEI&gt;mysql --versionmysql  Ver 14.14 Distrib 5.7.38, for Win64 (x86_64C:\Users\NINGMEI&gt;mysql -Vmysql  Ver 14.14 Distrib 5.7.38, for Win64 (x86_64)-- USER()客户端提供的用户名和主机名select user(); -- root@localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单行函数的特点"><a href="#单行函数的特点" class="headerlink" title="单行函数的特点"></a>单行函数的特点</h2><ul><li><p>以上所讲的函数都是单行函数，也就是以上的函数会<strong>作用在表中每一行数据，一行数据返回一个结果。</strong></p></li><li><p>单行函数<strong>可以在select或where后面</strong></p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select name,char_length(name) from student;select name from student where char_length(name) &#x3D; 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="order-by子句"><a href="#order-by子句" class="headerlink" title="order by子句"></a>order by子句</h2><p>order by …  按照 … 排序</p><p>ascend:(默认)  升序</p><p>descend： 降序</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- student按照年龄升序select * from student order by age;select * from student order by age asc;-- student按照年龄降序select * from student order by age desc;-- student按照年龄升序,sid降序-- sid降序的前提是年龄相同select * from student order by age asc , sid desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="limit-子句"><a href="#limit-子句" class="headerlink" title="limit 子句"></a>limit 子句</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- offset 表示偏移量，跳过多少条数据，省略不写就是0-- row_count 行数LIMIT &#123;[offset,] row_count&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 按照学生的age降序，取出前3条select * from student order by age desc limit 3;-- 按照学生的age降序，从第2条开始获取3条数据select * from student order by age desc limit 1,3;-- 分页查询-- 一共8条数据-- 每页显示3条，分页显示-- limit (页码 - 1) * 每页需要显示的条数 ,每页需要显示的条数select * from student order by age desc limit 0,3; -- 第一页select * from student order by age desc limit 3,3; -- 第二页select * from student order by age desc limit 6,3; -- 第三页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="建表的时候自动更新时间"><a href="#建表的时候自动更新时间" class="headerlink" title="建表的时候自动更新时间"></a>建表的时候自动更新时间</h2><p><strong>注意:</strong> 以后在设计MySQL业务表的时候，无论业务需求中是否要求时间字段，都<strong>建议大家设置一个创建时间和更新时间的字段。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建学生表create table if not exists student (  _id bigint primary key auto_increment,sid int unsigned not null unique,name varchar(12) not null,age int,gender char(6) default &#39;male&#39;,province text,create_time datetime default now(),    -- on update 表示数据更新的时候，时间也会自动更新 【成倍增长】主键和唯一性不能插入update_time datetime default now() on update now());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 复制表结构create table student01 like student;-- 复制表结构和数据create table student02 as select * from student;-- 将查询得到的数据插入表中insert into student01 select * from student;-- insert into ... select 可以做蠕虫复制insert into test select * from test;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="group-by子句"><a href="#group-by子句" class="headerlink" title="group by子句"></a>group by子句</h2><p>group by … 按照…分组</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 按照职位分组-- 使用分组后，select 后面的投影字段需要使用分组字段，不是分组字段作为投影没有意义select * from emp group by job;-- 使用分组字段作为投影字段select job from emp group by job;-- 学生按照省份和性别分组select province,gender from db01.student group by province,gender;-- 使用分组去重 - 小技巧-- 分组的目的：是为了数据的统计分析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="聚合函数-多行函数-x2F-分组函数-aggregate-functions"><a href="#聚合函数-多行函数-x2F-分组函数-aggregate-functions" class="headerlink" title="聚合函数(多行函数&#x2F;分组函数) - aggregate-functions"></a>聚合函数(多行函数&#x2F;分组函数) - aggregate-functions</h2><ul><li>count(字段)&#x2F;count(常量值)&#x2F;count(*)： 返回返回的行数</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 统计员工的总人数-- count(*) 不会忽略null值select count(*) as num from emp;-- count(常量值) 不会忽略null值select count(0) as num from emp;-- count(字段) 会忽略指定字段的null值select count(mgr) as num from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/MySQL.assets/1658373236784.png" alt="1658373236784"></p><ul><li><p>sum(字段)：返回总和</p></li><li><p>max(): 返回最大值</p></li><li><p>min(): 返回最小值</p></li><li><p>avg():返回参数的平均值</p></li><li><p>group_concat():返回一个连接的字符串</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GROUP_CONCAT([DISTINCT] expr [,expr ...]             [ORDER BY &#123;unsigned_integer | col_name | expr&#125;                 [ASC | DESC] [,col_name ...]]             [SEPARATOR str_val])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 统计每种职位的工资总额select job,sum(sal) from emp group by job;-- 统计每种职位的平均工资select job,format(avg(sal),2) from emp group by job;-- 统计每种职位的平均工资select job,sum(sal)&#x2F;count(sal) from emp group by job;-- 统计每种职位的最高工资select job,max(sal) from emp group by job;-- 统计每种职位的最低工资select job,min(sal) from emp group by job;-- 统计每种职位的所有工资 select job,group_concat(sal order by sal desc separator &#39;,&#39;) from emp group by job;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数的特点"><a href="#聚合函数的特点" class="headerlink" title="聚合函数的特点"></a>聚合函数的特点</h3><ol><li><strong>聚合多行数据得到一个结果</strong></li><li><strong>聚合函数不能使用在where后面，只能用在select和having后面</strong></li></ol><h2 id="having-子句"><a href="#having-子句" class="headerlink" title="having 子句"></a>having 子句</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询人数超过2人的职位有哪些select job,count(*) as sum from emp group by job having sum &gt; 2;-- 过滤原始数据再进入内存select * from emp where sal &gt; 1000;-- 进入内存再过滤select * from emp having sal &gt; 1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="where-和-having的区别"><a href="#where-和-having的区别" class="headerlink" title="where 和 having的区别"></a>where 和 having的区别</h2><ol><li><strong>where过滤的是原始数据；having过滤的是内存数据</strong></li><li><strong>where能做的having都能做；反之不成立。但是能用where的优先使用where,可以减少加载到内存的数据</strong></li><li><strong>where后面不能使用别名和聚合函数；having可以</strong></li></ol></li></ul><h2 id="连接查询（多表查询）-SQL92"><a href="#连接查询（多表查询）-SQL92" class="headerlink" title="连接查询（多表查询）- SQL92"></a>连接查询（多表查询）- SQL92</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><ul><li><p><strong>笛卡尔积：表1有m条数据，表2有n条数据，笛卡尔积就是用表1的每一条数据匹配表2中的所有数据，结果就是m*n条数据</strong></p></li><li><p><strong>自连接：就是一张表当成两张表使用</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询员工及其领导select  e1.ename,e2.ename    from emp as e1,emp as e2-- 连接条件where e1.mgr &#x3D; e2.empno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>等值连接：连接条件使用&#x3D;</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询员工和部门名称select e.ename,d.dname   from emp e , dept d where e.deptno &#x3D; d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>不等值连接：连接条件没有使用&#x3D;</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询员工的工资等级select e.ename,e.sal,s.grade   from emp e, salgrade s where e.sal between s.losal and s.hisal;  -- 查询员工和部门名称、工资等级-- 连接条件的数量 &#x3D; 连接的表数量 - 1select e.ename,e.sal,d.dname,s.grade    from emp e,dept d, salgrade swhere e.deptno &#x3D; d.deptno and e.sal between s.losal and s.hisal;-- 查询工资大于1000的员工和部门名称、工资等级select e.ename,e.sal,d.dname,s.grade    from emp e,dept d, salgrade s        -- 过滤条件where e.sal &gt; 1000 -- 连接条件and e.deptno &#x3D; d.deptno and e.sal between s.losal and s.hisal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="内连接的特点"><a href="#内连接的特点" class="headerlink" title="内连接的特点"></a>内连接的特点</h3><ul><li>只会返回匹配成功的数据，没有匹配上的数据不显示</li></ul><p><strong>SQL92语法将连接条件放在where中，但是where还有过滤原始数据的功能，所以代码耦合了。所以出现了sql99语法，在SQL99中将连接条件独立出来了。</strong></p><h2 id="连接查询（多表查询）-SQL99"><a href="#连接查询（多表查询）-SQL99" class="headerlink" title="连接查询（多表查询）- SQL99"></a>连接查询（多表查询）- SQL99</h2><h3 id="内连接-inner-join"><a href="#内连接-inner-join" class="headerlink" title="内连接 - inner join"></a>内连接 - inner join</h3> <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询员工及其领导 -- 自连接select  e1.ename as emp,e2.ename as leader   from emp e1 join emp e2 on e1.mgr &#x3D; e2.empno;-- 查询员工和部门名称 -- 等值连接-- inner可以省略select e.ename,d.dname    from emp e inner join dept don e.deptno &#x3D; d.deptno;-- 查询工资大于1000的员工和部门名称、工资等级select e.ename,e.sal,d.dname,s.grade   from emp e join dept d -- 连接条件 on e.deptno  &#x3D; d.deptno join salgrade s -- 连接条件 on e.sal between s.losal and s.hisal -- 过滤条件 -- where后可以使用表的别名，不能使用字段别名 where e.sal &gt; 1000 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/MySQL.assets/%E8%87%AA%E8%BF%9E%E6%8E%A5.png"></p><p><strong>内连接：只会返回匹配成功的数据，没有匹配上的数据不显示</strong></p><h3 id="外连接-outer-join"><a href="#外连接-outer-join" class="headerlink" title="外连接 - outer join"></a>外连接 - outer join</h3><blockquote><p><strong>外连接区分主表和从表</strong></p><p><strong>特点：主表的数据无论匹配是否成功都会显示，从表的数据匹配成功就显示数据，否则就是null</strong></p><p>left join 左边的表就是主表，右边的表就是从表</p><p>right join 右边的表就是主表，左边的表就是从表</p><p>所以基于以上的规则：<strong>left join  和  right join  通过交换主从表的关系可以达到一样的效果</strong></p></blockquote><h4 id="左外连接-left-join"><a href="#左外连接-left-join" class="headerlink" title="左外连接 - left join"></a>左外连接 - left join</h4><h4 id="右外连接-–-right-join"><a href="#右外连接-–-right-join" class="headerlink" title="右外连接 – right join"></a>右外连接 – right join</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询所有员工及其领导，没有领导的员工也要显示select e1.ename,e2.ename  -- e1是主表，e2是从表  from emp e1 left join emp e2on e1.mgr &#x3D; e2.empno;select e1.ename,e2.ename  -- e1是主表，e2是从表  from emp e2 right join emp e1on e1.mgr &#x3D; e2.empno;-- 查询工资大于1000的员工和部门名称、工资等级select e.ename,e.sal,d.dname,s.grade   from emp e left join dept d -- 连接条件 on e.deptno  &#x3D; d.deptno left join salgrade s -- 连接条件 on e.sal between s.losal and s.hisal -- 过滤条件 where e.sal &gt; 1000 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="交叉连接、自然连接、using子句"><a href="#交叉连接、自然连接、using子句" class="headerlink" title="交叉连接、自然连接、using子句"></a>交叉连接、自然连接、using子句</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 交叉连接：查询出来的结果是两张表中数据的乘积-- 交叉连接也是内连接select e.*,d.* from emp e cross join dept d on e.deptno &#x3D; d.deptno;-- 自然连接-- Natural join基于两个表中的全部同名列建立连接-- 弊端：连接条件不灵活select e.*,d.* from emp e natural join dept d;  -- using子句 -- 如果连接条件的字段名一样，可以使用using子句select e.ename,d.dname    from emp e inner join dept dusing(deptno);select e.ename,d.dname    from emp e inner join dept don e.deptno &#x3D; d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>子查询：就是其他语句中包含的select语句</p><blockquote><p>注意：</p><p>1.子查询必须写在（）内</p><p><strong>2.子查询在from后面当作表使用，必须有别名</strong></p></blockquote><h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查得所有比“CLARK”工资高的员工的信息-- 1. 查询“CLARK”工资select sal from emp where ename &#x3D; &#39;CLARK&#39;;-- 2. 查询所有员工的工资和1中的结果比较select ename,sal from emp where sal &gt; (select sal from emp where ename &#x3D; &#39;CLARK&#39;);-- 查询工资最高的雇员名字和工资。-- 1. 查询最高工资select max(sal) from emp;-- 2. 查询所有员工的工资等于1的结果select * from emp where sal &#x3D; (select max(sal) from emp);-- 查询职务和SCOTT相同，比SCOTT雇佣时间早的雇员信息-- 1. 查询出SCOTT的职务select job from emp where ename &#x3D; &quot;SCOTT&quot;;-- 2. 查询出SCOTT的雇佣时间select hiredate from emp where ename &#x3D; &quot;SCOTT&quot;;-- 3. 查询所有员工职务等于1的结果，雇佣时间小于2的结果select * from emp where job &#x3D; (select job from emp where ename &#x3D; &quot;SCOTT&quot;)and hiredate &lt; (select hiredate from emp where ename &#x3D; &quot;SCOTT&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h3><p>多行子查询返回多行记录</p><p>对多行子查询只能使用多行记录比较运算符</p><p><strong>ALL 和子查询返回的所有值比较</strong></p><p><strong>ANY 和子查询返回的任意一个值比较; SOME是ANY的别名</strong></p><p><strong>IN 等于列表中的任何一个</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询工资低于任意一个&#39;CLERK&#39;的工资的雇员信息。-- 1. 查询出所有&#39;CLERK&#39;的工资select sal from emp where job &#x3D; &#39;CLERK&#39;;-- 2. 查询所有员工的工资低于1中任意一个值select * from emp where sal &lt;any (select sal from emp where job &#x3D; &#39;CLERK&#39;);-- 查询工资低于任意一个&#39;CLERK&#39;的工资的雇员信息。select * from emp where sal &lt; (select max(sal) from emp where job &#x3D; &#39;CLERK&#39;);-- 查询工资比所有的 &#39;SALESMAN&#39;都高的雇员的编号、名字和工资。-- 1. 查询出所有&#39;SALESMAN&#39;的工资select sal from emp where job &#x3D; &#39;SALESMAN&#39;;-- 2. 查询所有员工的工资高于1中所有值select * from emp where sal &gt;all(select sal from emp where job &#x3D; &#39;SALESMAN&#39;);-- 查询部门20中职务同部门10的雇员一样的雇员信息。-- 1.查询部门10中职务有哪些select job from emp where deptno &#x3D; 10;-- 2.查询部门20中职务在1的结果中的select * from emp where deptno &#x3D; 20 and job in (select job from emp where deptno &#x3D; 10);-- 查询在雇员中有哪些人是领导-- 1. 查询出领导的员工编号select mgr from emp;-- 2. 查询员工的编号在1的结果中的select * from emp where empno in (select mgr from emp);-- 找出部门编号为20的所有员工中收入最高的职员-- 1. 查询部门编号为20的所有员工最高工资select max(sal) from emp where deptno &#x3D; 20;-- 2. 查询部门编号为20的所有员工工资等于1的结果的select * from emp where deptno &#x3D; 20 and sal &#x3D; (select max(sal) from emp where deptno &#x3D; 20);-- 找出部门编号为20的所有员工中收入最高的职员select * from empwhere sal &gt;&#x3D; all(select sal from emp where deptno &#x3D; 20)and deptno &#x3D; 20-- 查询每个部门平均薪水的等级-- 1. 查询每个部门平均薪水select avg(sal) from emp group by deptno;-- 2. 将1的结果和工资等级进行连接查询select e.avg,s.grade-- 子查询在from后面当作表使用，必须有别名  from (select avg(sal) as avg from emp group by deptno) e  join salgrade son  e.avg between s.losal and s.hisal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- exists(select语句)： 相关子查询-- 外部的查询是否返回数据取决于 select子查询语句-- select子查询语句有结果，外部查询就会执行返回结果；否则外部查询没有返回结果-- 最终的结果只有外部查询的，内部查询的结果是不会显示的。-- 内部查询在这里仅仅是一个开关select * from emp where exists (select * from emp where sal &gt; 10000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>将多个select语句联合(合并)为一个select语句，涉及的关键字union 和union all。</p><p>union all 不管是否重复，全部合并</p><p>union 如果有重复的，过滤掉重复的</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 将两个select的结果组成一张虚拟表select * from emp where sal &gt; 1000union allselect * from emp where job &#x3D; &#39;SALESMAN&#39;;-- 将两个select的结果组成一张虚拟表，相同的数据去重select * from emp where sal &gt; 1000unionselect * from emp where job &#x3D; &#39;SALESMAN&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="视图-View"><a href="#视图-View" class="headerlink" title="视图 - View"></a>视图 - View</h2><p>视图是从若干基本表和（或）其他视图构造出来的表。也就是说视图也是表，<strong>是一张虚拟表</strong>。</p><p><strong>操作视图的数据其实还是操作的是基本表的数据</strong></p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE    [OR REPLACE]    VIEW view_name [(column_list)]    AS select_statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建视图create view emp_view as select empno,ename,job,mgr,hiredate,deptno from emp;-- 如果不存在就创建；存在就替换create or replace view emp_view as select empno,ename,job,mgr,deptno from emp;-- 操作视图其实操作的是原始数据update emp_view set job &#x3D; &quot;SALESMAN&quot; where ename &#x3D;&quot;smith&quot;;delete from emp where ename &#x3D;&quot;smith&quot;;-- 聚合函数生成的视图不能增加、删除、修改数据create or replace view emp_view01 as select max(sal) as max_sal from emp;update emp_view01 set max_sal &#x3D; 10000;delete from emp_view01;insert into emp_view01 values(10000);-- 删除视图drop view emp_view01;-- 查询当前所有的数据库show databases;-- 查询当前库下的所有表show tables;-- 查询所有表及其类型show full tables;-- 查询指定数据库的所有表show tables from db01;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图的总结"><a href="#视图的总结" class="headerlink" title="视图的总结"></a>视图的总结</h3><ol><li><p><strong>视图对应一个查询语句</strong>；视图是（从若干基本表和（或）其他视图构造出来的）表</p></li><li><p>视图进行查询，添加，修改，删除，其实<strong>就是对背后的表进行相应操作</strong></p></li><li><p><strong>视图是虚拟表，在创建一个视图时，只是存放的视图的定义，也即是动态检索数据的查询语句，而并不存放视图对应的数据</strong></p></li><li><p><strong>视图的好处</strong></p><ul><li>安全 <strong>可以只显示部分行部分列的数据</strong>;可以对添加的数据进行检查；可以设置为只读视图</li><li>操作简单 </li><li>只显示多个数据库表的部分列，部分行的视图</li><li><strong>聚合函数生成的视图不能增加、删除、修改数据</strong></li></ul></li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW ENGINES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/MySQL.assets/image-20220402143925195.png" alt="image-20220402143925195"></p><p><strong>Innodb支持事务和外键；MyISAM不支持事务和外键</strong></p><h2 id="MySQL事务-transaction"><a href="#MySQL事务-transaction" class="headerlink" title="MySQL事务 - transaction"></a>MySQL事务 - transaction</h2><p>事务：完成一个事情需要的一系列步骤(操作)，这些操作要么同时成功，要么同时失败</p><p><strong>在MySQL中DML一条语句就是一个事务，且事务自动提交的。</strong></p><p>在实际开发中有时候我们需要将多条语句变成一个整体，<strong>他们要么都成功，要么都是失败。此时就需要将多条语句做成一个事务。</strong></p><h3 id="事务的基本操作"><a href="#事务的基本操作" class="headerlink" title="事务的基本操作"></a>事务的基本操作</h3><p>1 开启事务</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">start transaction;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2 提交事务</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">commit;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3 回滚事务</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">rollback;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：一旦使用start transaction;开启事务那么自动提交将失效</p><p> 如果所有操作都正常执行使用commit;提交事务</p><p> <strong>当发生异常情况回滚事务，数据(此时为tb_account表)通常回滚到开启事务之前的状态</strong></p><p><strong>无论提交还是回滚事务，事务都会结束。</strong></p><h3 id="转账案例"><a href="#转账案例" class="headerlink" title="转账案例"></a>转账案例</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 张三给李四转100元-- 开启事务start transaction;  update account set money &#x3D; money - 100 where name &#x3D; &#39;zhangsan&#39;;  update account set money &#x3D; money + 100 where name &#x3D; &#39;lisi&#39;;commit; -- 提交事务，事务结束rollback; -- 回滚事务，事务结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事务是用来控制DML语句的。DQL不会修改原始数据，所以DQL不需要事务。</p><h3 id="事务的ACID四大特性"><a href="#事务的ACID四大特性" class="headerlink" title="事务的ACID四大特性"></a>事务的ACID四大特性</h3><ul><li><p>原子性(Atomicity): <strong>事务中的语句不可再分，是一个整体</strong>。要么同时成功，要么同时失败</p></li><li><p>一致性(Consistency)： <strong>事务执行前和事务执行后数据是一致的</strong>。比如转帐前总计金额是1300；转账后总计金额是1300</p></li><li><p>隔离性(Isolation): <strong>事务之间是彼此隔离的，一个事务的操作不会影响另一个事务。但是隔离性受隔离级别的影响。</strong></p></li><li><p>持久性(Durability)：<strong>事务一旦提交就会将数据写入文件持久化存储。</strong></p></li></ul><h3 id="事务的隔离级别-理解"><a href="#事务的隔离级别-理解" class="headerlink" title="事务的隔离级别 - 理解"></a>事务的隔离级别 - 理解</h3><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交（read-committed）</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><ul><li>读未提交（read-uncommitted）<ul><li>事务1修改了数据但是还没有提交，此时事务2就读取到了事务1还没有提交的数据。</li><li><strong>会产生脏读</strong>。解决办法：提升隔离级别</li></ul></li><li>读已提交（read-committed）<ul><li>开启事务1和事务2，事务1和事务2读取到了表中原来的数据，此时事务1修改了表中的数据，并提交事务。<strong>事务2在同一次事务中读到了不同的数据。</strong></li><li>解决了脏读，但是出现了<strong>不可重复读</strong></li><li>不可重复读： 就是在同一次事务中读取到的数据不相同</li><li><strong>如何解决不可重复读:提升隔离级别</strong></li></ul></li><li>可重复读（repeatable-read）<ul><li>开启事务1和事务2,无论事务1是否提交事务,事务2读取到的数据都是一样.</li><li>解决了不可重复读, 但是出现了<strong>幻读</strong></li><li>解决幻读。解决办法：提升隔离级别</li></ul></li><li>串行化（serializable）<ul><li>事务加锁了,事务只能串行执行了.</li><li>安全性最高,效率最低</li></ul></li></ul><p><strong>MySQL默认的隔离级别是可重复读（repeatable-read）</strong></p><ul><li><p>查询隔离级别</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select @@tx_isolation;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置隔离级别</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set session transaction isolation level  READ UNCOMMITTED;set session transaction isolation level  READ COMMITTED;set session transaction isolation level  REPEATABLE READ;set session transaction isolation level  serializable;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="数据库设计原则-三范式"><a href="#数据库设计原则-三范式" class="headerlink" title="数据库设计原则 - 三范式"></a>数据库设计原则 - 三范式</h2><h3 id="概念（NF-x3D-NormalForm）"><a href="#概念（NF-x3D-NormalForm）" class="headerlink" title="概念（NF&#x3D; NormalForm）"></a>概念（NF&#x3D; NormalForm）</h3><p>遵循一定的规则。在关系型数据库中这种规则就称为范式</p><h3 id="三范式的作用"><a href="#三范式的作用" class="headerlink" title="三范式的作用"></a>三范式的作用</h3><ul><li>结构合理</li><li>冗余较小</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>性能降低</p></li><li><p>多表查询比单表查询速度慢</p></li></ul><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p> <strong>必须要有主键，字段不可再分</strong></p><p><img src="/images/MySQL.assets/image-20220402155135097.png" alt="image-20220402155135097"></p><p>以上的表就不满足第一范式，虽然有主键，但是address可以再分。修改如下：</p><p><img src="/images/MySQL.assets/image-20220402155327349.png" alt="image-20220402155327349"></p><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p><strong>在第一范式的基础上，需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。</strong></p><p><strong>（非主键字段必须全部依赖主键字段，而不能部分依赖）</strong></p><p>学号和课程编号作为联合主键</p><p>课程名称只依赖于课程编号，而和学号没有关系</p><p><img src="/images/MySQL.assets/wps1.jpg" alt="img"></p><p>分析以上的设计发现数据冗余。学生只依赖主键中的学号；课程名称只依赖主键中的课程编号。违背第二范式。修改如下：</p><p>学生表</p><p><img src="/images/MySQL.assets/wps2.jpg" alt="img"> </p><p>2，课程表</p><p><img src="/images/MySQL.assets/wps3.jpg" alt="img"> </p><p>3，选课表</p><p><img src="/images/MySQL.assets/wps4.jpg" alt="img"> </p><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p><strong>在第二范式的基础上，确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</strong></p><p><strong>（非主键字段必须直接依赖主键字段，不能间接依赖）</strong></p><p><img src="/images/MySQL.assets/wps5.jpg" alt="img"></p><p>以上数据冗余。班级名称和班级信息直接依赖班级编号，班级编号直接依赖主键学号，所以班级名称和班级信息间接依赖了主键学号。所以违背了第三范式。</p><p>修改如下：</p><p><strong>学生表</strong></p><p><img src="/images/MySQL.assets/wps6.jpg" alt="img"> </p><p><strong>班级表</strong></p><p><img src="/images/MySQL.assets/wps7.jpg" alt="img"></p><h2 id="MySQL用户管理和权限"><a href="#MySQL用户管理和权限" class="headerlink" title="MySQL用户管理和权限"></a>MySQL用户管理和权限</h2><blockquote><p>在MySQL中用户的唯一标识是： <code>&#39;用户名&#39;@&#39;主机名&#39;</code></p><p>用户名：就是创建的用户的名字</p><p>主机名：指定该用户在哪个主机上可以登陆。localhost表示该用户只能在本机登录。<strong>如果想让该用户可以从任意远程主机登陆，可以使用通配符%</strong></p></blockquote><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE USER [IF NOT EXISTS]    user [auth_option] [, user [auth_option]] ...    [password_option | lock_option] ...auth_option: &#123;    IDENTIFIED BY &#39;auth_string&#39;  | IDENTIFIED WITH auth_plugin  | IDENTIFIED WITH auth_plugin BY &#39;auth_string&#39;  | IDENTIFIED WITH auth_plugin AS &#39;auth_string&#39;  | IDENTIFIED BY PASSWORD &#39;auth_string&#39;&#125;password_option: &#123;    PASSWORD EXPIRE  | PASSWORD EXPIRE DEFAULT  | PASSWORD EXPIRE NEVER  | PASSWORD EXPIRE INTERVAL N DAY&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建zhangsan用户-- &#39;zhangsan&#39;@&#39;localhost&#39; 表示张三只能在本地连接数据库create user &#39;zhangsan&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;-- &#39;zhangsan&#39;@&#39;%&#39; 表示张三只能在任意的主机上远程连接数据库-- 无主机登录create user &#39;zhangsan&#39;@&#39;%&#39; identified by &#39;123456&#39;;-- 刷新权限flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER USER [IF EXISTS]    user [auth_option] [, user [auth_option]] ...ALTER USER [IF EXISTS]    USER() IDENTIFIED BY &#39;auth_string&#39;auth_option: &#123;    IDENTIFIED BY &#39;auth_string&#39;  | IDENTIFIED WITH auth_plugin  | IDENTIFIED WITH auth_plugin BY &#39;auth_string&#39;  | IDENTIFIED WITH auth_plugin AS &#39;auth_string&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 修改用户的密码alter user &#39;zhangsan&#39;@&#39;%&#39; identified by &#39;234567&#39;;-- 刷新权限flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP USER [IF EXISTS] user [, user] ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除用户drop user &#39;zhangsan&#39;@&#39;%&#39;;-- 刷新权限flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT    priv_type [(column_list)]      [, priv_type [(column_list)]] ...    ON  priv_level    TO user [auth_option] [, user [auth_option]] ...   priv_level: &#123;  *.*  | db_name.*  | db_name.tbl_name&#125;auth_option: &#123;    IDENTIFIED BY &#39;auth_string&#39;  | IDENTIFIED WITH auth_plugin  | IDENTIFIED WITH auth_plugin BY &#39;auth_string&#39;  | IDENTIFIED WITH auth_plugin AS &#39;auth_string&#39;  | IDENTIFIED BY PASSWORD &#39;auth_string&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 授权-- 给用户&#39;zhangsan&#39;@&#39;%&#39;授予所有库下所有被的所有操作权限grant all on *.* to &#39;zhangsan&#39;@&#39;%&#39; identified by &#39;234567&#39;;-- 刷新权限flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取消授权"><a href="#取消授权" class="headerlink" title="取消授权"></a>取消授权</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">REVOKE    priv_type [(column_list)]      [, priv_type [(column_list)]] ...    ON [object_type] priv_level    FROM user [, user] ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 取消授权revoke all on *.* from &#39;zhangsan&#39;@&#39;%&#39; ;-- 刷新权限flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h2><p>索引（index）: MySQL存储引擎为了<strong>提高查询效率</strong>而设计的一种数据结构。</p><p>索引相当于 字典中的索引目录。</p><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><ul><li><p>主键索引：primary key</p></li><li><p>唯一索引:  unique</p></li><li><p>普通索引（单列索引，单值索引）: 就是给一个字段添加索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_name    ON tbl_name (key_part,...)    [index_option]    [algorithm_option | lock_option] ...key_part:    col_name [(length)] [ASC | DESC]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建表的时候，创建索引create table test01(  id int primary key,name char(10),age tinyint unsigned,gender char(6),-- 创建普通索引key(name));-- 表已经存在，创建索引-- 给test表的name字段创建索引create index index_name on test (name);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>复合索引：多个字段联合作为索引字段</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table test02(  id int primary key,name char(10),age tinyint unsigned,address char(10),gender char(6),-- 创建复合索引key(name,age,address));insert into test02 values(1,&#39;zhangsan&#39;,20,&#39;beijing&#39;,&#39;male&#39;);insert into test02 values(5,&#39;lisi&#39;,21,&#39;tianjin&#39;,&#39;male&#39;);insert into test02 values(2,&#39;wangwu&#39;,22,&#39;beijing&#39;,&#39;male&#39;);insert into test02 values(4,&#39;zhaosi&#39;,20,&#39;shanghai&#39;,&#39;male&#39;);insert into test02 values(3,&#39;lily&#39;,23,&#39;chengdu&#39;,&#39;female&#39;);-- 复合索引原则：-- 最左前缀匹配-- MySQL为了更好的使用索引，所以在使用索引字段的时候会调整顺序explain select * from test02 where name &#x3D; &#39;lisi&#39;; -- okexplain select * from test02 where name &#x3D; &#39;lisi&#39; and age &#x3D; 22; -- okexplain select * from test02 where name &#x3D; &#39;lisi&#39; and age &#x3D; 22 and address &#x3D; &#39;chengdu&#39;; -- ok explain select * from test02 where name &#x3D; &#39;lisi&#39; and address &#x3D; &#39;chengdu&#39;; -- okexplain select * from test02 where name &#x3D; &#39;lisi&#39; and address &#x3D; &#39;chengdu&#39; and age &#x3D; 22; -- okexplain select * from test02 where address &#x3D; &#39;chengdu&#39; and name &#x3D; &#39;lisi&#39; and age &#x3D; 22 ; -- okexplain select * from test02 where age &#x3D; 22 and address &#x3D; &#39;chengdu&#39; and name &#x3D; &#39;lisi&#39;;-- 因为没有使用最左的索引字段，所以索引失效explain select * from test02 where age &#x3D; 22 and address &#x3D; &#39;chengdu&#39;; -- not ok-- % 开头索引会失效explain select * from test02 where name like &#39;%lisi&#39; and address &#x3D; &#39;chengdu&#39;; -- not ok-- _ 开头索引会失效explain select * from test02 where name like &#39;_lisi&#39; and address &#x3D; &#39;chengdu&#39;; -- not ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>全文索引（MySQL的全文索引基本不用）- 了解</p></li></ul><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP INDEX index_name ON tbl_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>提升了查询效率</li><li>减少了磁盘的IO</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>增加了磁盘空间</li><li>降低了DML语句的效率。因为增加、删除、修改数据都会影响索引文件的变动。Innodb中的索引使用B+Tree的数据结构，索引数据发生变化后，B+Tree为了保证平衡，会进行树的自旋转，所以会影响性能。</li></ul><h3 id="创建索引的注意点"><a href="#创建索引的注意点" class="headerlink" title="创建索引的注意点"></a>创建索引的注意点</h3><ul><li>经常更新的数据不宜使用索引。</li><li>值范围太小的字段不宜使用索引。比如：性别字段</li><li>Blob和Text字段不使用索引</li><li>数据量低于1000 行数据不建议使用索引</li><li>经常出现在where中的字段推荐使用索引</li><li>经常出现在group by中的字段推荐使用索引</li><li>经常出现在order by中的字段推荐使用索引</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="/2022/08/18/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E8%80%81%E6%9D%9C%E7%89%88/"/>
      <url>/2022/08/18/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E8%80%81%E6%9D%9C%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1><center>MySQL学习笔记老杜版</center><hr><h2 id="MySQL-8-18"><a href="#MySQL-8-18" class="headerlink" title="MySQL[8.18]"></a>MySQL[8.18]</h2><h2 id="DAY01"><a href="#DAY01" class="headerlink" title="DAY01"></a>DAY01</h2><h3 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h3><ol><li><p><strong>什么是数据库？什么是数据库管理系统？什么是SQL？他们之间的关系是什么？</strong></p><ul><li><p>**数据库(DB)**：按照一定格式存储数据的一些文件的组合。存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p></li><li><p><strong>数据库管理系统（DBMS）</strong>：数据库管理系统是专门用来管理数据库中数据的，数据库管理系统可以对数据库当中的数据进行增删查改。</p><p>–&gt; 常见的数据库管理系统：</p><p>MySQL、Oracle、MS、SqlServer、DB2、sybase等。。。</p></li><li><p><strong>SQL（结构化查询语言）</strong>：程序员需要学习SQL语句，程序员通过编写SQL语句，然后DBMS负责执行SQL语句，最终来完成数据库中数据的增删改查操作。</p></li><li><p><strong>DBAS（数据库应用程序</strong>）：在数据库管理系统的基础上，使用数据库管理系统的语法，开发的直接面对最终用户的应用程序。</p></li><li><p><strong>DBA（数据库管理员）</strong>：数据库管理者</p></li><li><p><strong>数据库系统 &#x3D; 数据库 + 数据库管理系统 + 数据库应用程序 + 最终用户</strong></p><p><img src="/images/MySQL_images/DB.png"></p></li></ul></li><li><p><strong>数据库的发展阶段</strong></p><ul><li><p>网状数据库</p></li><li><p>层次数据库</p></li><li><p>关系数据库</p></li><li><p><strong>采用关系【二维表】结构来存储和管理数据。</strong></p></li><li><p>采用结构化查询语言(sql) 作为客户端数据库服务器间沟通的桥梁。</p></li></ul></li><li><p><strong>三者之间的关系？</strong></p><ul><li><em>DBMS –&gt; 执行 –&gt; SQL –&gt; 操作 –&gt; DB</em>*</li></ul></li><li><p><strong>查看计算机上的服务，查看MySQL的服务在哪儿？</strong></p><ul><li>计算机 –&gt; 右键 –&gt; 服务和应用程序 –&gt; 服务 –&gt; 找mysql服务</li><li>MySQL的服务，默认是“启动”的状态，只有启动了mysql才能使用。</li><li>默认情况下是“自动”启动，自动启动表示下一次重启操作系统的时候自动启动该服务。</li><li>可以在服务上右击：启动、重启服务、停止服务…</li><li>还可以改变服务的默认配置：服务上点击右键，属性，然后可以选择启动方式：自动（延迟启动）、自动、手动、禁用</li></ul></li><li><p><strong>在Windows操作系统中，怎么使用命令来启动和关闭mysql服务呢？</strong></p><p>- </p>  <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">net stop 服务名称;net start 服务名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <strong>–&gt; 其它服务的启停都可以采用以上的命令。</strong></p></li><li><p><strong>mysql安装后，服务启动后，怎么使用客户端登录mysql数据库？</strong></p><ul><li><p>使用bin目录下的mysql.exe命令来连接mysql数据库服务器</p></li><li><p>本地登录（显示编写密码的形式）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p123456 #-u --&gt; 用户 | -p --&gt; 密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>隐式编写密码：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p******<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>mysql常用命令：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">exit  #退出mysqlshow databases;  #查看mysql中有哪些数据库。注意：以分号结尾，分号是英文的分号use XXX;  #使用某个数据库  --&gt; mysql默认自带四个数据库Create database XXX;  #创建某个数据库show tables; #查看某个数据库下有哪些表select version();  #查看当前数据库的版本号select database();  #查看当前使用的是那个数据库\c  #用来终止一条命令的输入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：mysql不见”;”不执行，”;”代表结束，可以换行写。</strong></p></li><li><p><strong>数据库中最基本的单元是表：table</strong></p><ul><li><p>为什么用表来存储数据呢？</p><p>–&gt; <strong>数据库中是以表格的形式表示数据的，表比较直观。</strong></p></li><li><p>任何一张表都有行和列：</p><ul><li>行（row）：被称为数据 &#x2F; 记录。</li><li>列（column）：被称为字段。</li></ul></li><li><p>每一个字段都有：字段名、数据类型、约束等属性。</p></li><li><p>约束：约束也有很多，其中一个叫做唯一性约束，这种约束添加之后，该字段中的数据不能重复。</p></li></ul></li><li><p>关于SQL语句的分类</p><ul><li><p><strong>DQL：数据查询语言（凡是带有select关键字的都是查询语句）</strong></p><p>–&gt; slect…</p></li><li><p><strong>DML：数据操作语言（凡是对表当中的数据进行增删改的都是DML）</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert  #增delete  #删update  #改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个主要是操作表中的数据data。</p></li><li><p><strong>DDL：数据定义语言（凡是带有create\drop\alter的都是DDL）</strong></p></li><li><p>DDL主要操作的是表的结构，不是表中的数据。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create  #新建，等同于增drop  #删除alter  #修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个增删改和DML不同，这个主要是对表结构进行操作。</p></li><li><p><strong>TCL：事务控制语言（包括：事务提交 commit；事物回滚 rollback）</strong></p></li><li><p><strong>DCL：数据控制语言（授权 grant；撤销权限 revoke…）</strong></p></li></ul></li><li><p>导入数据库表</p></li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">source #绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   注意：路径不要有中文！</p><ol start="11"><li><p>怎么查看表中的数据？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 表名;  #从XX表中查询所有数据； * --&gt; 表示所有<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>不看表中的数据，只看表的结构。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">desc 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>–&gt; varchar：就是java中的String</strong></p></li></ol><hr><h3 id="默认几个库的简单说明"><a href="#默认几个库的简单说明" class="headerlink" title="默认几个库的简单说明"></a>默认几个库的简单说明</h3><ol><li><p><strong>information_schema</strong></p><ul><li>information_schema数据库是MySQL自带的，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。</li><li>在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件</li></ul></li><li><p><strong>mysql</strong></p><ul><li>这个是mysql的核心数据库，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。不可以删除，如果对mysql不是很了解，也不要轻易修改这个数据库里面的表信息。</li></ul></li><li><p><strong>performance_schema</strong></p><ul><li>mysql 5.5 版本 新增了一个性能优化的引擎： PERFORMANCE_SCHEMA这个功能默认是关闭的：</li><li>需要设置参数： performance_schema 才可以启动该功能，这个参数是静态参数，只能写在my.cnf 中 不能动态修改。</li><li>windows里面叫 my.ini文件 C:\ProgramData\MySQL\MySQL Server 5.7 【默认在这个目录】linux里面叫my.cnf文件</li></ul></li><li><p><strong>sys</strong></p><ul><li><p>通过这个库可以快速的了解系统的元数据信息</p><p>这个库确实可以方便DBA发现数据库的很多信息，解决性能瓶颈都提供了巨大帮助</p></li></ul></li><li><p><strong>注</strong>：以上几个库都不能删除（重点）</p></li></ol><hr><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ol><li><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建数据库有两种方式：-- 第一种 语法如下-- 注意：&lt;&gt;里面的内容都是可变的-- create database &lt;数据库名称&gt;;-- 例如create database whpowernode;-- 第二种 语法如下-- if not exists 创建之前会做check操作，如果数据库名称在MySQL数据库管理系统中不存在才创建-- charset default 为数据库指定默认编码-- create database if not exists &lt;数据库名称&gt;  default charset  &lt;数据库字符集编码&gt;;-- 例如：create database if not exists whpowernode default charset UTF8;create database if not exists whpowernode default charset UTF8MB4;-- UTF8和UTF8MB4区别？-- 绝大多数情况下使用UTF8编码的字符集一个汉字占据3个字符，但是有极少数情况下一个汉字占据4个字符-- 占据4个字符的汉字不能使用UTF8存储，必须使用UTF8MB4存储-- UTF8MB4字符集编码表示一个汉字最多占据4个字符  M Most  B Byte UTF8MB4 它可以存储表情符号-- 注意：创建数据库指定的字符集编码必须跟MySQL数据库里面的my.ini字符集编码保持一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改数据库密码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1使用mysql数据库use mysql;2修改密码命令(将root用户的密码修改为123456)update mysql.user set authentication_string&#x3D;PASSWORD(&#39;123456&#39;) where user&#x3D;&#39;root;3刷新flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><ol><li><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE USER &#39;username&#39;@&#39;host&#39; IDENTIFIED BY &#39;password&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>说明：</p><ul><li>username：你将创建的用户名</li><li>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%</li><li>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</li></ul></li><li><p>eg：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建dog用户密码为123456 并且限制只能在本机上登录访问CREATE USER &#39;dog&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;#创建pig用户密码为123456 并且限制只能在指定的ip（192.168.1.101）登录访问CREATE USER &#39;pig&#39;@&#39;192.168.1.101_&#39; IDENDIFIED BY &#39;123456&#39;;#创建pig用户密码为123456 并且可以通过任意远程主机登录访问CREATE USER &#39;pig&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;#创建pig用户输入任意密码即可登录并且可以通过任意远程主机登录访问CREATE USER &#39;pig&#39;@&#39;%&#39; IDENTIFIED BY &#39;&#39;;#创建pig用户没有密码并且可以通过任意远程主机登录访问CREATE USER &#39;pig&#39;@&#39;%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h3 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权"></a>给用户授权</h3><ol><li><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>说明：</p><ul><li>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL</li><li>databasename：数据库名</li><li>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用 * 表示。</li></ul></li><li><p>eg：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#给pig用户授权 给 test库里面 的user表 查询和插入权限并且可以通过任意主机访问GRANT SELECT, INSERT ON test.user TO &#39;pig&#39;@&#39;%&#39;;#给pig用户授权 给所有库的所有表 增删改查的权限并且可以通过任意主机访问GRANT ALL ON *.* TO &#39;pig&#39;@&#39;%&#39;; #给pig用户授权 给 maindataplus库里面 的所有表 增删改查权限并且可以通过任意主机访问GRANT ALL ON maindataplus.* TO &#39;pig&#39;@&#39;%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>注：用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT privileges ON databasename.tablename TO &#39;username&#39;@&#39;host&#39; WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h3 id="DDL数据定义语言"><a href="#DDL数据定义语言" class="headerlink" title="DDL数据定义语言"></a>DDL数据定义语言</h3><ul><li>全称Data Definition Language，主要用于创建和删除结构。<ol><li>创建结构相关操作：表、视图、索引、数据</li><li>删除结构相关操作：表、视图、索引、数据</li><li>改变结构相关操作：表、视图、索引、数据</li></ol></li></ul><h3 id="DML数据操纵语言"><a href="#DML数据操纵语言" class="headerlink" title="DML数据操纵语言"></a>DML数据操纵语言</h3><ul><li>DML对表和视图进行插入、删除、更新相关操作，全称Data Manipulation Language。<ol><li>插入数据关键字：insert</li><li>删除数据关键字：delete</li><li>修改数据关键字：update</li></ol></li></ul><h3 id="DQL数据查询语言"><a href="#DQL数据查询语言" class="headerlink" title="DQL数据查询语言"></a>DQL数据查询语言</h3><ul><li>对表和视图进行操作，全称： Data Query Language<ol><li>DQL关键字 select</li></ol></li></ul><h3 id="TCL事务控制语言"><a href="#TCL事务控制语言" class="headerlink" title="TCL事务控制语言"></a>TCL事务控制语言</h3><ul><li>TCL全称Transaction Control Language，使用事务管理DML操作。<ol><li>提交事务关键字 commit;</li><li>回滚事务关键字 rollback;</li><li>开启事务关键字 start transaction;</li></ol></li></ul><h3 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><table><thead><tr><th align="left">数据类型</th><th align="left">大小</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">tinyint</td><td align="left">8bit</td><td align="left">范围(-128~127)</td></tr><tr><td align="left">smallint</td><td align="left">16bit</td><td align="left">范围(-32768~32767)</td></tr><tr><td align="left">mediumint</td><td align="left">24bit</td><td align="left">范围(-8388608~8388607)</td></tr><tr><td align="left">int</td><td align="left">32bit</td><td align="left">范围(-2147483648~2147483647)&#x3D;&#x3D;（对应java中的类型int 或 Integer 记住）&#x3D;&#x3D;</td></tr><tr><td align="left">bigint</td><td align="left">64bit</td><td align="left">范围(+-9.22*10的18次方)&#x3D;&#x3D;（对应java中的类型long或 Long记住）&#x3D;&#x3D;</td></tr></tbody></table><h4 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h4><table><thead><tr><th align="left">数据类型</th><th align="left">大小</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">float(m,d)</td><td align="left">32bit</td><td align="left">单精度浮点型，m总个数，d小数位</td></tr><tr><td align="left">double(m,d)</td><td align="left">64bit</td><td align="left">双精度浮点型，m总个数，d小数位</td></tr></tbody></table><h4 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h4><ul><li>浮点型在数据库中存放的是近似值，而定点类型在数据库中存放的是精确值。 decimal(m,d) 参数m是总个数，d是小数位。</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><table><thead><tr><th align="left">数据类型</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">char(n)</td><td align="left">固定长度，最多255个字符，索引效率级高，必须在括号里定义长度，可以有默认值</td></tr><tr><td align="left">varchar(n)</td><td align="left">可变长度，最多65535个字符&#x3D;&#x3D;（对应java中的类型String或 char记住）&#x3D;&#x3D;</td></tr><tr><td align="left">tinytext</td><td align="left">可变长度，最多255个字符</td></tr><tr><td align="left">text</td><td align="left">可变长度，最多65535个字符</td></tr><tr><td align="left">mediumtext</td><td align="left">可变长度，最多2的24次方-1个字符</td></tr><tr><td align="left">longtext</td><td align="left">可变长度，最多2的32次方-1个字符</td></tr><tr><td align="left">json</td><td align="left">mysql5.7新增加的数据类型，用来存放json数据</td></tr></tbody></table><ul><li><strong>char、varchar、text区别 （理解）</strong><ul><li><strong>char</strong>：存储定长数据很方便，CHAR字段上的索引效率级高，必须在括号里定义长度，可以有默认值，比如定义char(10)，那么不论你存储的数据是否达到了10个字节，都要占去10个字节的空间（自动用空格填充），且在检索的时候后面的空格会隐藏掉，所以检索出来的数据需要记得用什么trim之类的函数去过滤空格。</li><li><strong>varchar</strong>：存储变长数据，但存储效率没有CHAR高，必须在括号里定义长度，可以有默认值。保存数据的时候，不进行空格自动填充，而且如果数据存在空格时，当值保存和检索时尾部的空格仍会保留。另外，varchar类型的实际长度是它的值的实际长度+1，这一个字节用于保存实际使用了多大的长度。</li><li><strong>text</strong>：存储可变长度的非Unicode数据，最大长度为2^31-1个字符。text列不能有默认值，存储或检索过程中，不存在大小写转换，后面如果指定长度，不会报错误，但是这个长度是不起作用的，意思就是你插入数据的时候，超过你指定的长度还是可以正常插入。</li></ul></li><li>实战结论：<ol><li>经常变化的字段用varchar；</li><li>知道固定长度的用char；</li><li>超过255字节的只能用varchar或者text；</li><li>能用varchar的地方不用text；</li><li>能够用数字类型的字段尽量选择数字类型而不用字符串类型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接回逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了；</li><li>同一张表出现多个大字段，能合并时尽量合并，不能合并时考虑分表</li></ol></li></ul><h4 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h4><table><thead><tr><th align="left">数据类型</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">date</td><td align="left">日期 ‘2021-1-1’（对应java中的类Date 记住）</td></tr><tr><td align="left">time</td><td align="left">时间 ‘12:25:36’</td></tr><tr><td align="left">datetime</td><td align="left">日期时间 ‘2021-1-1 22:06:44’ （对应java中的类Date 记住）</td></tr><tr><td align="left">timestamp</td><td align="left">自动存储记录修改时间</td></tr></tbody></table><h4 id="逻辑类型"><a href="#逻辑类型" class="headerlink" title="逻辑类型"></a>逻辑类型</h4><ul><li>（适用于：性别、状态、标记等只有两个值的）<ul><li>Logic类型使用bit表示，它只能存储两个值0或者1</li></ul></li></ul><h4 id="数据类型的属性"><a href="#数据类型的属性" class="headerlink" title="数据类型的属性"></a>数据类型的属性</h4><table><thead><tr><th align="left">关键字</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">NULL</td><td align="left">数据列可包含NULL值</td></tr><tr><td align="left">NOT NULL</td><td align="left">数据列不允许包含NULL值</td></tr><tr><td align="left">DEFAULT</td><td align="left">默认值</td></tr><tr><td align="left">PRIMARY KEY</td><td align="left">主键</td></tr><tr><td align="left">AUTO_INCREMENT</td><td align="left">自动递增，适用于整数类型</td></tr><tr><td align="left">UNSIGNED</td><td align="left">无符号</td></tr><tr><td align="left">CHARACTER SET name</td><td align="left">指定一个字符集</td></tr></tbody></table><hr><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><ol><li><p><strong>查询一个字段</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段名 from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：select 和 from都是关键字。</p><p>​          字段名和表明都是标识符。</p><p>强调：</p><p>​         对于SQL语句来说，是通用的，所有的SQL语句以”;”结尾。</p><p>​        另外SQL语句不区分大小写，都可以。</p></li><li><p><strong>查询两个字段或多个字段</strong></p><ul><li>使用 “,” 隔开</li></ul></li><li><p><strong>查询所有字段</strong></p><ul><li><p>第一种方式：可以把每个字段都写上</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select a,b,c...from tablename;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第二种方式：可以使用 * </p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from tablename;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方式的缺点：</p><ol><li>效率低；</li><li>可读性差；</li><li>在实际开发中不建议，自己想在dos窗口中快速看一看全表数据可以采用这种方式。</li></ol></li></ul></li><li><p><strong>给查询的列起别名</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno,dname as deptname from dept;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用as关键字起别名。</p><ul><li><p>注意：只是将显示的查询结果列名显示为deptname,原表列名还是叫：dname</p></li><li><p>记住：select语句是永远都不会进行修改操作的。（因为只负责查询）</p></li><li><p>as 关键字可以省略：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno,dname deptname from dept;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>假设起别名的时候，名名里面有空格，怎么办？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno,dname dept name from dept;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>DBMS看到这样的语句，进行SQL语句的编译，不符合语法，编译报错。</p></li><li><p>解决方案：【双引号也可以】</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno,dname &#39;dept name&#39; from dept;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：在所有的数据库当中，字符串统一使用单引号括起来，单引号是标准，双引号在oracle数据库中用不了。但是在mysql中可以使用。</strong>【单引号是标准，双引号不是标准】</p></li></ul></li><li><p><strong>计算员工的年薪  【sal * 12】</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename, sal * 12 as &#39;年薪&#39; from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>字段可以使用数学表达式；</li><li>别名是中文，用单引号括起来。</li></ul></li></ol><hr><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><ol><li><p>什么是条件查询？</p><ul><li><p>不是将表中所有数据都查出来，是查询出来符合条件的。</p></li><li><p>语法格式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 字段,字段...from表名where条件;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>条件举例</strong></p><ul><li><p><strong>&#x3D; 等于</strong>：eg –&gt; 查询薪资等于800的员工姓名和编号</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,empno from emp where sal &#x3D; 800;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>&lt;&gt; 或 !&#x3D; 不等于</strong>：eg –&gt; 查询薪资不等于800的员工姓名和编号</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,empno from emp where sal &lt;&gt; 800;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>**between … and … 两个值之间，等同于 &gt;&#x3D; and &lt;&#x3D;** ：eg –&gt; 查询薪资在2450和3000之间的员工信息，包括2450和3000</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where sal between 2450 and 3000;  #第一种方式select * from emp where sal &gt;&#x3D; 2450 and sal &lt;&#x3D; 3000;  #第二种方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：使用between and 的时候，必须遵循左小右大。between and 是闭区间，包括两端的值。</p></li><li><p><strong>is null 为null（is not null 不为空）</strong>：eg –&gt; 查询哪些员工的津贴 &#x2F; 补助为Null？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where comm is null;  #is nullselect * from emp where comm is not null;  #is not null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：在数据库当中null不能使用等号进行衡量。需要使用is null，因为数据库中的null代表什么也没有，它不是一个值，所以不能使用等号衡量。</strong>【0 和 null 是两个不同的概念】</p></li><li><p><strong>and 并且</strong>：eg –&gt; 查询工作岗位是MANAGER并且工资大于2500的员工信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where job &#x3D; &#39;manager&#39; and sal &gt; 2500;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>or 或者</strong>：查询工作岗位是MANAGER和SALESMAN的员工</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where job &#x3D; &#39;manager&#39; or job &#x3D; &#39;salesman&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>and 和 or同时出现的话，有优先级问题吗？</strong></p><ul><li>eg：查询工资大于2500，并且部门编号为10或20部门的员工</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where sal &gt; 2500 and deptno &#x3D; 10 or deptno &#x3D; 20;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分析以上语句的问题：</p><ul><li><p>and 优先级比 or 高；</p></li><li><p>以上语句会先执行and，然后执行or；</p></li><li><p>以上这个语句表示什么含义？</p><p>–&gt; 找出工资大于2500并且部门编号为10的员工，或者20部门所有员工找出来。</p></li><li><p>正确写法：</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where sal &gt; 500 and (deptno &#x3D; 10 or deptno &#x3D; 20);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>and 和 or 同时出现，and 优先级较高。如果想让 or 先执行，需要加”小括号”，以后在开发中，如果不确定优先级，就加小括号就行了。</strong></p></li><li><p><strong>in 包含，相当于多个 or （not in 不在这个范围中）</strong>：eg –&gt; 查询工作岗位是MANAGER和SALESMAN的员工</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where job in(&#39;manager&#39;,&#39;salesman&#39;);  #in# 表示不在这几个值当中的数据select * from emp where job not in(&#39;manager&#39;,&#39;salesman&#39;);  #not in<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：in 不是一个区间，in 后面跟的是具体的值。</p></li><li><p><strong>not 可以取非，主要用在 is 或 in 中</strong>：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">is nullis not nullinnot in<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>like 称为模糊查询，支持 % 或下划线匹配。</strong></p><ul><li><p>% 匹配任意个字符。</p></li><li><p>_ 下划线：一个下划线只匹配一个字符。</p></li><li><p>eg:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#找出名字中含有o的select * from emp where ename like &#39;%o%&#39;;#找出名字以T结尾的select * from emp where ename like &#39;%T&#39;;#找出第二个字母是A的select * from emp where ename like &#39;_A%&#39;;#找出第三个字母是R的select * from emp where ename like &#39;__R%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>找出名字中有”_”的？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># select * from emp where ename like &#39;%\_%&#39;; --&gt; 错误的 _ 默认是匹配单个任意字符select * from emp where ename like &#39;%\_%&#39;;  # --&gt; 正确# \ 转义字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ol><hr><h3 id="select语句加条件的作用"><a href="#select语句加条件的作用" class="headerlink" title="select语句加条件的作用"></a>select语句加条件的作用</h3><ul><li><strong>加条件只是为了避免笛卡尔积现象，只是为了查询出有效的组合记录。匹配的次数一次都没有少。</strong></li></ul><hr><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ol><li><p><strong>sql 语句默认是升序的。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,sal from emp order by sal;  #默认是升序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>desc 降序。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,sal from emp order by sal desc;  #降序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>asc 指定升序</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,sal from emp order by sal asc;  #指定升序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>多个字段排序</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查询员工名字和薪资，要求按照薪资升序，如果薪资一样的话再按照名字升序排序 select ename,sal from emp order by sal asc, ename desc; # sal 在前，起主导，只有 sal 相等的时候，才会考虑启用 ename 排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>了解：根据字段的位置也可以排序</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,sal from emp order by 2; # 2 表示第二列，第二列是 sal# 按照查询结果的第2列排序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>了解一下，不建议在开发中这样写，因为不健壮。因为列的顺序很容易发生改变，列顺序修改之后，2 就没用了。</strong></p></li><li><p><strong>综合案例：</strong></p><ul><li>找出工资在1250到3000之间的员工信息，要求按照薪资降序排序</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where sal between 1250 and 3000 order by sal desc;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>关键字顺序不能变</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select...from...where...order by  # 排序语句总是在最后执行...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>以上语句的执行顺序必须掌握</strong></p><ol><li><strong>第一步：from</strong></li><li><strong>第二步：where</strong></li><li><strong>第三步：select</strong></li><li><strong>order by（排序总是在最后执行）</strong></li></ol></li></ul></li></ol><hr><h3 id="数据处理函数【单行处理函数】"><a href="#数据处理函数【单行处理函数】" class="headerlink" title="数据处理函数【单行处理函数】"></a>数据处理函数【单行处理函数】</h3><ol><li><p><strong>数据处理函数又被称为单行处理函数</strong></p><ul><li><strong>单行处理函数</strong>的特点：一个输入对应一个输出。</li><li><strong>多行处理函数</strong>的特点：多个输入，对应1个输出！（和单行处理函数相对）。</li></ul></li><li><p><strong>单行处理函数常见的有哪些？</strong></p><ul><li><p><strong>Lower 转换小写：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select lower(ename) as ename from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–&gt; eg：14个输入，最后还是14个输出。这就是单行处理函数的特点。</p></li><li><p><strong>upper 转换大写：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select upper(sname) as name from t_student;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>substr 取子串【 substr (被截取的字符串, 起始下标, 截取的长度) 】：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select substr(ename,1,1) as name from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：起始下标从 1 开始，没有 0；</p><p>eg：找出员工名字第一个字母是A的员工信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where ename like &#39;A%&#39;;  # 第一种方式select * from emp where substr(ename,1,1) &#x3D; &#39;A&#39;;  # 第二种方式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>concat() 函数进行字符串的拼接</strong></p><p>eg：首字母大写</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select concat(upper(substr(sname,1,1)),substr(sname,2,length(sname)-1)) from t_student;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>length 取长度：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select length(ename) enamelength from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>trim 去空格：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where ename &#x3D; trim(&#39;   KING&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>str_to_date 将字符串varchar类型转换成date类型：</strong></p><p>–&gt; 语法格式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">str_to_date(&#39;字符日期&#39;,&#39;日期格式&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># mysql的日期格式%Y 年%m 月%d 日%h 时%i 分%s 秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>str_to_date函数通常使用在插入insert方面，因为插入的时候需要一个日期类型的数据，需要通过该函数将字符串转换成date。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># eg:insert into t_user(id,name,birth) values(1,&#39;zhangsan&#39;,str_to_date(&#39;01-10-1990&#39;,&#39;%d-%m-%Y&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>好消息：</p><p>​    如果提供的日期字符串时这个格式，str_to_date函数就不需要了！！！</p><p>%Y-%m-%d</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into t_user(id,name,birth) values(2,&#39;lisi&#39;,&#39;1990-10-01&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>date_ format 将date数据类型转换成具有一定格式的varchar字符串类型：</strong></p><p><img src="/images/MySQL_images/date_format.png"></p></li><li><p><strong>format 设置千分位：</strong></p><p><img src="/images/MySQL_images/format%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E5%AD%97.png"></p></li><li><p><strong>case…when…then…when…then…else…end</strong></p></li><li><p><strong>md5(str):</strong> <strong>为字符串算出一个MD5 128比特校验和，改值以32位十六进制数字的二进制字符串形式返回</strong></p><p><strong>不可逆，对同一明文，加密字符串相同。可以采用加密两次的方式将用户在客户端输入的密码在数据库中找到对应的密文。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select md5(123456) from dual;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>round 四舍五入：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select round(1236.5315,0) as result from emp;  #保留到整数位select round(1236.5315,1) as result from emp;  #保留到1个小数select round(1236.5315,2) as result from emp;  #保留到2个小数select round(1236.5315,-1) as result from emp;  #保留到十位  --&gt; 1240#  -2 &#x2F; -3...以此类推<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>rand() 生成随机数：</strong></p><p>eg：100以内的随机数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select round(rand()*100,0) as result from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/MySQL_images/100%E4%BB%A5%E5%86%85%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0.png"></p></li><li><p><strong>ifnull 可以将 null 转换成一个具体值：</strong></p><p>ifnull 是空处理函数。专门处理空的。</p><p><strong>在所有数据库当中，只要有 NULL 参与的数学运算，最终结果就是NULL。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,sal + comm as salcomm from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/MySQL_images/isnull01.png"></p><p><strong>注意：NULL只要参与运算，最终结果一定是NULL。为了避免这个现象，需要使用 ifnull 函数。</strong></p><p><strong>ifnull 函数用法：ifnull(数据, 被当作那个值)</strong></p><p>如果 “数据” 为 NULL 的时候，把这个数据结构当作那个值。</p><p>补助为NULL的时候，将补助当作0：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,(sal + ifnull(comm,0)) as salcomm from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/MySQL_images/isnull02.png"></p></li></ul></li><li><p><strong>select 后面直接跟“字面量 &#x2F; 字面值”会有什么效果？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select &#39;abc&#39; num from emp; #数据库会根据emp有多少条记录而产生多少个&quot;abc&quot;字段值select 1000 as num from emp;  # 1000也是被当作一个字面量 &#x2F; 字面值select abc num from emp; # 报错：因为会把abc当作一个字段的名字，去emp表中找abc字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/MySQL_images/select%E5%90%8E%E7%9B%B4%E6%8E%A5%E8%B7%9F%E5%AD%97%E9%9D%A2%E9%87%8F%E6%88%96%E5%AD%97%E9%9D%A2%E5%80%BC.png"></p><p><strong>结论：select后面可以跟某个表的字段名（可以等同看做变量名），也可以跟着字面量 &#x2F; 字面值（数据）。</strong></p></li></ol><hr><h3 id="分组函数（多行处理函数）"><a href="#分组函数（多行处理函数）" class="headerlink" title="分组函数（多行处理函数）"></a>分组函数（多行处理函数）</h3><ol><li><p><strong>多行处理函数的特点：输入多行，最终输出一行。</strong></p></li><li><p>5个：</p><ul><li><p><strong>count 计数</strong>：eg –&gt; 计算员工数量</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(ename);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>sum 求和</strong>：eg –&gt; 计算工资和</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select sum(sal) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>avg 平均值</strong>：计算平均工资</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select avg(sal) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>14个工资全都加起来，然后除以14。</p></li><li><p><strong>max 最大值</strong>：eg –&gt; 找出最高工资</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select max(sal) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>min 最小值</strong>：eg –&gt; 求最低工资</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select min(sal) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>注意：</p><ul><li><strong>分组函数在使用的时候必须先进行分组，然后才能用。如果你没有对数据进行分组，整张表默认为一组。</strong></li></ul></li><li><p><strong>分组函数在使用的时候需要注意哪些?</strong></p><ol><li><p><strong>分组函数自动忽略NULL，你不需要提前对NULL进行处理。</strong>【五个都忽略】</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select sum(comm) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>分组函数中 count(*) 和 count(具体字段) 有什么区别？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(*) from emp;  select count(comm) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/MySQL_images/count01.png"></p><p><strong>count(具体字段)<strong>：表示</strong>统计该字段下所有不为NULL的元素的总数。</strong></p><p><strong>count(*)<strong>：</strong>统计表当中的总行数。</strong>（只要有一行数据 count 则 ++ ），因为每一行记录不可能都为NULL，一行数据中有一列不为NULL，则这行数据就是有效的。</p></li><li><p>分组函数不能直接使用在 where 子句中。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 找出比最低工资高的员工信息select ename, sal from emp where sal &gt; min(sal); # 错误# 表面上看着没问题，其实是错误的ERROR 1111 (HY000): Invalid use of group function<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>因为分组函数在使用的时候必须先分组之后才能使用。</strong></p></li><li><p>所有的分组函数可以组合起来一起用。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select sum(sal),min(sal),max(sal),avg(sal),count(*) from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ol><hr><h3 id="分组查询（重要）"><a href="#分组查询（重要）" class="headerlink" title="分组查询（重要）"></a>分组查询（重要）</h3><ol><li><p>什么是分组查询？</p><ul><li><p>在实际的应用中，可能有这样的需求，需要先进行分组，然后对每一组的数据进行操作。这个时候我们需要使用分组查询，怎么进行分组查询呢？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select...from...group by...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eg：计算<strong>每个部门</strong>的工资和？</p><p>​        找出<strong>每个工作岗位</strong>的平均薪资？</p><p>​        找出<strong>每个工作岗位</strong>的最高薪资？</p></li></ul></li><li><p><strong>这个没有分组，为啥sum()函数可以用呢？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select sum(sal) from emp;# 这个没有分组，为啥sum()函数可以用呢？# 因为select在group by 之后执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>找出每个工作岗位的工资和</strong></p><ul><li><p>实现思路：按照工作岗位分组，然后对工资求和。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select job,sum(sal) from emp group by job;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>以上这个语句的执行顺序</strong></p><ol><li>先从emp表中查询数据；</li><li>根据job字段进行分组；</li><li>然后对每一组的数据进行sum(sal)。</li></ol></li><li><p>判断：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename, job, sum(sal) from emp group by job;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上语句在Mysql中可以执行，但是毫无意义。</p><p>以上语句在oracle中执行报错，因为oracle的语法比mysql的语法严格。(mysql语法相对松散一些)</p></li><li><p><strong>重点结论：</strong></p><p><strong>在一条select语句中，如果有group by语句，select后面只能跟：参加分组的字段，以及分组函数。其他的一律不能跟。</strong></p></li></ul></li><li><p><strong>eg：找出”每个部门，不同工作岗位”的最高薪资？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno,job max(sal) from emp group by deptno,job;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用having可以对分完组之后的数据进一步过滤。having不能单独使用，having不能代替where，having必须和group by 联合使用。</p><p>eg1：找出每个部门组稿薪资，要求显示最高薪资大于3000的</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select  deptno, ename, max(sal) from emp group by deptno having max(sal) &gt; 3000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>思考：以上的sql语句执行效率是不是低？</p><ul><li><p>比较低，实际上可以先将大于3000的都找出来，然后再分组。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno, max(sal) from emp where sal &gt; 3000 group by deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>优化策略：where 和 having ，优先选择 where，where实在完成不了的，再选择having。</strong></p></li></ul></li><li><p>where没办法的？</p><ul><li><p>找出每个部门平均薪资，要求显示平均薪资高于2500的。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno, avg(sal) from emp group by deptno having avg(sal) &gt; 2500; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这里无法使用where来进行age(sal)的条件过滤，只能用having</strong></p></li></ul></li></ol><hr><h3 id="单表查询总结"><a href="#单表查询总结" class="headerlink" title="单表查询总结"></a>单表查询总结</h3><p><strong>整体执行顺序：from &gt;&gt; where &gt;&gt; group by … having &gt;&gt; 聚合函数(分组函数) &gt;&gt; select &gt;&gt; order by</strong></p><ol><li><p><strong>from</strong>：先确定从哪个表中取数据，所以最先执行from tab。存在多表连接，from tab1，tab2。可以对表加别名，方便后面的引用。</p></li><li><p><strong>where语句</strong>：是对条件加以限定，如果没有需要限定的，那就写成where 1&#x3D;1，表示总为true，无附加条件。</p></li><li><p><strong>分组语句</strong>，比如按照员工姓名分组，要就行分组的字段，必须出现在select中，否则就会报错。having是和group by配合使用的，用来作条件限定。</p></li><li><p>常用的<strong>聚合函数</strong>有max，min， count，sum，聚合函数的执行在group by之后，having之前。如果在where中写聚合函数，就会出错</p></li><li><p>选出要<strong>查找</strong>的字段，如果全选可以select *。</p></li><li><p><strong>排序语句</strong>，默认为升序排列。如果要降序排列，就写成order by [XX] desc。order by语句在最后执行，只有select选出要查找的字段，才能进行排序。</p></li><li><p><strong>从某张表中查询数据 –&gt; 先经过where条件筛选出有价值的数据 –&gt; 对这些有价值的数据进行分组 – &gt; 分组之后可以使用having继续筛选 –&gt; select查询出来 –&gt; 最后排序输出。</strong></p></li><li><p><strong>综合案例：</strong></p><ul><li><p>找出每个岗位的平均薪资，要求显示平均薪资大于1500的，除manager岗位之外，要求按照平均薪资降序排序。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno, avg(sal) from emp where job &lt;&gt; &#39;manager&#39; group by deptno having avg(sal) &gt; 1500 order by avg(sal) desc;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><hr><h2 id="DAY02"><a href="#DAY02" class="headerlink" title="DAY02"></a>DAY02</h2><h3 id="把查询结果去除重复记录"><a href="#把查询结果去除重复记录" class="headerlink" title="把查询结果去除重复记录"></a>把查询结果去除重复记录</h3><p><strong>注意：原表数据不会被修改，只是查询结果去重。</strong></p><ol><li><p>去重需要使用一个关键字：<strong>distinct</strong>【<strong>只能出现在所有字段的最前方</strong>】</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select distinct job form emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>distinct出现在job,deptnmo两个字段之前，表示两个字段联合起来去重。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select distinct job,deptno from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>统计一下工作岗位的数量</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(distinct job) from empl;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的distinct可以用，去除重复值的统计</p></li></ol><hr><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ol><li><p><strong>什么是连接查询？</strong></p><ul><li>从一张表中单独查询，称为单表查询。</li><li>emp表和dept表联合起来查询数据，从emp表中取员工名字，从dept表中取部门名字。这种跨表查询，多张表联合起来查询数据，被称为连接查询。</li></ul></li><li><p><strong>连接查询的分类</strong></p><ul><li><p><strong>根据语法的年代分类：</strong></p><ul><li>SQL92：1992年的时候出现的语法；</li><li>SQL99：1999年的时候出现的语法；</li></ul></li><li><p><strong>根据表连接的方式分类：</strong></p><ul><li><p><strong>内连接：</strong></p><p>​    等值连接：</p><p>​    非等值连接：</p><p>​    自连接：</p></li><li><p><strong>外连接：</strong></p><p>​    左外连接（左连接）：</p><p>​    右外连接（右连接）：</p></li><li><p><strong>全连接：</strong>取出两张表的交集以及两张表剩下的记录条数。</p></li></ul></li></ul></li><li><p><strong>当两张表进行连接查询，没有任何条件限制的时候，【最终查询结果条数，是两张表条数的乘积】，这种现象被称为：笛卡尔积现象。（笛卡尔发现的，这是一个数学现象。）</strong></p></li><li><p><strong>怎么避免笛卡尔积现象？</strong></p><ul><li><p>连接时加条件，满足这个条件的记录被筛选出来。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查询每个员工所在部门名称，显示员工名和部门名# 表起别名。很重要，效率问题。select e.ename,d.dname from emp e, dept d where e.deptno &#x3D; d.deptno; # SQL92的语法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>思考：最终查询的结果条数是14条，，但是匹配的过程中，匹配的次数减少了吗？</strong></p><p>​        <strong>–&gt; 没有，还是两张表条数的乘积，只不过进行了四选一。次数没有减少。</strong></p></li><li><p><strong>注意：通过笛卡尔积现象得出，表的连接此参数越多效率越低，尽量避免表的连接次数。</strong></p></li></ul></li></ol><hr><h3 id="内连接之等值连接"><a href="#内连接之等值连接" class="headerlink" title="内连接之等值连接"></a>内连接之等值连接</h3><p><strong>案例：查询每个员工所在部门名称，显示员工名和部门名。</strong></p><p><strong>SQL92语法：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select e.name,d.dname from emp e, dept d where e.deptno &#x3D; d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sql92的缺点：<strong>结构不清晰，表的连接条件，和后期进一步筛选的条件，都放到了where后面。</strong></p><p><strong>SQL99语法：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select e.name,d.dname from emp e join dept d on e.deptno &#x3D; d.deptno; # 条件是一个等量，所以是一个等值连接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>sql99优点：<strong>表连接的条件是独立的，连接之后，如果还需要进一步筛选，再往后继续添加where。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># sql99语法select...froma[inner]join  # 带着inner 可读性好，一眼看出来是内连接bona和b的连接条件where筛选条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="内连接之非等值连接"><a href="#内连接之非等值连接" class="headerlink" title="内连接之非等值连接"></a>内连接之非等值连接</h3><p><strong>案例：找出每个员工的薪资等级，要求显示员工名、薪资、薪资等级？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select e.ename, d.dname from emp e join salgrade s on e.sal between s.losal and s.hisal;# 条件不是一个等量关系，称为非等值连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="内连接之自连接"><a href="#内连接之自连接" class="headerlink" title="内连接之自连接"></a>内连接之自连接</h3><p><strong>案例：查询员工的上级领导，要求显示员工名和对应的领导名？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select a.ename, b.ename from emp a join emp b on a.empno &#x3D; b.empno; # 员工的领导编号 &#x3D; 领导的员工编号。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>13条记录，没有KING。【内连接】</p><p><strong>以上就是内连接中的：自连接，技巧：一张表看作两张表。</strong></p><p><strong>内连接：（A和B连接，AB两张表没有主次关系，平等的。）</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select a.ename, b.ename from emp a join emp b on a.empno &#x3D; b.empno;# 内连接的特点：完全能够匹配上这个条件的数据查询出来。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><ol><li><p><strong>外连接（右外连接）：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># outer 是可以省略的，带着可读性强select a.ename, b.ename from emp a right join emp b on a.empno &#x3D; b.empno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>right 代表什么：表示将 join 关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。</strong></li><li><strong>在外连接当中，两张表连接，产生了主次关系。</strong></li></ul></li><li><p><strong>外连接（左外连接）：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select a.ename, b.ename from emp a left join emp b on a.empno &#x3D; b.empno;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>带有right的是右外连接，又叫做右连接。</strong></li><li><strong>带有left的是左外连接，又叫做左连接。</strong></li><li><strong>任何一个右连接都有左连接的写法。</strong></li><li><strong>任何一个左连接都有右连接的写法。</strong></li></ul></li><li><p><strong>思考：外连接的查询结果条数一定是 &gt;&#x3D; 内连接的查询结果条数？</strong></p><ul><li>正确。</li></ul></li><li><p>案例：查询每个员工的上级领导，要求显示所有员工的名字和领导名？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select a.ename, b.dname from emp a left join emp b on a.mgr &#x3D; b.empno;# 左边的是员工表，员工表中KING的领导是Null,使用左连接就不会与内连接一样忽略KING，此时输出14条数据。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>三张表，四张表怎么连接？</strong></p><ul><li><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select...fromajoinbona和b的连接条件joincon a和c的连接条件 right join d   on   a和d的连接条件 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>一条SQL中内连接和外连接可以混合。都可以出现！</strong></p></li><li><p><strong>案例：找出每个员工的部门名称以及工资等级，要求显示员工名、部门名、薪资、薪资等级？</strong></p><p><img src="/images/MySQL_images/%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A501.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select e.ename, e.sal, d.dname, s.grade from emp e join dept d on e.deptno &#x3D; d.deptno join salgrade s on e.sal between s.losal and s.hisal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>案例：找出每个员工的部门名称以及工资等级，还有上级领导，要求显示员工名、领导名、部门名、薪资、薪资等级？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select e.ename, e.sal, d.dname, s.grade, l.ename &#39;领导&#39; from emp e join dept d on e.deptno &#x3D; d.deptno join salgrade s on e.sal between s.losal and s.hisalleft join emp l on e.mgr &#x3D; l.empno;  # 左连接，这样才能让KING显示出来，结果才会正确<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h3 id="连接查询SQL99"><a href="#连接查询SQL99" class="headerlink" title="连接查询SQL99"></a>连接查询SQL99</h3><h4 id="SQL语法概述"><a href="#SQL语法概述" class="headerlink" title="SQL语法概述"></a>SQL语法概述</h4><ul><li><strong>SQL92</strong>的语法规则的缺点：<ol><li>语句过滤条件和表连接的条件都放到了where子句中 。</li><li>当条件过多时，联结条件多，过滤条件多时，就容易造成混淆</li></ol></li><li><strong>SQL99</strong>修正了整个缺点，把联结条件，过滤条件分开来，包括以下新的TABLE JOIN的句法结构：<ol><li>交叉连接（Cross join）</li><li>自然连接（Natural join）</li><li>使用Using子句建立连接</li><li>使用On子句建立连接</li><li>连接（ Outer join ）<ul><li>内连接INNER JOIN</li><li>左连接LEFT JOIN</li><li>右连接RIGHT JOIN</li></ul></li></ol></li></ul><h4 id="SQL99语法"><a href="#SQL99语法" class="headerlink" title="SQL99语法"></a>SQL99语法</h4><ul><li><p>语法</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">select 字段列表 from table1 [cross join table2] |     # 1：交叉连接[natural join table2] |                              # 2：自然连接[join table2 using (字段名)] |                        # 3：using子句[join table2 on (table1.column_name &#x3D; table2.column_name)] |  # 4：on子句[(left | right | full outer) join table2on (table1.column_name &#x3D; table2.column_name)]; # 5：左&#x2F;右&#x2F;满外连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h4><ul><li><p>Cross join 产生了一个笛卡尔集，其效果等同于在两个表进行连接时未使用WHERE子句限定连接条件;</p></li><li><p>可以使用where条件从笛卡尔集中选出满足条件的记录。</p></li><li><p>举例：</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">select dept.deptno,dname,ename from dept cross join emp; 等价于select dept.deptno,dname,ename from dept,emp; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h4><ul><li><p>Natural join基于两个表中的全部同名列建立连接</p></li><li><p>从两个表中选出同名列的值均对应相等的所有行</p></li><li><p>如果两个表中同名列的数据类型不同，则出错</p></li><li><p>不允许在参照列上使用表名或者别名作为前缀</p></li><li><p>自然连接的结果不保留重复的属性</p></li><li><p>举例：</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">select empno, ename, sal, deptno, dname from emp natural join dept<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="using子句"><a href="#using子句" class="headerlink" title="using子句"></a>using子句</h4><ul><li><p>如果不希望参照被连接表的所有同名列进行等值连接，自然连接将无法满足要求，可以在连接时使用USING子句来设置用于等值连接的列（参照列）名。</p></li><li><p>using子句引用的列在sql任何地方不能使用表名或者别名做前缀</p></li><li><p>举例：</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">select e.ename,e.sal,deptno,d. dname from emp e join dept d using(deptno) where deptno&#x3D;10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="on子句"><a href="#on子句" class="headerlink" title="on子句"></a>on子句</h4><ul><li><p>自然连接的条件是基于表中所有同名列的等值连接，为了设置任意的连接条件或者指定连接的列，需要使用ON子句</p></li><li><p>连接条件与其它的查询条件分开书写</p></li><li><p>使用ON 子句使查询语句更容易理解</p></li><li><p>举例：</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL"># 1.select ename,dname from emp inner join  dept on emp.deptno&#x3D;dept.deptno where  emp.deptno&#x3D;30;# 2.select empno, ename, sal, emp.deptno, dname from emp inner  join dept on (emp.deptno &#x3D; dept.deptno and sal&gt;5000);# 3.select * from dept, emp where dept.deptno &#x3D; emp.deptno and sal&gt;5000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第三种是sql92里面的查询方法，和上面两种等价</p></li><li><p>等列名</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">select emp.empno,emp.ename,dept.dname,dept.loc from emp join dept on emp.deptno &#x3D; dept.deptno<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>不等列名</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">select  emp.empno,emp.ename, s.grade  from emp join salgrade s on emp.sal &gt; s.losal and emp.sal &lt; s.hisal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="外连接-1"><a href="#外连接-1" class="headerlink" title="外连接"></a>外连接</h4><ul><li><p>左外连接</p><ul><li><p>两个表在连接过程中除返回满足连接条件的行以外，还返回左表中不满足条件的行，这种连接称为左外联接。</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">select deptno, dname,empno,ename from dept left join emp using(deptno);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>右外连接</p><ul><li><p>两个表在连接过程中除返回满足连接条件的行以外，还返回右表中不满足条件的行，这种连接称为右外联接。</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">select deptno, dname,empno,ename from dept right join emp using(deptno);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>满外连接</p><ul><li><p>两个表在连接过程中除返回满足连接条件的行以外，还返回两个表中不满足条件的所有行，这种连接称为满外联接。</p><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">select deptno, dname,empno,ename from dept full join emp using(deptno);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>内连接</p><ul><li>在SQL99规范中，内连接只返回满足连接条件的数据。</li></ul></li></ul><hr><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ol><li><p>什么是子查询？</p><ul><li>select语句中嵌套select语句，被嵌套的select语句称为子查询。</li></ul></li><li><p>子查询都可以出现在哪儿呢？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select..(select).from..(select).where..(select).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>where子句中的子查询</p><ul><li><p><strong>案例：找出比最低工资高的员工姓名和工资？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,sal from emp where sal &gt; (select min(sal) from emp);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>from子句中的子查询</p><ul><li><p><strong>注意：from后面的子查询，可以将子查询的查询结果当作一张临时表。（技巧）</strong></p></li><li><p>案例：找出每个岗位的平均工资的薪资等级。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select t.*, s.grade from (select job, avg(sal) jobavgsal from emp group by job) t join  salgrade son t.jobavgsal between s.losal and s.hisal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>select后面出现的子查询（这个内容不需要掌握，了解即可！！！）</strong></p><ul><li><p>案例：<strong>找出每个员工的部门名称，要求显示员工名，部门名</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select e.ename, (select d.dname from dept d where e.deptno &#x3D; d.deptno) from emp e;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：对于select后面的子查询来说，这个子查询只能一次返回1条结果，多于1条，就报错了！</strong></p></li></ul></li></ol><hr><h3 id="union合并查询结果集"><a href="#union合并查询结果集" class="headerlink" title="union合并查询结果集"></a>union合并查询结果集</h3><ol><li><p>案例：查询工作岗位是MANAGER和SALESMAN的员工</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where job &#x3D; &#39;manager&#39; union select * from emp where job &#x3D; &#39;salesman&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>union的效率要高一些。对于表连接来说，每连接一次新表，则匹配的次数满足笛卡尔积，成倍的翻。。。但是union可以减少匹配的次数。在减少匹配次数的情况下，还可以完成两个结果集的拼接。</strong></p><pre class="line-numbers language-none"><code class="language-none">a 连接 b 连接 ca 10条记录b 10条记录c 10条记录匹配次数是：1000a 连接 b 一个结果：10 * 10 --&gt; 100次a 连接 c 一个结果：10 * 10 --&gt; 100次使用union的话是：100次 + 100次 &#x3D; 200次。（union把乘法变成了加法运算）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意事项：union在进行结果集合并的时候，要求两个结果集的列数相同，数据类型也要相同。</strong></p></li></ul></li></ol><hr><h3 id="limit（非常重要）"><a href="#limit（非常重要）" class="headerlink" title="limit（非常重要）"></a>limit（非常重要）</h3><ol><li><p><strong>limit 作用：将查询结果集的一部分取出来。通常使用在分页查询中。</strong></p><ul><li>百度默认：一页显示10条记录。</li><li>分页的作用是为了提高用户的体验，因为一次全部都查出来，用户体验差，可以一页一页的看。</li></ul></li><li><p>limit 怎么用？</p><ul><li><p>完整用法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">limit startIndex,length  #startIndex 是起始下标【从0开始】，length是长度# 缺省用法：limit 5; #这是取前5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>eg1：按照薪资降序，取出排名在前5的员工？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select ename,sal from emporder by sal desclimit 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：mysql 中 limit 在 order by 之后执行！</strong></p></li><li><p>eg2：取出工资排名在[ 3 - 5 ]名的员工</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp order by sal desc limit 2,3; # 2表示起始位置从下标2开始，就是第三条记录，3表示长度<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>分页</p><p><img src="/images/MySQL_images/limit%E5%88%86%E9%A1%B5.png"></p><ul><li><strong>limit 分页 公式：(查询第几页 - 1) * 每页显示几条数据</strong></li></ul></li></ol><hr><h3 id="表的创建（建表）"><a href="#表的创建（建表）" class="headerlink" title="表的创建（建表）"></a>表的创建（建表）</h3><ol><li><p><strong>语法（建表属于DDL语句，DDL包括：create &#x2F; drop &#x2F; alter）：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名(字段1 数据类型, 字段2 数据类型...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>表名和字段名都属于标识符。</li></ul></li><li><p>关于Mysql中的数据类型</p><ul><li><p><strong>varchar（最长255）</strong></p><p><strong>可变长度的字符串</strong>，节省空间，会根据实际的数据长度动态分配空间。</p><p>优点：节省空间；</p><p>缺点：需要动态分配空间，速度慢。</p></li><li><p><strong>char（最长255）</strong></p><p><strong>定长字符串</strong>，不管实际的数据长度是多少，分配固定长度的空间去存储数据。</p><p>优点：不需要动态分配空间，速度快；</p><p>缺点：使用不当可能会导致空间的浪费。</p><p>eg：姓名字段因为每个人的名字产长度不同，所以选择 varchar；</p><p>​        性别字段因为性别是固定长度的字符串，所以选择char。</p></li><li><p><strong>int（最长11）</strong></p><p>整数型，等同于java的<strong>int</strong>。</p></li><li><p><strong>bigint</strong></p><p>长整型，等同于Java中的 <strong>long</strong>。</p></li><li><p>double</p><p>双精度浮点型数据</p></li><li><p>date</p><p><strong>短日期类型“：只包括年月日信息。【默认格式：%Y-%m-%d】</strong></p></li><li><p>datetime</p><p><strong>长日期类型：包括年月日时分秒信息。【默认格式：%Y-%m-%d %h:%i:%s】</strong></p><p><strong>在mysql中怎么获取系统当前时间？–&gt; now()函数，并且获取的时间带有：时分秒信息！是datetime类型的。</strong></p></li></ul><p>​    </p><ul><li><p><strong>clob</strong></p><p><strong>字符大对象，最多可以存储4G的字符串。</strong>比如存储一篇文章、说明。超过255个字符都要采用clob字符大对象来存储。（Character Large Object）</p></li><li><p><strong>blob</strong></p><p><strong>二进制大对象，(Binary Large Object)专门用来存储图片、声音、视频等流媒体数据。</strong>往BLOG类型的字段上插入数据的时候，例如插入一个图片、视频等。【需要使用IO流才行】</p></li></ul></li></ol><hr><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>语法</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table t_student;  # 当这张表不存在的时候会报错！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>eg：如果这张表存在的话，删除</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table if exists t_student;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h3 id="插入数据-insert-（DML）"><a href="#插入数据-insert-（DML）" class="headerlink" title="插入数据 insert （DML）"></a>插入数据 insert （DML）</h3><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名(字段名1, 字段名2, 字段名3...) value(值1, 值2, 值3...);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li><strong>字段名和值要一一对应。【数量要对应，类型要对应】</strong></li><li><strong>insert 语句但凡是执行成功了，那么必然会多一条记录。没有给其它字段指定值的话，默认值是null。</strong></li><li><strong>前面的字段名省略的话，等于都写上了，所以值也要都写上。</strong></li><li><strong>数据库中的命名规范：所有的标识符都是全部小写，单词和单词之间使用下划线进行衔接。</strong></li></ul><hr><h3 id="修改update-DML"><a href="#修改update-DML" class="headerlink" title="修改update(DML)"></a>修改update(DML)</h3><p>语法格式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update 表名 set 字段名1 &#x3D; 值1，字段名2 &#x3D; 值2，字段名3 &#x3D; 值3...where 条件；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：没有条件限制会导致所有数据全部更新。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># eg：更新所有update t_user set name &#x3D; &#39;abc&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="删除数据-delete-DML"><a href="#删除数据-delete-DML" class="headerlink" title="删除数据 delete (DML)"></a>删除数据 delete (DML)</h3><p>语法格式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete from 表名 where 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：没有条件，整张表的数据会全部删除！</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># eg：删除所有delete from t_user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="DAY03"><a href="#DAY03" class="headerlink" title="DAY03"></a>DAY03</h2><h3 id="insert-语句一次可以插入多条记录"><a href="#insert-语句一次可以插入多条记录" class="headerlink" title="insert 语句一次可以插入多条记录"></a>insert 语句一次可以插入多条记录</h3><ul><li><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into t_user(字段名1, 字段名2) values(),(),();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h3 id="快速创建表【了解】"><a href="#快速创建表【了解】" class="headerlink" title="快速创建表【了解】"></a>快速创建表【了解】</h3><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table emp2 as select * from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原理：</p><ul><li><strong>将一个查询结果当作一张表新建；</strong></li><li><strong>这个可以完成表的快速复制；</strong></li><li><strong>表创建出来，同时表中的数据页存在了。</strong></li></ul><hr><h3 id="将查询结果插入一张表中，Insert相关的！【很少用，了解】"><a href="#将查询结果插入一张表中，Insert相关的！【很少用，了解】" class="headerlink" title="将查询结果插入一张表中，Insert相关的！【很少用，了解】"></a>将查询结果插入一张表中，Insert相关的！【很少用，了解】</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into dept_bak select * from dept;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="快速删除表中的数据【truncate比较重要】"><a href="#快速删除表中的数据【truncate比较重要】" class="headerlink" title="快速删除表中的数据【truncate比较重要】"></a>快速删除表中的数据【truncate比较重要】</h3><ol><li><p>删除dept_bak表中的数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete from dept_bak; #这种删除数据的方式比较慢<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>delete语句删除数据的原理？【delete属于DML语句】</strong></p><ul><li>表中的数据被删除了，但是这个数据在硬盘上的真实存储空间不会被释放。</li><li>缺点：删除效率比较低。</li><li>优点：支持回滚，可以再恢复数据。</li></ul></li><li><p><strong>truncate语句删除数据的原理？</strong></p><ul><li><p>这种删除效率比较高，表被一次截断，物理删除。</p></li><li><p>优点：快速。</p></li><li><p>缺点：不支持回滚。</p></li><li><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">truncate table dept_bak; #这种操作属于DDL操作。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>针对于很大的表，上亿条记录：</strong></p><p>删除的时候，使用delete，也许需要执行1个小时才能删除完，效率较低。可以选择使用truncate删除表中的数据，只需要不到1秒的时间就删除结束。效率较高。但是使用truncate之前，必须仔细询问客户是否真的要删除，并警告删除之后不可恢复！</p></li></ul></li></ol><hr><h3 id="删除表-1"><a href="#删除表-1" class="headerlink" title="删除表"></a>删除表</h3><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="对表结构的增删改"><a href="#对表结构的增删改" class="headerlink" title="对表结构的增删改"></a>对表结构的增删改</h3><ol><li>是什么时对表结构的修改？<ul><li>添加一个字段，删除一个字段，修改一个字段。</li></ul></li><li>对表结构的修改需要使用：alter –&gt; DDL语句<ul><li>DDL包括：create 、 drop 、alter</li></ul></li><li>在实际开发中，需求一旦确定之后，表一旦设计好之后，很少对表结构修改。因为开发进行中的时候，修改表结构成本比较高，修改表的结构，对应的java代码就需要进行大量的修改。成本时比较高的。这个责任应该由设计人员来承担。</li><li>真的需要修改表结构，可以使用工具。</li><li>修改表结构的操作是不需要写到java程序中的。</li></ol><hr><h3 id="约束【重点】"><a href="#约束【重点】" class="headerlink" title="约束【重点】"></a>约束【重点】</h3><ol><li><p><strong>什么是约束？</strong></p><ul><li>约束对应的英语单词：constraint</li><li>在创建表的时候，我们可以给表中的字段加上一些约束，来保证这个表中数据的完整性、有效性。</li><li>约束的作用就是为了保证：表中的数据有效！</li></ul></li><li><p><strong>约束包括哪些？</strong></p><ul><li><p><strong>非空约束：not null</strong></p><p>–&gt; not null约束的字段不能为NULL;</p><p>–&gt; 只有列级约束，没有表级约束</p><hr></li><li><p><strong>唯一约束：unique</strong></p><p>–&gt; unique约束的字段不能重复，但是可以为NULL;</p><p><img src="/images/MySQL_images/unique%E7%BA%A6%E6%9D%9F.png"></p><p><strong>什么时候使用表级约束呢？</strong></p><p>​    <strong>–&gt; 需要给多个字段联合起来添加某一个约束的时候，需要使用表级约束。</strong></p><p><strong>在mysql中，如果一个字段同时被not null和unique约束的话，该字段自动变成主键字段。（注意：oracle中不一样！）</strong></p><hr></li><li><p><strong>主键约束：primary key（简称PK）【重要】</strong></p><p><strong>主键约束的相关术语？</strong></p><p>​    –&gt; 主键约束：就是一种约束；</p><p>​    –&gt; 主键字段：该字段上添加了主键约束，这样的字段叫做：主键字段；</p><p>​    –&gt; 主键值：主键字段中的每一个值都叫做：主键值。</p><p><strong>什么是主键？有什么作用？</strong></p><p>​    主键值是每一行记录的唯一标识；主键值是每一行记录的身份证号。</p><p>​    任何一张表都应该有主键，没有主键，表无效。</p><p>主键的特征：not null + unique（主键值不能是NULL，同时也不能重复！）</p><p><strong>主键约束的使用：【单一主键】</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table t_vip(id int primary key, name varchar(255)); # 列级约束<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用表级约束来添加主键：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table t_vip(id int, name varchar(255),primary key(id)); # 表级约束<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>表级约束主要是给多个字段联合起来添加约束。【复合主键】</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table t_vip(id int, name varchar(255),email varchar(255),primary key(id,name));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在实际开发中不建议使用复合主键，建议使用单一主键！</strong></p><p>​    –&gt; 因为主键值存在的意义就是这行记录的身份证号，只要意义达到即可，单一主键可以做到，复合主键比较复杂，不建议使用！</p><p><strong>主键值建议使用：</strong></p><p>int、bigint、char等类型。</p><p>不建议使用：varchar来做主键。主键值一般都是数字，一般都是定长的。</p><p><strong>主键除了单一主键和复合主键之外，还可以这样进行分类：</strong></p><p>​    自然主键：主键值是一个自然数，和业务没关系。</p><p>​    业务主键：主键值和业务紧密关联，例如拿银行卡账号做主键值，这就是业务主键。</p><p>在实际开发中使用自然主键比较多，因为主键只要做到不重复就行，不需要有意义。业务主键不好，因为主键一旦和业务挂钩，那么当业务发生变动的时候，可能会影响到主键值，所以业务主键不建议使用。尽量使用自然主键。</p><p><strong>在mysql中，有一种机制，可以帮助我们自动维护一个主键值。</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table t_vip(id int primary key auto increment, name varchar(255));# auto increment 表示自增，从1开始，以1递增<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/MySQL_images/%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E9%95%BF.png"></p><hr></li><li><p><strong>外键约束：foreign key（简称FK）【重要】</strong></p><p><strong>外键约束涉及到的相关术语：</strong></p><p>​    外键约束：一种约束(foreign key)；</p><p>​    外键字段：该字段上添加了外键约束；</p><p>​    外键值：外键字段当中的每一个值。</p><p><strong>注意：</strong></p><p>​    <strong>删除表的顺序：先删子，再删父；</strong></p><p>​    <strong>创建表的顺序：先创建父，再创建子；</strong></p><p>​    <strong>插入数据的顺序：先插入父，再插入子。</strong></p><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 主表create table t_class(classno int primary key,classname varchar(255));# 子表create table t_student(no int primary key auto_increment, name varchar(255), cno int, foreign key(cno) references t_class(classno));# 外键约束 引用 主表的具有唯一约束的字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考：子表中的外键引用的父表中的某个字段，被引用的这个字段必须是主键吗？</strong></p><p>​    –&gt; <strong>不一定是主键，但至少具有unique约束。</strong></p><p><strong>外键可以为NULL吗？</strong></p><p>​    –&gt; 可以。</p><hr></li><li><p>检查约束：check（mysql不支持，oracle支持）</p></li></ul></li><li><p><strong>技巧：</strong></p><ul><li><p>XXXX.sql 这种文件被称为sql脚本文件。其中编写了大量的sql语句。我们执行sql脚本文件的时候，该文件中所有的sql语句会全部执行。批量的执行sql语句，可以使用sql脚本文件。</p></li><li><p><strong>在mysql中如何执行sql脚本？</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">source D:\存放.sql文件的路径\XXXX.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>实际工作中，执行这个脚本文件电脑上的数据库数据就有了。</p></li></ul></li></ol><hr><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ol><li><p><strong>什么是存储引擎？</strong></p><p>存储引擎是mysql中特有的一个术语，其他数据库中没有。（oracle中有，但是不叫这个名字），<strong>实际上存储引擎是一个表存储 &#x2F; 组织数据的方式。</strong>不同的存储引擎，表存储数据的方式不同。</p></li><li><p>怎么给表添加、指定”存储引擎”呢？</p><p>可以在建表的时候给表指定存储引擎。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table t_student(id varchar(255), no int(11))engine &#x3D; innodb default charset &#x3D; utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>建表的时候可以在最后小括号的”)”的右边使用：</strong></p><p>​    engine来指定存储引擎；</p><p>​    charset来指定这张表的字符编码方式。</p><p><strong>结论：</strong></p><p>​    mysql默认的存储引擎是：innodb；</p><p>​    mysql默认的字符编码方式是：utf8</p><p>​    建表时指定存储引擎，以及字符编码方式。</p></li><li><p><strong>怎么查看mysql支持哪些存储引擎？</strong></p><ul><li><strong>命令：show engines \G</strong></li><li>mysql支持九大存储引擎，版本不同支持情况不同。</li></ul></li><li><p>关于mysql常用的存储引擎：</p><ul><li><p><strong>MyISAM存储引擎：</strong></p><p>它管理的表具有以下特征：</p><p>​    使用三个文件表示每个表：</p><p>​            <strong>格式文件 —— 存储表结构的定义（mytable.frm）</strong></p><p>​            <strong>数据文件 —— 存储表行的内容（mytable.myd）</strong></p><p>​            <strong>索引文件 —— 存储表上索引（mytable.myi）</strong>：索引是一本书的目录，缩小扫描范围，提高查询效率的一种机制。</p><p>​    <strong>此存储引擎的特点：</strong></p><p>​            <strong>可被转换为压缩、只读表来节省空间。【优势】</strong></p><p>​            <strong>MyISAM不支持事务机制，安全性低。【缺点】</strong></p><p>​            </p><p><strong>注意：对于一张表来说，只要是主键，或者加有unique约束的字段上会自动创建索引。</strong></p><hr></li><li><p><strong>Innodb存储引擎：</strong></p><p><strong>是mysql默认的存储引擎</strong>，同时也是一个重量级的存储引擎。</p><p>I<strong>nnoDB支持事务</strong>，支持数据库崩溃后自动恢复机制。</p><p>InnoDB存储引擎最主要的特点是：<strong>非常安全。</strong></p><p><strong>它管理的表具有下列主要特征：</strong></p><p>​    — 每个InnoDB表在数据库目录中以.frm 格式文件表示。</p><p>​    — InnoDB 表空间 tablespace 被用于存储表的内容（表空间是一个逻辑名称。表空间存储数据 + 索引）。</p><p>​    — 提供一组用来记录事物性活动的日志文件；</p><p>​    — 用COMMIT(提交)、SAVEPOINT 及 ROLLBACK（回滚）支持事物处理；</p><p>​    — 提供全 ACID 兼容</p><p>​    — 在MySQL 服务器崩溃后提供自动恢复；</p><p>​    — 多版本（MVCC）和行级锁定；</p><p>​    — 支持外键及引用的完整性，包括级联删除和更新。</p><p><strong>InnoDB最大的特点就是支持事物：</strong></p><p>​    以保证数据的安全。效率不是很高，并且也不能压缩，不能转换为只读，不能很好的节省存储空间。</p><hr></li><li><p><strong>MEMORY存储引擎：</strong></p><p><strong>使用MEMORY存储引擎的表，其数据存储在内存中，且行的长度固定，这两个特点使得MEMEORY存储引擎非常快。</strong></p><p>MEMORY存储引擎管理的表具有下列特征：</p><p>​    — 在数据库目录内，每个表均以.frm格式的文件表示；</p><p>​    <strong>— 表数据及索引被存储在内存中。（目的就是快，查询快）</strong></p><p>​    — 表级锁机制；</p><p>​    — 不能包含 TEXT 或 BLOB字段。</p><p>MEMORY引擎以前被称为：HEAP引擎。</p><p><strong>优点：查询效率是最高的，不需要和硬盘交互。</strong></p><p><strong>缺点：不安全，关机之后数据消失，因为数据和索引都是在内存中。</strong></p></li></ul></li></ol><hr><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p><strong>什么是事务？</strong></p><ul><li>一个事物其实就是一个完整的业务逻辑。</li></ul><p><strong>什么是一个完整的业务逻辑？</strong></p><p>​    假设转账，从A账户向B账户中转账10000.</p><p>​    将A账户的前减去10000  （update语句）</p><p>​    将B账户的钱加上10000  （update语句）</p><p>​    这就是一个完整的业务逻辑。</p><p>​    <strong>以上的操作就是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。这两个update语句要求必须同时成功或者同时失败，这样才能保证钱是正确的。</strong></p><ol><li><p><strong>只有DML语句才会有事务这一说，其他语句和事务无关！</strong></p><ul><li><strong>insert、delete、update</strong></li><li>只有以上的三个语句和事务有关系，其他都没有关系。</li><li>因为只有以上三个语句是数据库表中数据进行增、删、改的。</li><li>只要操作一旦涉及到数据的增、删、改，那么就一定要考虑安全问题，数据安全第一位！</li></ul></li><li><p><strong>假设所有的业务，只要一条DML语句就能完成，还有必要存在事务机制吗？</strong></p><ul><li>正是因为做某件事的时候，需要多条DML语句共同联合起来才能完成，所以需要事务的存在，如果任何一件复杂的事都能一条DML语句搞定，那么事务就没有存在的价值了。</li></ul></li><li><p><strong>到底什么是事务呢？</strong></p><ul><li>本质上，一个事务其实就是多条DML语句同时成功，或者同时失败。</li></ul></li><li><p><strong>事务是怎么做到多条DML语句同时成功和同时失败的呢？</strong></p><ul><li><p>InnoDB存储引擎：提供一组用来记录事务性活动的日志文件。</p></li><li><p><strong>在事务的执行过程中，每一条DML的操作都会记录到“事务性活动的日志文件”中。</strong></p></li><li><p>在事务的执行过程中，我们可以提交事务，也可以回滚事务。</p></li><li><p><strong>提交事务：</strong></p><p><strong>–&gt; 清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中。提交事务标志着事务的结束，并且是一种全部成功的结束。</strong></p></li><li><p><strong>回滚事务：</strong></p><p><strong>–&gt; 将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件，回滚事务标志着，事务的结束。并且是一种全部失败的结束。</strong></p></li></ul></li><li><p><strong>怎么提交事务，怎么回滚事务？</strong></p><ul><li><p><strong>提交事务：commit; 语句</strong></p></li><li><p><strong>回滚事务：rollback; 语句（回滚永远都是只能回滚到上一次的提交点！）</strong></p></li><li><p><strong>事务对应的英语单词：transaction</strong></p></li><li><p>在mysql当中默认的是事务行为是怎样的？</p><p>–&gt; <strong>mysql默认情况下是支持自动提交事务的。（自动提交）</strong></p><p>什么是自动提交？  –&gt; <strong>每执行一条DML语句，则提交一次！</strong></p></li><li><p>这种自动提交实际上是不符合我们的开发习惯，因为一个业务通常是需要多条DML语句共同执行才能完成的，<strong>为了保证数据的安全，必须要求同时成功之后再提交，所以不能执行一条九提交一条。</strong></p></li><li><p><strong>怎么将mysql的自动提交机制关闭？</strong></p><p><strong>–&gt; 先执行这个命令：start transaction;【默认关闭自动提交，改为手动提交事务】</strong></p></li></ul></li><li><p><strong>事务包括四个特性</strong></p><ul><li><strong>原子性：</strong>说明事务是最小的工作单元。不可再分。</li><li><strong>一致性：</strong>所有事务要求，在同一个事务当中，所有操作必须同时成功，或者同时失败。</li><li><strong>隔离性：</strong>A事务和B事务同时操作一份数据，相互之间不影响。</li><li><strong>持久性：</strong>事务最终结束的一个保障。事务提交，就相当于将没有保持到硬盘上的数据保持到硬盘上。</li></ul></li><li><p>事务和事务之间的隔离级别有哪些呢？【4个级别】</p><ul><li><p><strong>读未提交：read uncommitted（最低的隔离级别）【没有提交就读到了】</strong></p><p>什么是读未提交？</p><p>​        —— 事务A可以读取到事务B未提交的数据。</p><p>这种隔离级别存在的问题就是：</p><p>​        —— 脏读现象！(Dirty Read)</p><p>​                我们称读到了脏数据。</p><p>这种隔离级别一般都是理论上的，大多数的数据库隔离级别都是二档起步。</p><hr></li><li><p><strong>读已提交：read committed【提交之后才能读到】</strong></p><p>什么是读已提交？</p><p>​        —— 事务A只能读取到事务B提交之后的数据。</p><p>这种隔离级别解决了什么问题？</p><p>​        —— 解决了脏读现象。</p><p>这种隔离级别存在什么问题？</p><p>​        —— 不可重复读取数据。</p><p><strong>什么是不可重复读取数据呢？</strong></p><p>​    –&gt; 在事务开启之后，第一次读到的数据是3条，当前事务还没有结束，可能第二次再读取的时候，读到的数据是4条，3不等于4称为不可重复读取。</p><p><strong>这种隔离级别是比较真实的数据，每一次读到的数据是绝对的真实。oracle数据库默认的隔离级别是：read committed</strong></p><hr></li><li><p><strong>可重复读：repeatable read【提交之后也读不到，永远读取的都是刚开启事务时的数据】</strong></p><p><strong>什么是可重复读取？</strong></p><p>​    –&gt; 事务A开启之后，不管是多久，每一次在事务A中读取到的数据都是一致的。即使事务B将数据已经修改，并且提交了，事务A读取到的数据还是没有发生改变，这就是可重复读。</p><p><strong>可重复读解决了什么问题？</strong></p><p>​    –&gt; 解决了不可重复读取数据。</p><p><strong>可重复读存在的问题是什么？</strong></p><p>​    –&gt; 可能会出现幻影读，每一次读取到的数据都是幻象，不够真实。</p><p>只要事务不结束，读到的数据还是和第一次一样，读到的是假象，不够绝对的真实。</p><p><strong>mysql 中默认的事务隔离级别就是这个！</strong></p></li><li><p><strong>序列化 &#x2F; 串行化：serializable（最高的隔离级别）</strong></p><p><strong>这是最高隔离级别，效率最低，解决了所有的问题。这种隔离级别表示事务排队，不能并发！</strong></p><p><strong>–&gt; synchronized，线程同步（事务同步）</strong></p><p><strong>每一次读取到的数据都是最真实的，并且效率是最低的。</strong></p><hr></li></ul></li><li><p><strong>查看隔离级别： select @@tx_isolation</strong></p><ul><li><strong>读未提交</strong></li></ul><p><img src="/images/MySQL_images/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E9%AA%8C%E8%AF%8101.png"></p><hr><ul><li><strong>读已提交</strong></li></ul><p><img src="/images/MySQL_images/%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4.png"></p><ul><li><strong>可重复读验证：</strong></li></ul><p><img src="/images/MySQL_images/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.png"></p></li></ol><hr><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ol><li><p><strong>什么是索引</strong></p><ul><li><p>索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。一张表的一个字段可以添加一个索引，当然多个字段联合起来也可以添加索引。索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</p></li><li><p>eg：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from t_user where name &#x3D; &#39;jack&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果name字段上没有添加索引（目录），或者说没有给name字段创建索引，MySQL会进行全扫描，会将name字段上的每一个值都比对一遍。效率比较低。</p></li><li><p><strong>MySQL在查询方面主要就是两种方式：</strong></p><ol><li><strong>第一种方式：全表扫描；</strong></li><li><strong>第二种方式：根据索引检索。</strong></li></ol></li><li><p>注意:</p><p>​    在实际中，汉语字典前面的目录是排序的，按照a b c d …排序，为什么排序呢？因为只有排序了才会有区间查找这一说！（缩小扫描范围，其实就是扫描某个区间罢了）。</p><p>​    <strong>在mysql数据库中索引也是需要排序的，并且这个排序和TreeSet数据结构相同。TreeSet（TreeMap）底层是一个自平衡的二叉树！在mysql当中索引是一个B-Tree数据结构。</strong></p><p>​    <strong>遵循左小右大原则存放，采用中序遍历方式遍历数据。</strong></p></li></ul></li><li><p><strong>索引的实现原理</strong></p><ol><li><p>提醒1：在任何数据库中主键都会自己添加索引对象，id字段上有索引，因为id是PK。另外在mysql当中，一个字段上如果有unique约束的话，也会自动创建索引对象。</p></li><li><p>提醒2：在任何数据库中，任何一张表的任何一条记录在硬盘存储上都有一个硬盘的物理存储编号。</p></li><li><p>提醒3：在mysql中，索引是一个单独的对象，不同的存储引擎以不同的形式存在，在MyISAM存储引擎中，索引存储在一个.MYI文件中。在InnoDB存储引擎中索引存储在一个逻辑名称叫 tablespace中。在memory存储引擎当中索引被存储在内存当中，不管索引存储在哪里，索引mysql当中都是一个树的形式存在。（自平衡二叉树：B - Tree）。</p><p><img src="/images/MySQL_images/idIndex.png"></p></li></ol></li><li><p>在mysql当中，主键上，以及unique字段上都会自动添加索引的。</p><p><strong>什么条件下我们会考虑给字段添加索引呢？</strong></p><ul><li>条件1：数据量庞大（到底多大算庞大需要根据硬件环境测试）</li><li>条件2：该字段经常出现在where的后面，以条件的形式存在，也就是说这个字段总是被扫描。</li><li>条件3：该字段很少的DML(insert delete update)操作。（因为DML之后，索引需要重新排序。）</li></ul><p><strong>建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会降低系统的性能。建议通过主键查询，建议通过unique约束的字段进行查询，效率是比较高的。</strong></p></li></ol><hr><h3 id="索引怎么创建？怎么删除？语法是什么？"><a href="#索引怎么创建？怎么删除？语法是什么？" class="headerlink" title="索引怎么创建？怎么删除？语法是什么？"></a>索引怎么创建？怎么删除？语法是什么？</h3><ol><li><p>创建索引：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create index emp_ename_index on emp(ename);# 给emp表的ename字段添加索引，起名：emp_ename_index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除索引：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop index emp_ename_index on emp;# 将 emp 表上的emp_ename_index索引对象删除。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在mysql中，怎么查看一个sql语句是否使用了索引进行检索？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from emp where ename &#x3D; &#39;KING&#39;;# type &#x3D; ALL 说明没有使用索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>索引的底层是B-tree。</strong></p></li></ol><hr><h3 id="索引什么时候会失效？"><a href="#索引什么时候会失效？" class="headerlink" title="索引什么时候会失效？"></a>索引什么时候会失效？</h3><p><strong>第一种情况：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where ename like &#39;%T&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ename上即使添加了索引，也不会走索引，为什么？</strong></p><ul><li><strong>因为模糊匹配当中，以 “%” 开头了。尽量避免模糊查询的时候以 “%” 开始。这是一种优化的手段 &#x2F; 策略。</strong></li></ul><p><img src="/images/MySQL_images/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E6%83%85%E5%86%B51.png"></p><hr><p><strong>第二种情况：</strong></p><ul><li><p><strong>使用or的时候会失效，如果使用or那么要求or两边的条件字段都要有索引，才会走索引，如果其中一边有一个字段没有索引，那么另一个字段上的索引也会实现。所以这就是为什么不建议使用or的原因。</strong></p><p><img src="/images/MySQL_images/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E6%83%85%E5%86%B52.png"></p></li></ul><hr><p><strong>第三种情况：</strong></p><ul><li><strong>使用复合索引的时候，没有使用左侧的列查找，索引失效。</strong></li></ul><p><strong>什么是复合索引？</strong></p><p>​    <strong>–&gt; 两个字段，或者更多的字段联合起来添加一个索引，叫做复合索引。</strong></p><p><img src="/images/MySQL_images/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E6%83%85%E5%86%B53.png"></p><hr><p><strong>第四种情况：</strong></p><ul><li><p>在where当中索引列参加了运算，索引失效。</p><p><img src="/images/MySQL_images/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E6%83%85%E5%86%B54.png"></p></li></ul><hr><p>  <strong>第5种情况：</strong></p><ul><li><strong>在where中索引列使用了函数。</strong></li></ul><p><img src="/images/MySQL_images/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E6%83%85%E5%86%B55.png"></p><hr><h3 id="索引是各种数据库进行优化的重要手段。"><a href="#索引是各种数据库进行优化的重要手段。" class="headerlink" title="索引是各种数据库进行优化的重要手段。"></a>索引是各种数据库进行优化的重要手段。</h3><p><strong>优化的时候优先考虑的因素就是索引。</strong></p><ol><li><p><strong>索引在数据库中分了很多类？</strong></p><ul><li><p>单一索引：一个字段上添加索引。</p></li><li><p>复合索引：两个字段或者更多的字段上添加索引。</p></li><li><p>主键索引：主键上添加索引。</p></li><li><p><strong>唯一性索引：具有unique约束的字段上添加索引。【越唯一，效率越高】</strong></p><p>…</p></li><li><p><strong>注意：唯一性比较弱的字段上添加索引用处不大。</strong></p><p>可能会存在大量的重复数据，这个时候索引不起什么太大的作用。</p></li></ul></li></ol><hr><h3 id="视图（view）"><a href="#视图（view）" class="headerlink" title="视图（view）"></a>视图（view）</h3><ol><li><p>什么是视图？</p><ul><li>view：站在不同的角度去看待同一份数据。</li></ul></li><li><p>怎么创建视图对象？怎么删除视图对象？</p><ul><li><p>创建视图对象：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create view emp_view as select * from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除视图对象：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop view emp_view;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意：只有DQL语句才能以view的形式创建。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create view view_name as 这里的语句必须是DQL语句;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>用视图做什么？</strong></p><ul><li><p><strong>我们可以面向视图对象进行增删改查，对视图对象的增删改查，会导致原表被操作！</strong> <strong>（视图的特点：通过对视图的操作，会影响到原表数据）</strong></p><p><img src="/images/MySQL_images/%E8%A7%86%E5%9B%BE01.png"></p></li></ul></li><li><p><strong>视图对象在实际开发中到底有什么用？【方便，简化开发，利于维护】</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create view emp_dept_view as select e.ename,e.sal,d.dnamefrom emp ejoin dept done.deptno &#x3D; d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>假设有一条非常复杂的SQL语句，而这条SQL语句需要在不同的位置上反复使用。每一次使用这个SQL语句的时候都需要重新编写，很长，很麻烦，怎么办？</strong></p><ul><li><strong>可以把这条复杂的SQL语句以视图对象的形式新建。</strong></li><li>在需要编写这条SQL语句的位置直接使用视图对象，可以大大简化开发。并且利于后期的维护，因为修改的时候也只需要修改一个位置就行。只需要修改视图对象所映射的SQL语句。</li></ul></li><li><p><strong>我们以后面向视图开发的时候，使用视图的时候可以像使用table一样。可以对视图进行增删改查等操作。视图不是在内存中，视图对象也是存储在硬盘上的，不会消失。</strong></p></li><li><p><strong>注意：</strong></p><ul><li>视图对应的语句只能是DQL语句；</li><li>但是视图对象创建完成之后，可以对视图进行增删改查等操作；</li><li><strong>增删改查，又叫做：CRUD。</strong></li><li>C：Create（增）；</li><li>R：Retrive（查：检索）</li><li>U：Update（改）</li><li>D：Delete（删）</li></ul></li></ol><hr><h3 id="DBA常用命令"><a href="#DBA常用命令" class="headerlink" title="DBA常用命令"></a>DBA常用命令</h3><ol><li><p>DBA常用命令【重点掌握】</p><ul><li>数据的导入和导出（数据的备份）</li></ul></li><li><p><strong>数据导出</strong></p><ul><li><p>注意：在windows的dos命令窗口中：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump bjpowernode&gt;D:\bjpowernode.sql -uroot -p123456#可以导出指定的表mysqldump bjpowernode emp&gt;D:\bjpowernode.sql -uroot -p123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>数据的导入</strong></p><ul><li>注意：需要先登录到mysql数据库服务器上。</li><li>然后创建数据库：create database bjpowernode;</li><li>使用数据库：use bjpowernode</li><li>然后初始化数据库：source D:\bjpowernode.sql</li></ul></li></ol><hr><h3 id="数据库设计三范式"><a href="#数据库设计三范式" class="headerlink" title="数据库设计三范式"></a>数据库设计三范式</h3><ol><li><p><strong>什么是数据库设计范式？</strong></p><ul><li>数据库表的设计依据。教你怎么进行数据库表的设计。</li></ul></li><li><p><strong>数据库设计范式共有？【3个】</strong></p><ul><li><p><strong>第一范式：要求任何一张表必须有主键，每一个字段原子性不可再分；</strong></p><p><img src="/images/MySQL_images/%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F.png"></p></li><li><p><strong>第二范式：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，不要产生部分依赖；</strong></p><p><img src="/images/MySQL_images/%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F01.png"></p><p><img src="/images/MySQL_images/%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F02.png"></p></li></ul><p>​        <strong>口诀：多对多怎么设计：多对多，三张表，关系表两个外键。</strong></p><ul><li><p><strong>第三范式：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，不要产生传递依赖。</strong></p><p><img src="/images/MySQL_images/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F01.png"></p><p><img src="/images/MySQL_images/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F02.png"></p></li></ul><p>​        <strong>口诀：一对多，两张表，多的表加外键。</strong></p><p><strong>声明：三范式是面试官经常问的。</strong></p><p><strong>设计数据库表的时候，按照以上的范式进行，可以避免表中数据的冗余，空间的浪费。</strong></p></li></ol><hr><h3 id="设计总结"><a href="#设计总结" class="headerlink" title="设计总结"></a>设计总结</h3><p><img src="/images/MySQL_images/%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%9301.png"></p><p><img src="/images/MySQL_images/%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%9302.png"></p><ul><li><p><strong>口诀：一对一，外键唯一。 –&gt; 只能取与主键相同的值。</strong></p><hr></li><li><p><strong>数据设计三范式是理论上的，实践和理论有的时候有偏差。</strong></p></li><li><p><strong>最终的目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。因为在sql中，表和表之间连接次数越多，效率越低。（笛卡尔积）</strong></p></li><li><p><strong>有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的，并且对于开发人员来说，sql语句的编写难度也会降低。</strong></p></li></ul></h1>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE学习笔记</title>
      <link href="/2022/07/02/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/02/JavaSE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<center><h1>JavaSE学习笔记</h1></center><hr><h2 id="JavaSE基础【2022-7-2】"><a href="#JavaSE基础【2022-7-2】" class="headerlink" title="JavaSE基础【2022.7.2】"></a>JavaSE基础【2022.7.2】</h2><h3 id="DAY01"><a href="#DAY01" class="headerlink" title="DAY01"></a>DAY01</h3><h4 id="编译型和解释型的概述？"><a href="#编译型和解释型的概述？" class="headerlink" title="编译型和解释型的概述？"></a>编译型和解释型的概述？</h4><p><strong>编译型</strong>：整体翻译，将源文件编译成字节码文件。</p><ul><li>优点：阅读效率高；</li><li>缺点：需要等待；</li></ul><p><strong>翻译型</strong>：逐行翻译，将字节码文件转换成对应平台的机器语言。</p><ul><li>优点：无需等待，直接阅读；</li><li>缺点：阅读效率低；</li></ul><p>C++属于“编译型”语言，JavaScript属于“解释型”语言，Java属于“编译型+解释型”语言【<strong>一次编译，到处运行</strong>】。</p><hr><h4 id="跨平台需要满足的条件？"><a href="#跨平台需要满足的条件？" class="headerlink" title="跨平台需要满足的条件？"></a>跨平台需要满足的条件？</h4><ol><li>各平台只识别机器语言；</li><li>各平台的机器指令不同；</li></ol><hr><p><strong>注意</strong>：源文件编译之后，如果得到的“二进制文件”<strong>能直接在平台上运行</strong>，则我们就称之为“<strong>机器码</strong>”；</p><p>​           源文件编译之后，如果得到的“二进制文件”<strong>不能直接在平台上运行</strong>，则我们就称之为“<strong>字节码</strong>”。</p><hr><h4 id="常见的DOS命令？"><a href="#常见的DOS命令？" class="headerlink" title="常见的DOS命令？"></a>常见的DOS命令？</h4><ol><li><p>切换盘符：</p><ul><li>D: 或 d:</li></ul></li><li><p>切换目录：</p><ul><li>cd 文件夹名    –&gt;  进入某个目录</li><li>cd 路径            –&gt;  进入某个目录</li></ul><p>eg: cd D:\course\01_JavaSE\document    或 cd course\01_JavaSE\document</p><p><strong>注意</strong>：通过”cd”命令来切换目录的时候，切记不要跨盘符切换。</p><p>cd ..         –&gt; 返回上一级目录</p><p><strong>注意</strong>：此处”..”指的就是“上一级目录”。</p><p>cd &#x2F;  或  cd \        –&gt;  返回根目录</p></li><li><p>查看目录中的所有内容</p><ul><li>dir                –&gt;    查看当前目录中的所有文件和文件夹</li></ul><p>注意：此处的”.” 代表的是当前所在目录，”..”代表的是上一级目录</p></li><li><p>常见的辅助命令</p><p>cls            –&gt;  清屏操作</p><p>键盘上下键            –&gt;  查看上一条或下一条已经执行过的命令</p><p>tab键            –&gt;  文件名或文件夹名自动补全</p><p>exit            –&gt;  关闭DOS命令窗口(退出)</p></li><li><p>操作文件夹的命令</p><ul><li>md        –&gt;  新建文件夹</li><li>rd          –&gt;  删除文件夹</li></ul></li><li><p>操作文件的命令</p><ul><li>文件名或程序名</li><li>copy 要复制文件的路径 目的路径</li><li>del 文件名    –&gt;  删除文件</li></ul></li><li><p>常见的辅助命令</p><ul><li>​    help                –&gt;  帮助命令（显示常见的DOS命令及其作用）</li></ul><p>注意：DOS命令不区分大小写，但是文件名或文件夹名需要区分大小写！</p><ul><li>​    ipconfig            –&gt;  查看当前电脑的ip地址</li></ul></li></ol><hr><h3 id="DAY02"><a href="#DAY02" class="headerlink" title="DAY02"></a>DAY02</h3><h4 id="PATH环境变量配置"><a href="#PATH环境变量配置" class="headerlink" title="PATH环境变量配置"></a>PATH环境变量配置</h4><hr><h4 id="第一个程序的步骤："><a href="#第一个程序的步骤：" class="headerlink" title="第一个程序的步骤："></a>第一个程序的步骤：</h4><ol><li>编辑阶段<ul><li>新建一个Java源文件，然后在源文件中编辑代码。</li></ul></li><li>编译阶段<ul><li>把源文件编译为字节码文件，从而解决各平台只识别机器语言的问题。</li><li>实现：在源文件所在的目录中，我们使用javac.exe来实现编译操作，例如：javac HelloWorld.java</li></ul></li><li>执行阶段<ul><li>把字节码文件在虚拟机中解释执行，从而解决了各平台机器指令不一样的问题。</li><li>实现：在字节码文件所在的目录中，我们使用java.exe来实现解释执行的操作，例如：java HelloWorld</li></ul></li></ol><hr><h4 id="如何取消隐藏已知文件类型的后缀？"><a href="#如何取消隐藏已知文件类型的后缀？" class="headerlink" title="如何取消隐藏已知文件类型的后缀？"></a>如何取消隐藏已知文件类型的后缀？</h4><ul><li>方式一：在文件所在目录中，我们选中“查看”，然后再勾选“文件扩展名”；</li><li>方式二：打开控制面板，选中“外观和个性化”，–&gt;“文件资源管理器选项”，–&gt;“查看”,最后取消勾选“隐藏已知文件类型的扩展名”。</li></ul><hr><h4 id="处理使用Notepad-出现的乱码问题？"><a href="#处理使用Notepad-出现的乱码问题？" class="headerlink" title="处理使用Notepad++出现的乱码问题？"></a>处理使用Notepad++出现的乱码问题？</h4><p>原因：DOS命令采用的是ANSI编吗，而Notepad++采用的是UTF-8编码，则编码和编码采用的《编码表》不一致，那么就会出现乱码问题。</p><p>解决：把Notepad++的编码设置为ANSI编码表即可。</p><p>需求：新建一个源文件，然后通过Notepad++打开该源文件，要求打开的源文件默认就是ANSI编码，如何实现？</p><p>实现：在导航栏位置选中“设置”，然后选中“首选项”，–&gt;“新建”，然后设置编码为“ANSI”并设置默认语言为“java”,最后点击“关闭”按钮。</p><p>经典错误：“错误：编码GBK的不可映射字符” –&gt; 编码问题，编码和解码没有使用同一个编码表。</p><hr><h4 id="编辑阶段的整体注意点"><a href="#编辑阶段的整体注意点" class="headerlink" title="编辑阶段的整体注意点"></a>编辑阶段的整体注意点</h4><ul><li><p>见名知意、注意缩进、成对编程；</p></li><li><p>严格区分大小写，英文大写字母与小写字母意义不一样；</p></li><li><p>都是英文标点符号；</p><p>–&gt; 经典错误：”非法字符”：’\uff09’  –&gt; 使用了中文的标点符号；</p></li><li><p>main方法写法固定，是程序的入口，能被虚拟机识别并执行。</p></li></ul><hr><h4 id="关于定义类的注意点？"><a href="#关于定义类的注意点？" class="headerlink" title="关于定义类的注意点？"></a>关于定义类的注意点？</h4><ul><li><p>使用public修饰的类，该类的名字必须和源文件名字保持一致，否则就会编译错误；</p></li><li><p>在源文件中，我们可以使用class来定义任意多个类，编译后就会生成任意多个字节码文件。</p><p>–&gt; 编译后，没有类都会生成一个字节码文件，并且字节码文件名字就是类名。</p></li><li><p>在源文件中，我们可以定义多个类，但是最多只能有一个类使用public修饰（0或1）。</p></li></ul><hr><h4 id="DOS下编译解释【了解】"><a href="#DOS下编译解释【了解】" class="headerlink" title="DOS下编译解释【了解】"></a>DOS下编译解释【了解】</h4><p>问题：想要在任意目录中，去编译指定目录中的源文件，如何实现？</p><p>解决：java D:\course\JavaProjects\01_JavaSE\day02\HelloWorld03.java</p><p>问题：想要在任意目录中，去解释执行指定目录中的字节码文件，如何实现？？</p><p>分析：java D:\course\JavaProjects\01_JavaSE\day02\Helloworld03  –&gt; 错误演示</p><p>解决：配置classpath环境变量来实现【了解】–&gt;为理解idea源文件与字节码文件分离做铺垫</p><p>问题：配置了classpath环境变量的作用？</p><p>答：一旦配置classpath环境变量，则做解释执行操作的时候，就不会在当前所在目录中找字节码文件，而是直接去classpath路径中找字节码文件。</p><p>需求：做解释执行操作时，如果当前位置有该字节码文件，则就执行当前目录中的字节码文件，</p><p>​            如果当前目录中没有该字节码文件，则才去执行指定目录中的字节码文件，如何实现？</p><p>解决：设置classpath环境变量的值为”.;D:\course\JavaProjects\01_JavaSE\day02”即可。</p><hr><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>作用：解释说明代码</p><p><strong>分类：</strong></p><ol><li>单行注释<ul><li>快捷键：ctrl + &#x2F;</li><li>语法：&#x2F;&#x2F;</li></ul></li><li>多行注释<ul><li>快捷键：ctrl + shift + &#x2F;</li><li>语法：&#x2F;*  注释内容  *&#x2F;</li></ul></li><li>文档注释<ul><li>语法：&#x2F;** 注释内容  *&#x2F;</li></ul></li></ol><hr><h4 id="常见的转义字符"><a href="#常见的转义字符" class="headerlink" title="常见的转义字符"></a>常见的转义字符</h4><ul><li>\t    –&gt;    制表符。作用：显示多个空格，并且还有对齐的功能；</li><li>\n   –&gt;    换行符。作用：具有换行功能。</li></ul><hr><h4 id="理解编译和反编译"><a href="#理解编译和反编译" class="headerlink" title="理解编译和反编译"></a>理解编译和反编译</h4><p>编译：把源文件编译为字节码文件，也就是把”*.java”文件编译为”.class”文件</p><p>反编译：把字节码文件编译为源文件。</p><p><strong>反编译的实现方式：</strong></p><p><strong>方式一：提供javap.exe来实现</strong></p><ul><li>实现：在字节码文件所在目录中，我们通过javap.exe来实现反编译，例如:javap HelloWorld04</li><li>优点：能看到编译时期默认做的操作，例如<strong>能看到编译时期默认提供的无参构造方法</strong>。</li><li>缺点：反编译之后，我们无法看到方法内部的具体实现，也就是看不到方法体。</li></ul><p><strong>方法二：通过jd-gui.exe来实现</strong></p><ul><li>实现：打开jd-gui.exe程序，然后把需要反编译的字节码文件拖拽进入jd-gui.exe程序中即可。</li><li>优点：反编译之后，<strong>我们能够看到方法内部的具体实现，也就是能看到方法体。</strong></li><li>缺点：不能看到编译时期默认做的操作，例如无法看到编译时期默认提供的无参构造方法。</li></ul><p><strong>方法一与方法二可以看作是互补的。</strong></p><hr><h4 id="文件存储的的单位"><a href="#文件存储的的单位" class="headerlink" title="文件存储的的单位"></a>文件存储的的单位</h4><p>实际开发中，我们把字节称之为文件存储的最小单位。</p><p>开发中，<strong>字节有两种表示方式</strong>，分别为：</p><ol><li><strong>无符号表示</strong>（只能表示正数，不能表示负数）<ul><li>1个字节无符号表示的数值范围在【0,2^8-1】之间，也就是表示范围在【0,255】之间。</li><li>作用：基本数据类型中，char类型采用的就是无符号来表示。</li></ul></li><li><strong>有符号表示</strong>（不但能表示正数，还能表示负数）<ul><li>1个字节有符号表示的数值范围在[-2^ 7,2^7-1]之间，也就是表示范围在[-128,127]之间。</li><li>作用：基本数据类型中，byte、short、int和long类型采用的就是有符号来表示。</li></ul></li><li><strong>常见的文件存储单位及其换算公式</strong><ul><li>1KB &#x3D; 1024Byte</li><li>1MB &#x3D; 1024KB</li><li>1GB &#x3D; 1024MB</li></ul></li><li><strong>问题</strong>：长度单位的换算使用的是1000，为什么文件存储单位换算使用的是1024呢？<ul><li>答：二进制早期有电信号开关演变而来，也就是意味着文件存储的换算肯定使用的是2的多少次方，而2的10次方结果就是1024，也就是2^10是最接近于1000的整数，因此就使用了1024来作为文件存储的换算值。</li></ul></li></ol><hr><h3 id="DAY03"><a href="#DAY03" class="headerlink" title="DAY03"></a>DAY03</h3><h4 id="标识符的作用"><a href="#标识符的作用" class="headerlink" title="标识符的作用"></a>标识符的作用</h4><ul><li>标识符就是给类名、方法名、变量名、常量名和包名命名的规则。</li></ul><hr><h4 id="标识符的规则"><a href="#标识符的规则" class="headerlink" title="标识符的规则"></a>标识符的规则</h4><ol><li>必须由数字、字母、下划线和&amp;组成，并且开头不能是数字。</li><li>标识符不能是关键字或保留字，因为关键字和保留字是给编程语言使用。</li><li>在java语言中，对于标识符的长度没有任何限制，也就是标识符可以任意长。<ul><li>补充：java语言默认采用Unicode编码表，而Unicode编码表几乎包含了全世界所有的文字。</li><li>注意：此处的“字母”我们应该广义地去理解，也就是此处“字母”可以是“英文”，也可以是“中文”。</li><li>建议：给标识符进行命名的时候，我们不建议使用“中文汉字”来进行命名。</li></ul></li></ol><hr><h4 id="命名规范的讲解"><a href="#命名规范的讲解" class="headerlink" title="命名规范的讲解"></a>命名规范的讲解</h4><p>明确：命名的时候不建议使用”中文汉字“，并且还必须做到“见名知意”的要求。</p><p>类名：必须遵守“大驼峰”的命名规范，大驼峰：每个单词首字母都大写。</p><ul><li>​    例如：HelloWorld、VariableDemo</li></ul><p>方法名、变量名：必须遵守“小驼峰”的命名规则，小驼峰：第一个单词首字符小写，从第二个单词起首字母都大写。</p><ul><li>​    例如：userName、maxValue</li></ul><p>常量名：必须遵守“字母全部大写，多个单词之间以下划线连接”的命名规范。</p><ul><li>​    例如：USER、NAME</li></ul><p>包名：必须遵守“单词全部小写，多个单词之间以  ‘.’  连接，并且必须做到顶级域名倒着写”的命名规范。</p><ul><li>​    例如：com.bjpowernote.demo</li></ul><hr><h3 id="DAY04"><a href="#DAY04" class="headerlink" title="DAY04"></a>DAY04</h3><h4 id="数据类型的分类"><a href="#数据类型的分类" class="headerlink" title="数据类型的分类"></a>数据类型的分类</h4><ol><li><p>基本数据类型【八大基本数据类型】</p><ul><li>整数型：byte、short、int、long</li><li>浮点数：float、double</li><li>布尔型：boolean</li><li>字符型：char</li></ul></li><li><p>引用数据类型</p><ul><li>数组、字符串、类和接口等等</li></ul></li><li><p><strong>整数型（有符号表示）</strong></p><ul><li>byte，占用1个字节，则表示范围在[-2^7, 2^7-1]之间，–&gt; [-128, 127]。</li><li>short, 占用2个字节，[-2^15, 2^15-1], –&gt; [-32768,32767]。</li><li>int, 占用4个字节，[-2^31, 2^31-1], –&gt; 大概在正负21亿之间。</li><li>long, 占用8个字节，[-2^63, 2^63]。</li></ul><p><strong>注意：</strong></p><ul><li><p>占用的字节数越大，则表示的数值范围也就越大，开发中我们需要根据存储数值的大小来选择合适的数据类型。</p><p>–&gt; 存储的数值大小不能超出其数据类型的表示范围，否则就会编译错误。</p><p>–&gt; 实际开发中，byte和short几乎不会使用。存储较小的数值使用int，存储较大的数值使用long。</p></li><li><p>开发中，只能使用八进制、十进制、十六进制来表示整数，不能“直接”使用二进制来表示整数。</p><ol><li>int num1 &#x3D; 017：八进制；</li><li>int num1 &#x3D; 23：十进制；</li><li>int num1 &#x3D; 0x2B：十六进制；</li></ol></li><li><p>整数固定值常量默认为int类型,在整数固定值常量的末尾添加”L”【推荐】或”l”，则该常量就变为Long类型。</p></li></ul></li><li><p><strong>浮点型（小数）</strong></p><ul><li>float，占用4个字节，我们称之为“单精度类型”，理论上能精确到小数点后7位。</li><li>double，占用8个字节，我们称之为“双精度类型”，理论上精确度是float的两倍。</li></ul><p><strong>注意：</strong></p><ul><li><p>占用的字节数越大，则表示小数的精确度就越高，开发中我们建议使用double类型。</p><p>–&gt; 开发中，float类型很少使用，因为精确度太低，而double类型很常用。</p></li><li><p>小数的表示方式有：1）生活中的表示小数；2）使用科学计数法来表示小数。</p><p>–&gt; 3.14E3，等效于：3140.0   –&gt;  “乘以10的3次方”</p><p>–&gt; 3.14E-3，等效于：0.00314  –&gt; “除以10的3次方”</p></li><li><p>注意：使用科学计数法来表示小数的时候，此处的英文字母不区分大小写（E或e）。</p></li><li><p>因为小数存储的区别，因此不建议使用小数来做特别精确的运算，因为得到结果可能不精确。</p><p>–&gt;  double sum &#x3D; 0.001 + 0.0002; 理论结果是：0.0003     实际结果：0.000300000000000000000003</p></li><li><p>小数固定值常量默认为double类型，在小数固定值常量末尾添加”F”【推荐】或”f”，则该常量就变为：float类型。</p></li><li><p>浮点型占用的字节数，强调的是存储”小数部分”占用的字节数，并不是强调存储”整数部分”占用的字节数。</p><p>​    <strong>–&gt; float类型存储”整数部分占用8个字节”，存储”小数部分占用4个字节”，总计至少占用12个字节。</strong>【底层（科学计数法）】</p></li></ul></li><li><p><strong>布尔型(boolean)</strong></p><ul><li><p>明确：布尔类型的固定值常量只有true和false，并且true和false都是关键字。</p><p>–&gt; true：表示为真或条件成立</p><p>–&gt; flase：表示为假或条件不成立</p></li><li><p>使用场合：常用于条件判断，条件成立则返回true，条件不成立则返回false。</p></li><li><p><strong>面试题：请问boolean类型占用几个字节？</strong></p><p>–&gt; 在java规范中，没有明确boolean类型占用几个字节。我个人觉得boolean类型占用x个字节，并说出理由！</p></li></ul></li><li><p><strong>字符型(char，无符号表示)</strong></p><ul><li>明确：字符型占用2个字节数，表示的数值范围在[0,2^16-1]之间，也就是表示范围在[0,65535]之间。</li><li>注意：使用单引号包裹的一个字符串，我们就称之为字符固定值常量。</li></ul></li><li><p><strong>字符串类型？</strong></p><ul><li><p>明确：字符串类型的名字叫做String类型，并且String类型属于”引用数据类型”。</p></li><li><p>注意：使用双引号包裹的任意多个字符，我们就称为“字符串固定值常量”。</p><p>–&gt;  双引号包裹的0个字符，我们就称之为”空字符串”。</p></li></ul></li><li><p>关于”+”的作用</p><ul><li>表示正数。eg:int num &#x3D; +8;</li><li>加法运算，要求两个操作数都必须是数值型。eg:int sum &#x3D; 5 + 8;</li><li>连接符，要求其中一个操作数必须是字符串类型。eg:”hello” + true;</li><li>结论：字符串的连接符操作，则运算完毕后返回的结果肯定属于String类型。</li></ul></li></ol><hr><h4 id="字符在内存中的存取（理解）"><a href="#字符在内存中的存取（理解）" class="headerlink" title="字符在内存中的存取（理解）"></a>字符在内存中的存取（理解）</h4><ol><li><p>整数在内存中的存取</p><ul><li>存储：直接把整数转化为二进制，然后存入到内存中即可。</li><li>读取：取出内存中的二进制，然后把该二进制转化为十进制。</li></ul></li><li><p>字符在内存中的存取</p><ul><li><p>明确：制作一个《编码表》，在《编码表》中让每个“字符”都对应一个“正整数”。</p></li><li><p>存储（编码）：把需要存取的“字符”对照《编码表》，则就得到了一个“正整数”，然后将该“正整数”存入到内存中即可。</p></li><li><p>读取（解码）：把内存中的二进制转化为：“正整数”，然后把“正整数”对照《编码表》，则就得到了该“正整数”对应的“字符”。</p></li><li><p>注意：“编码”类似于发电报时的“加密”操作，“解码”类似于收电报时的“解密”操作，而《编码表》就类似于《密码本》。</p><p>​    –&gt; “加密”和“解密”必须对照同一个《密码本》，则“编码”和“解码”必须对照同一个《编码》。</p></li></ul></li><li><p>常见编码表的概述</p><ul><li><p>ASCII：美国信息交换标准代码。</p></li><li><p>GBK：全称《汉字内码扩展规范》，字库是用来表示中文用的编码。ANSI编码表就是GBK子码表，专门用于表示简码表。</p></li><li><p>Unicode：又称万国码、同一码，是为了解决传统的编码方案的局限性而产生的，在Unicode编码表中几乎包含了全世界所有的文字。</p></li><li><p>问题：请问全世界所有的文字有多少个？</p><p>–&gt; 答案：肯定不超过65536个文字，因为char类型占用2个字节，能描述65536种可能。</p></li></ul></li><li><p>ASCII和Unicode之间的关系？</p><p>ASCII编码表的前128位和Unicode编码表一模一样，也就是Unicode编码表中包含了ASCII编码表。</p><ul><li>‘1’对应的正整数为：49</li><li>‘A’对应的正整数为：65</li><li>‘a’对应的正整数为：97</li></ul><p>注意：两个大小写英文字母对应正整数之差为32，则我们就可以通过”小写字母”找到对应的”大写字母”。</p></li><li><p>int 类型和char类型的关系？</p><ul><li><p>相同点：</p><p>​    在内存中存储的都是“整数”，则就有以下重要的结论：</p><p>​        char类型”肯定”都能转化为int类型，int类型”未必”能转化为char类型</p></li><li><p>不同点：</p><p>​    int类型占用4个字节，而char类型占用2个字节。</p><p>​    int类型采用”有符号”表示，而char类型采用“无符号”表示。</p></li></ul></li></ol><hr><h3 id="DAY05"><a href="#DAY05" class="headerlink" title="DAY05"></a>DAY05</h3><h4 id="常见的转义字符-1"><a href="#常见的转义字符-1" class="headerlink" title="常见的转义字符"></a>常见的转义字符</h4><ul><li><p>​    明确：转义字符就是一个特殊的字符，并且每个转义字符都有自己的特殊含义。</p></li><li><p>\t，制表符，作用：显示多个空格，并且还有对齐的功能。</p></li><li><p>\n，换行符，作用：具有换行的功能。</p></li><li><p>\“，编译时，把它当成一个整体，不作为字符串结束的标记；</p><p>​        运行时，会忽略反斜杠，只会展示出一个双引号。</p></li><li><p>\‘，编译时会把它当成一个整体，运行时只会展示出一个单引号。</p></li></ul><hr><h4 id="关于字符的使用"><a href="#关于字符的使用" class="headerlink" title="关于字符的使用"></a>关于字符的使用</h4><ol><li><p>方式一：把字符放在字符串内部使用！</p><ul><li>System.out.println(“hello\tworld”);</li></ul></li><li><p>方式二：把字符串单独使用，然后再使用+来拼接。</p><ul><li>System.out.println(“hello” + ‘\t’ + “world”);</li></ul><p><strong>注意：</strong></p><ul><li>int类型和char类型做“+”运算，则做的是“加法操作”。</li><li>String类型和char类型做“+”运算，则做的是“连接符操作”。</li></ul></li><li><p>关于Unicode值得补充</p><ul><li>因为java语言默认采用Unicode编码表，因此每个”字符”都对应一个Unicode值，其中一个Unicode值我们必须掌握</li><li>‘\u0000’代表的是空格字符</li></ul></li></ol><hr><h4 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h4><ol><li><p>为什么需要学习数据类型的转换?</p><ul><li>因为java是强类型的语言，因此参与“赋值运算”和“算数运算”的时候，要求参与运算的数据类型必须保持一致，否则就需要做数据类型转换。</li></ul></li><li><p>基本数据类型转换的方式有哪些？</p><ul><li>隐式类型转换（自动）</li><li>强制类型转换（手动）</li></ul></li><li><p>哪些基本数据类型可以相互转换？</p><ul><li>除了boolean类型外，其余的基本数据类型都可以相互转换。</li></ul></li><li><p>隐式类型转换（自动）</p><ul><li>原则：低字节向高字节自动提升。</li><li>byte –&gt; short –&gt; int –&gt; long –&gt; float –&gt; double</li><li>char –&gt; int</li></ul><p>赋值运算：</p><ul><li><p>原则：低字节向高字节自动提升。</p></li><li><p>特例：把int类型的常量，赋值给byte、short和char类型的变量或final修饰的常量时，则就是属于隐式类型转换的特例。只需赋值的数据没有超出其数据类型的表示范围即可。</p><p>–&gt; 赋值的数据应该是什么？赋值的数据应该是int类型的常量！</p><p>–&gt; 赋值数据的大小是什么？赋值数据的大小不能超出其数据类型的表示范围。</p></li></ul><p>算术运算</p><p>​    原则：两个操作数做运算，如果其中一个操作数为double类型，则另外一个操作数也会隐式转化为double类型；<strong>否则</strong>，如果其中一个操作数为float类型，则另外一个操作数也会隐式转化为float类型，最终计算结果就是float类型；<strong>否则</strong>，如果其中一个操作数为long类型，则另外一个操作数也会隐式转化为long类型，最终计算结果就是long类型;<strong>否则</strong>，这两个操作数都会隐式转化为int类型，最终计算的结果就是int类型。</p></li></ol><hr><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p><img src="/images/note_images/%E9%9D%A2%E8%AF%95%E9%A2%9801.png"></p><hr><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><ul><li><p>当隐式类型转换无法解决问题时，我们要采用强制类型转换。</p></li><li><p>语法：目标类型 变量  &#x3D; （目标类型） 数据；</p><p>eg: int num &#x3D; (int) 3.14;   –&gt; 可以用来小数取整。【<strong>一、想要的精度丢失</strong>】</p></li><li><p><strong>底层：只保留低位字节的二进制，高位字节的二进制就丢弃。</strong></p></li></ul><p><img src="/images/note_images/%E7%94%BB%E5%9B%BE01.png"></p><ul><li><p>注意：使用强制类型转换的时候，可能就丢失精度，使用的时候切记。【<strong>二、不想要的精度丢失</strong>】</p><p>–&gt; int num &#x3D; (int) 3.14;   只保留了整数位，丢失了小数位。</p></li><li><p><strong>强制类型转换后，被强制转换的变量还是原来的数据类型。</strong></p><p>eg: int num;  byte num1 &#x3D; (int) num;  –&gt; num (int类型)</p></li><li><p>使用强制类型转换的时候，我们必须明确强制转换数据的范围，否则得到的结果就不准确。</p></li></ul><hr><h3 id="DAY06"><a href="#DAY06" class="headerlink" title="DAY06"></a>DAY06</h3><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>​    “&#x3D;”，作用：把等号右边表达式的结果赋值给等号左边的变量或final修饰的常量保存。</p><hr><h4 id="面试题【详细代码见day01–-gt-Exercise02-ChangeNumber】"><a href="#面试题【详细代码见day01–-gt-Exercise02-ChangeNumber】" class="headerlink" title="面试题【详细代码见day01–&gt;Exercise02_ChangeNumber】"></a>面试题【详细代码见day01–&gt;Exercise02_ChangeNumber】</h4><p>用四种方式交换两个数值：</p><ol><li>创建临时变量temp;</li><li>加减法（正整数）；</li><li>乘除法；</li><li>异或法；</li></ol><hr><h4 id="算法运算符的分类"><a href="#算法运算符的分类" class="headerlink" title="算法运算符的分类"></a>算法运算符的分类</h4><ol><li><p>一元运算符（只需要一个操作数参与运算）</p><p>包含：++、–</p></li><li><p>二元运算符（需要两个操作数来参与运算）</p><ul><li><p>包含：+ 、-、*、&#x2F;、%</p></li><li><p>+：表示正数，加法运算，连接符操作；</p></li><li><p>-：表示负数，减法运算；</p></li><li><p>*：乘法运算</p></li><li><p>&#x2F;：除法运算</p></li><li><p>%：取模运算或取余运算</p><p>–&gt; 作用：获得两个整数相除的余数</p><p>eg：0 % 3 &#x3D; 0        –&gt; <strong>注意：0能被任何数整除。</strong></p><p>​        1 % 3 &#x3D; 1</p><p>注意：”除法运算”是获得两个整数相除的”整数位结果”，”取模运算”是获得两个整数相除的”余数”。</p><p>使用场合：</p><ul><li>判断m能否被n整除，如果m%n的结果为0，则意味着m能被n整除；如果m%n的结果不为0，则意味着m不能被n整除。</li><li>“任意数 % m”，则得到的结果肯定在[0,m - 1]之间，例如：”任何数 % 3”，则得到的结果肯定是在[0, 2]之间。</li></ul></li></ul></li></ol><h4 id="除法运算符的注意事项"><a href="#除法运算符的注意事项" class="headerlink" title="除法运算符的注意事项"></a>除法运算符的注意事项</h4><ul><li>在java语言中，两个整数做除法运算，则得到的结果肯定为整数。</li><li>在java语言中，做除法运算的时候，分母不能为0，否则就会抛出算数异常（ArithmeticException）。</li></ul><hr><h4 id="算术运算符之一元运算符"><a href="#算术运算符之一元运算符" class="headerlink" title="算术运算符之一元运算符"></a>算术运算符之一元运算符</h4><p><img src="/images/note_images/%E4%B8%80%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6.png"></p><p><img src="/images/note_images/%E9%9D%A2%E8%AF%95%E9%A2%9802.png" alt="面试题02"></p><hr><h4 id="比较运算的概述"><a href="#比较运算的概述" class="headerlink" title="比较运算的概述"></a>比较运算的概述</h4><ul><li><p>明确：比较运算符返回的结果肯定是boolean类型。</p></li><li><p>如果条件成立，则返回true；如果条件不成立，则返回false。</p></li><li><p>包含：&gt; 、&gt;&#x3D;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D;</p></li><li><p>&#x3D;&#x3D;（等于），判断左右两边的结果是否相等。</p><p>–&gt; 如果左右两边属于“基本数据类型”，则比较左右两边的“数据值”是否相等（掌握）。</p><p>–&gt; 如果左右两边属于“引用数据类型”，则比较左右两边的“地址值”是否相等（了解）。</p></li></ul><p><img src="/images/note_images/%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6%E7%AD%89%E7%AD%89%E7%9A%84%E4%BD%9C%E7%94%A845552.png"></p><ul><li><p>!&#x3D;（不等于），判断左右两边的结果是否不相等。</p><p>–&gt; 如果左右两边属于“基本数据类型”，则比较左右两边的“数据值”是否不想等（掌握）。</p><p>–&gt; 如果左右两边属于“引用数据类型”，则比较左右两边的“地址值”是否不相等（了解）。</p></li><li><p>注意点：</p><ol><li>比较运算符是一个整体，中间不允许条件空格！</li><li>注意区分“&#x3D;”和“&#x3D;&#x3D;”的区别，“&#x3D;”属于赋值运算符，“&#x3D;&#x3D;”属于比较运算符。</li></ol></li></ul><hr><h4 id="比较运算符的面试题"><a href="#比较运算符的面试题" class="headerlink" title="比较运算符的面试题"></a>比较运算符的面试题</h4><p>问题:<strong>请问以下代码是否有问题？如果没有语法问题，请说出结果是什么？</strong></p><p><img src="/images/note_images/%E9%9D%A2%E8%AF%95%E9%A2%9803.png" alt="面试题03"></p><hr><h4 id="逻辑运算符的概述"><a href="#逻辑运算符的概述" class="headerlink" title="逻辑运算符的概述"></a>逻辑运算符的概述</h4><ul><li><p>明确：参与逻辑运算的数据必须是boolean类型，并且逻辑运算符返回的结果肯定是boolean类型。</p></li><li><p>包含：&amp;、|、^、&amp;&amp;、||、!</p></li><li><p>&amp;（与运算符），属于二元运算符</p><p>–&gt; 结论：只要两边都为true，则结果就是true。</p><p>​                只要有一边为false，则结果就是false。</p><p><strong>辅助记忆</strong>：小明“与”小红来一趟办公室。</p></li><li><p>|（或运算符），属于二元运算符</p><p>–&gt; 结论：只要两边都为false，则结果就是false。</p><p>​                只要有一边为true，则结果就是true。</p><p>辅助记忆：小明“或”小红来一趟办公室。</p></li><li><p>^：异或运算，相同为false，不同为true。</p><p>———————–以上三个开发中不常用，但是结论很重要———————-</p><p>———————–以下三个开发中常用，并且结论也很重要———————-</p></li><li><p>&amp;&amp;（短路与），属于二元运算符</p><ol><li><p>结论1：&amp;和&amp;&amp;的执行结果一样。</p></li><li><p>结论2：&amp;&amp;当左侧表达式为false时，右边不执行，结果直接原样返回左侧结果为false。</p><p>​            &amp;&amp;当左侧表达式为true时，右边执行，结果直接原样返回右侧结果。</p></li></ol><p>||（短路或），属于二元运算符</p><ol><li><p>结论1：|和||的执行结果一模一样；</p></li><li><p>结论2：如果左侧表达式的结果为true，则右边表达式肯定不会执行，并且原样返回左侧表达式的结果(true)。</p><p>​            如果左侧表达式的结果为false，则右侧表达式肯定会去执行，并且原样返回右侧表达式的结果(true|false)。</p></li></ol><p>!（非运算），属于一元运算符。</p><p><strong>使用场合：</strong></p><ul><li>如果<strong>两个条件必须成立才能满足需求</strong>，则这两个条件之间使用“&amp;&amp;”来组织关系；</li><li>如果<strong>两个条件其中一个成立既能满足需求</strong>，则这两个条件之间使用”||”来组织关系。</li></ul><hr></li></ul><h4 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h4><p><strong>请问：&amp;和&amp;&amp;的区别和联系</strong></p><ul><li>共同点：&amp;和&amp;&amp;的执行结果一模一样。</li><li>不同点：&amp;&amp;的执行效率高于&amp;，因此开发中我们常用&amp;&amp;。</li></ul><p><strong>请问：|和||的区别和联系</strong></p><ul><li>共同点：|和||的执行结果一模一样。</li><li>不同点：||的执行效率高于|，因此开发中共我们常用||。</li></ul><p><strong>问题：在注释中，如何表示区间范围？</strong></p><ul><li><p>答：[]代表包含，()代表不包含。</p><p>eg：[3,5)  –&gt; 表示3到5之间的整数，包含3，但不包含5</p><p>​        (3.0，5.0]  –&gt;  表示3.0到5.0之间的小数，包含5.0，但不包含3.0</p><hr></li></ul><h4 id="位运算（了解，建议掌握）"><a href="#位运算（了解，建议掌握）" class="headerlink" title="位运算（了解，建议掌握）"></a>位运算（了解，建议掌握）</h4><ul><li><p>明确：参与位运算的数据应该是整数型，并且位运算返回的结果也是整数。</p></li><li><p>包含：&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</p></li><li><p>&amp;（与位运算），属于二元运算符</p><p>结论：位都为1，则结果就是1；位有一个为0，则结果就是0</p><p>使用场合：学习HashMap集合的时候，验证为啥底层的数组空间长度必须为2的整数次幂。</p></li><li><p>|（或为运算），属于二元运算符</p><p>结论：位都为0，则结果就是0；位有一个为1，则结果就是1</p></li><li><p>^（异或位运算），属于二元运算符</p><p>结论：位相同，则为0；位不同，则为1</p><p>特点：对m连续异或n两次，得到的结果依旧为m</p><p>​    –&gt; m^n ^ n 的结果为m，n^m ^n的结果为m，n ^ n ^ m的结果为m</p></li></ul><p>使用场合：</p><ol><li>使用异或位运算，我们可以实现对数据的”加密”和”解密”操作。<ul><li>加密：对需要加密的数据异或m，则就得到了加密后的结果。</li><li>解密：对加密后的数据继续异或m，则就得到了解密后的结果。</li></ul></li><li>使用异或位运算，用于交换两个变量的值。<ul><li>优点：效率非常高；</li><li>缺点：复杂、不好理解。</li></ul></li></ol><p>~（非位运算符），属于一元运算符</p><p>结论：二进制位取反的含义。0取反的结果就是1，1取反的结果就是0。</p><p>&lt;&lt; （左移位运算）</p><ul><li><p>结论：对m左移n位，则等效于：m * 2<sup>n</sup></p><p>–&gt; 此处m可以是正数，也可以是负数！</p><p>特点：左移运算之后，则低位永远补0即可。</p><p>使用场合：对m做乘以2的操作，则最高效的方式为：m &lt;&lt; 1</p><p>(&gt;&gt;右移位运算)</p><ul><li><p>结论：对m右移n位，则等效于：m&#x2F;2<sup>n</sup></p><p>–&gt; 此处m必须是正数，不能为负数！</p><p>特点：正数右移，则高位补0；负数右移，则高位补1</p><p>使用场合：对m做除以2的操作，则最高效的方式为：m&gt;&gt;1</p><p>–&gt; 此处m必须有正好，不能为负数！</p></li></ul><p>(&gt;&gt;&gt;无符号右移)</p><ul><li>无论对正数还是负数做无符号右移的操作，则高位永远补0即可。</li></ul><p>​</p></li></ul><hr><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><ul><li><p>语法：数据类型 变量名 &#x3D; 条件表达式？表达式1 : 表达式2；</p></li><li><p>执行：如果”条件表达式”的结果为true，则执行”表达式1“，也就是”把表达式1*的结果赋值给等号左边的变量来保存。</p><p>​            如果”条件表达式“的结果flase，则执行“表达式2”，也就是把“表达式2”的结果赋值给等号左边的变量来保存。</p></li><li><p>注意：if…else选择结构在某些情况下可以被三目运算符代替，毕竟这两者都是做的“二选一”的操作。</p></li></ul><hr><h3 id="DAY07"><a href="#DAY07" class="headerlink" title="DAY07"></a>DAY07</h3><h4 id="idea的使用"><a href="#idea的使用" class="headerlink" title="idea的使用"></a>idea的使用</h4><p><img src="/images/note_images/idea%E7%9A%84%E4%BD%BF%E7%94%A801.png"></p><ol><li><p>如何使用IDEA来编译源文件？</p><ul><li><p>明确：IDEA默认已经集成了javac.exe这个可执行程序，也就是使用IDEA就会默认实现对源文件的编译操作。</p></li><li><p>问题：IDEA项目中的源文件放在哪里的？</p><p>–&gt; 源文件放在IDEA项目中的src目录中</p></li><li><p>问题：IDEA项目中的字节码文件放在哪儿的？</p><p>–&gt; 字节码文件放在IDEA项目中的out目录中。</p><p>2、如何使用IDEA来执行程序呢？</p></li></ul><p>​    明确：IDEA默认已经集成了java.exe这个可执行程序，因此我们直接使用IDEA就可以运行java程序，并且运行程序的方式如下：</p><p>​    方式一：选中类型或main方法左侧行号附件的运行按钮，然后选中该“run.Xxx.main()”即可。</p><p>​         –&gt;    也可以通过点击“工具栏”中的运行按钮和“控制台”左侧的运行按钮来执行程序。</p><p>​    方式二：在代码块编辑区域，我们鼠标右键，然后选中“Run Xxx.main()”即可。</p><p>​    方式三：使用“ctrl + shift + F10”快捷键来运行IDEA程序。</p><hr></li></ol><h4 id="IDEA的常用的快捷键"><a href="#IDEA的常用的快捷键" class="headerlink" title="IDEA的常用的快捷键"></a>IDEA的常用的快捷键</h4><p><img src="/images/note_images/idea%E7%9A%84%E4%BD%BF%E7%94%A802.png"></p><ul><li><strong>Ctrl + Alt + L：代码格式化快捷键</strong></li></ul><hr><h4 id="如何查看idea的代码编译错误"><a href="#如何查看idea的代码编译错误" class="headerlink" title="如何查看idea的代码编译错误"></a>如何查看idea的代码编译错误</h4><ul><li>提示1：如果某行代码有语法错误，则该代码文本底部有红色波浪线。</li><li>提示2：如果标识符错误，则该标识符的名字就会变为红色字体显示。</li></ul><p><img src="/images/note_images/idea%E7%9A%84%E4%BD%BF%E7%94%A803.png"></p><hr><h4 id="代码的执行顺序"><a href="#代码的执行顺序" class="headerlink" title="代码的执行顺序"></a>代码的执行顺序</h4><ol><li><p><strong>顺序执行</strong></p></li><li><p><strong>选择执行</strong></p><ol><li><p>if选择结构</p><ol><li><p>if单选结构</p><ul><li>概述：if(条件表达式){   &#x2F;&#x2F;当“条件表达式”的结果为true，则执行此处的代码。}</li><li>注意：<ol><li>此处的“条件表达式”返回的结果必须时Boolean型。</li><li>if选择结构依旧包含在顺序执行中，也就是顺序执行中包含了选择执行。</li></ol></li></ul></li><li><p>if双选结构</p></li><li><p>if多选结构</p><ul><li>在完整的if多选结构中，有且只能执行一个大括号中的代码（多选一）。</li><li>if，最前面，有且只能有一个（1）</li><li>else if，中间位置，可以有任意多个（0，1，2，…，n）</li><li>else，最后面，最多只能有一个（0或1）</li></ul></li><li><p><strong>if选择结构的总结</strong></p><ol><li><p>如果if选择结构中只有一行代码，则我们还可以省略大括号！</p><p>省略大括号之后，则编译时会默认添加一个大括号，用于包裹if结构中的第一行代码。</p><p>建议：对于初学者而言，不建议省略if选择结构中的大括号，省略大括号之后可能会带来额外的问题。</p></li><li><p>请问以下代码是否有语法问题？如果没有语法问题，请说出执行的结果是什么？–&gt;输出：xixi</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span> <span class="token comment">//等效于：if(false)&#123;&#125;;&#123;&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xixi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//会执行</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li><li><p><strong>switch选择结构</strong></p><p><strong>关于switch关键字的注意点：</strong></p><ul><li>此处“表达式”的结果必须是byte、short、int、char、String和枚举(后面学习)类型 ，别的类型都会编译错误！</li><li>“表达式”的结果不能是boolean类型，因此switch选择结构就不能对布尔类型的数据进行匹配！</li></ul><p><strong>关于case关键字</strong></p><ul><li><p>case关键字后面必须是“常量”,不能为“变量”，从而保证匹配的安全性！</p></li><li><p>在switch选择结构中，case后面不允许有多个“相同的”常量值，否则就会编译错误！</p></li><li><p>在此处“表达式”结果的类型和case后面“常量值”的类型必须保持一致，否则就会编译错误！</p><p>–&gt; 此处的数据类型必须“保持一致”，包含了“隐式类型转换”之后能保持一致。</p><p>–&gt; 因为“表达式”结果不支持boolean类型，因此case后面就不能为boolean类型的数据，也就是不支持区间判断。</p></li></ul><p><strong>关于break关键字的注意点：</strong></p><ul><li>一旦执行break关键字，则就会跳出switch选择结构，执行switch选择结构之后代码。</li><li>在switch选择结构中，我们可以省略break关键字，省略break关键字之后，则就会发生“穿透”，直到遇到下一个break才会结束“穿透”。</li></ul><p><strong>关于default关键字的注意点：</strong></p><ul><li>当switch选择结构中的所有case都无法匹配成功，则那么才会去执行default中的代码，此处的default类似于if选择结构中的else代码块。</li><li>在switch选择结构中，虽然可以省略default关键字，但是我们不建议省略，除非case都匹配所有的问题。</li></ul><p>强调：在某个case中定义的变量，则该变量就只能在当前作用域中使用，不能在别的case中使用！</p></li></ol></li><li><p><strong>循环执行</strong></p></li></ol><hr><h3 id="DAY08"><a href="#DAY08" class="headerlink" title="DAY08"></a>DAY08</h3><h4 id="什么是代码块？"><a href="#什么是代码块？" class="headerlink" title="什么是代码块？"></a>什么是代码块？</h4><ul><li>在java语言中，什么是局部变量呢？在代码块或方法体中定义的变量，我们就称为“局部变量”。</li><li>在java语言中，局部变量的生命周期在哪儿？定义变量的时候“出生”，执行到所在大括号的结束位置就“死亡”。</li><li>在java语言中，代码块具备什么特点呢？在代码块中定义的变量，则该变量就只能在当前作用域中使用，不能再代码块之外使用。</li><li>if选择结构，我们也称之为“带名字的代码块”或“带条件的代码块”，因此在if选择结构中定义的变量，我们不能在if选择结构之外使用。</li></ul><p><strong>当if单选结构和if多选结构都能解决同一个问题的时候，我们建议使用if多选结构来实现，因为此处使用if多选结构效率高。</strong></p><hr><h4 id="switch的匹配底层如何实现的呢？"><a href="#switch的匹配底层如何实现的呢？" class="headerlink" title="switch的匹配底层如何实现的呢？"></a>switch的匹配底层如何实现的呢？</h4><ul><li><strong>如果匹配的是“基本数据类型”，则使用“&#x3D;&#x3D;”比较运算符实现匹配操作；</strong></li><li><strong>如果匹配的是“引用数据类型”，则使用equals()方法来实现匹配。</strong></li></ul><p><strong>强调</strong>：每个功能完成之后，一定要对各种情况进行测试，从而找到代码中隐藏的问题（bug）。</p><hr><h4 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h4><ol><li>if选择结构的使用场合：<ul><li>if选择结构适用于“boolean”类型数据的判断，也就是适用于“区间范围”的判断。</li></ul></li><li>switch选择结构的使用合成：<ul><li>switch选择结构适用于对“固定值”的判断，也就是“固定值”的判断必须使用switch来实现。</li></ul></li><li>if选择结构和switch选择结构的总结<ul><li>使用switch结构能做的事情，我们使用if选择结构都能实现；</li><li>使用if选择结构能做的事情，switch不一定都能实现。</li></ul></li></ol><hr><h4 id="循环结构的分类"><a href="#循环结构的分类" class="headerlink" title="循环结构的分类"></a>循环结构的分类</h4><ol><li><p>for循环</p><ul><li><p>请问以下代码有没有语法错误？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//没有语法问题，循环初始化在for循环外，内部可省略</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>for循环结构，我们也称为“带名字的代码块”或“带条件的代码块”，因此在“循环体”中定义的变量不能再循环之外使用。</p></li><li><p>在循环体定义的变量，每次执行循环体该变量都“出生”，每次循环体执行完毕该变量都“死亡”。</p></li><li><p>问题：想要在循环体中，每次操作的都是同一个变量，则该变量应该定义在哪里？–&gt; 必须定义在循环之前！</p></li><li><p>“循环条件表达式”返回的结果必须是boolean类型，但是“循环初始化表达式”和“循环后的操作表达式”没有特殊要求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时循环两个变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">4</span><span class="token punctuation">,</span> j <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">",j = "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>while循环</p></li><li><p>do…while循环</p></li></ol><p><strong>对程序有利的死循环</strong></p><ul><li><p>使用：当不确定循环执行的次数时，我们就使用死循环来实现。</p></li><li><p>问题：如何书写简单的while、for死循环？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//等效于：for(;true;)&#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>注意：使用for循环的时候，我们如果省略“循环条件表达式”，则默认值就是true。</p></li></ul><hr><h4 id="break与return"><a href="#break与return" class="headerlink" title="break与return"></a>break与return</h4><p><img src="/images/note_images/break_and_return.png"></p><hr><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p><img src="/images/note_images/continue.png"></p><hr><h3 id="DAY08-1"><a href="#DAY08-1" class="headerlink" title="DAY08"></a>DAY08</h3><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><p><img src="/images/note_images/%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF.png"></p><hr><h4 id="方法的声明"><a href="#方法的声明" class="headerlink" title="方法的声明"></a>方法的声明</h4><p><img src="/images/note_images/%E6%96%B9%E6%B3%95%E7%9A%84%E5%A3%B0%E6%98%8E01.png"></p><hr><h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><p><img src="/images/note_images/%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8.png"></p><hr><h4 id="调用方法的内存分析（重点）"><a href="#调用方法的内存分析（重点）" class="headerlink" title="调用方法的内存分析（重点）"></a>调用方法的内存分析（重点）</h4><ol><li>栈内存的特点？<ul><li>栈内存具备“先进后出，后进先出”的特点，类似于生活中的“子弹夹”。</li></ul></li><li>调用方法的内存分析？<ul><li>调用方法的时候，则自动就会在栈内中开辟一个“栈帧”，用于执行该方法体中的代码。–&gt;入栈操作</li></ul></li><li>方法调用完毕的内存分析<ul><li>在方法体中一旦执行“return”关键字，则就证明方法调用完毕，那么调用方法时所开辟的“栈帧”就会被摧毁。–&gt;  弹栈操作</li></ul></li><li><strong>问题：调用方法的时候，实参num1和num2与形参num1和num2是否有关系？</strong><ul><li>答案：此处的“实参”和”形参”没有任何关系，仅仅是”名字”相同而已。</li></ul></li></ol><hr><h4 id="方法的使用（重点）"><a href="#方法的使用（重点）" class="headerlink" title="方法的使用（重点）"></a>方法的使用（重点）</h4><ol><li><p>方法的使用原则</p><ul><li>先声明，后调用。</li></ul></li><li><p>方法声明的难点</p><ol><li>明确1：完成该功能，是否需要返回值。–&gt; 返回值类型</li><li>明确2：完成该功能，是否需要外部参数参与方法内部的运算。 –&gt; 形参列表</li></ol></li><li><p><strong>方法的分类</strong></p><ol><li><p>无参无返回值方法</p><ul><li><p>需求：在方法中输出“hello world”。</p></li><li><p>分析：完成该功能，无需返回值，因此返回值类型为void。</p><p>​            完成该功能，无需外部参数参与方法内部运算，因此没有形参。</p></li></ul></li><li><p>无参有返回值方法</p><ul><li><p>需求：调用方法获得常量3+4的和。</p></li><li><p>分析：完成该功能，需要返回值，因此返回值类型为int。</p><p>​            完成该功能，无需外部参数参与方法内部的运算，因此没有参数</p></li></ul></li><li><p>有参无返回值方法</p><ul><li><p>需求：在方法中输出指定两个int数据之和。</p></li><li><p>分析：完成该功能，无需返回值，因此返回值类型为void。</p><p>​            完成该功能，需要外部参数参与内部的运算，也就是需要两个int类型的形参。</p></li></ul></li><li><p>有参有返回值方法</p><ul><li><p>需求：调用方法获得指定两个double数据之和。</p></li><li><p>分析：完成该功能，需要返回值，因此返回值类型为double。</p><p>​            完成该功能，需要外部参数参与方法内部的运算，也就是需要两个double类型的形参。</p></li></ul></li></ol></li></ol><hr><h4 id="方法的重载（overload）重点"><a href="#方法的重载（overload）重点" class="headerlink" title="方法的重载（overload）重点"></a>方法的重载（overload）重点</h4><ol><li><p>方法重载的定义</p><ul><li><p>同一个类中，具有相同的方法名，但是参数个数不同或参数类型不同，这就构成了方法的重载！</p></li><li><p>核心：两同，两不同</p><p>–&gt; 两同：同一个类中，具有同名的方法。</p><p>–&gt;两不同：参数个数不同，参数个数不同 或 参数类型不同。</p></li></ul></li><li><p>方法重载的特点</p><ul><li>修饰符不同，没有构成方法重载；</li><li>形参名字不同，没有构成方法重载；</li><li>返回值类型不同，没有构成方法重载。</li></ul></li><li><p>方法重载的好处</p><ul><li>官方：方法重载的出现，使其同一个类中允许定义多个同名的方法，从而避免了方法名被污染。</li><li>通俗：学习方法重载之后，如果同一个类中多个同名的方法发生了编译错误，则首先考虑这些方法是否满足方法重载!</li></ul></li><li><p>重载方法的调用</p><ul><li>调用重载方法的时候，会根据实参的“个数”和“类型”来选择调用合适的方法。</li></ul></li><li><p>目前已经用过的重载方法有哪些？</p><ul><li>print()、println()等等</li><li>问题：通过IDEA工具，如何查看底层的API源码？</li><li>实现：按下Ctrl键，然后鼠标左键单击即可。</li></ul></li></ol><hr><h3 id="DAY09"><a href="#DAY09" class="headerlink" title="DAY09"></a>DAY09</h3><h4 id="数组（引用数据类型，最常用、最基础的数据结构）"><a href="#数组（引用数据类型，最常用、最基础的数据结构）" class="headerlink" title="数组（引用数据类型，最常用、最基础的数据结构）"></a>数组（引用数据类型，最常用、最基础的数据结构）</h4><ol><li><p><strong>数组的定义</strong></p><ul><li>数组就是一个存储“相同数据类型”的“有序”集合（容器）。</li></ul><p><img src="/images/note_images/%E6%95%B0%E7%BB%8401.png"></p></li><li><p><strong>数组的声明</strong></p><ul><li><p>明确：所谓数组的声明，指的就是给数组取一个名字，类似于变量的声明。</p></li><li><p>语法1：数据类型[] 数组名;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>语法2：数据类型 数组名[];</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>注意：开发中，建议使用“语法1”来声明数组，因为“数据类型[]”代表的是“数组类型”。</p></li></ul></li><li><p><strong>数组的创建</strong></p><ol><li><p>明确：所谓数组的创建，指的就是在内存中为数组开辟存储空间。</p></li><li><p>方式一：动态创建数组（仅仅在内存中开辟存储空间，但没有给数组元素指定赋值）</p><p>语法：数据类型[] 数组名 &#x3D; new 数据类型[空间长度];</p><p>​    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E6%95%B0%E7%BB%8403.png"></p></li><li><p>方式二：静态创建数组（不但在内存中开辟存储空间，并且还给数组元素指定赋值）</p><p>语法1：数据类型[] 数组名 &#x3D; {数据1,数据2,数据3,…};</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"gg"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>语法2：数据类型[] 数组名 &#x3D; new 数据类型[]{数据1,数据2,数据3,…};</p><p>​        </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"ss"</span><span class="token punctuation">,</span><span class="token string">"tr"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E6%95%B0%E7%BB%8402.png"></p></li></ol></li></ol><hr><h4 id="操作数组元素"><a href="#操作数组元素" class="headerlink" title="操作数组元素"></a>操作数组元素</h4><p>明确：想要操作数组元素，则必须通过“索引”来实现，因为通过“索引”就能找到元素对应的存储空间，然后就能做出“赋值”和“取值”的操作。</p><ol><li><p><strong>数组的注意点</strong></p><ul><li><p>数组存储的是相同数据类型的元素，则意味着每个元素占用的字节数相同。</p></li><li><p>数组是一块连续的存储空间，则意味着相邻两个元素的存储空间是紧挨着的。</p></li><li><p>创建数组的时候，我们必须明确数组的空间长度，并且数组一旦创建成功，则数组的空间长度就不能改变了。</p></li><li><p>给数组元素赋值的时候，赋值“元素的类型”必须和“声明数组的数据类型”保持一致，否则就会编译错误！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>  <span class="token comment">//没问题</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>  <span class="token comment">//编译错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>声明数组的时候，我们可以使用“基本数据类型”来声明数组，也可以使用“引用数据类型”来声明数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1；    <span class="token comment">//基本数据类型</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">;</span>   <span class="token comment">//引用数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通过索引来操作数组元素的时候，操作的索引值必须合法，如果索引值不合法就会抛出数组索引越界异常。</p><p>明确：数组索引的合法取值范围在[0,数组长度-1]之间，如果索引越界就会抛出数组索引越界异常（ArrayIndexOutOfBoundsException）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">pritnln</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出11</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//抛出数组索引越界异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>通过大括号创建出来的数组，则无法“直接”作为方法的”返回值”和”实参”，因为编译器不认识大括号创建出来的数组。</strong></p></li></ul><hr></li></ol><h4 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h4><ul><li>明确：基本数据类型没有属性和方法，但是引用数据类型有属性和方法。</li><li>强调：通过数组的“length”属性，我们可以动态的获得数组的空间长度。</li></ul><hr><h4 id="数组元素的默认值"><a href="#数组元素的默认值" class="headerlink" title="数组元素的默认值"></a>数组元素的默认值</h4><p>明确：通过“动态创建数组”的方式，则数组中每个元素都有默认值，并且元素的默认值规则如下：</p><ul><li>整数型（byte、short、int和long）数组元素的默认值为：0</li><li>浮点型（float和double）数组元素的默认值为：0.0</li><li>布尔型（boolean）数组元素的默认值为：false</li><li>字符型（char）数组元素默认值为：’\u0000’  –&gt; 代表空格字符</li><li>引用数据类型（数组、字符串、类和接口）数组元素的默认值为：Null  –&gt; 此处是null关键字，代表的是空对象。</li></ul><hr><h4 id="数组元素的遍历"><a href="#数组元素的遍历" class="headerlink" title="数组元素的遍历"></a>数组元素的遍历</h4><ol><li><p>使用普通for循环来实现</p><ul><li>思路：通过普通for循环，获得[0, 数组长度-1]的合法索引取值，然后再通过索引获得数组元素</li><li>优势：遍历的过程中，可以获得数组的合法索引值，因此遍历过程中我们可以操作数组中的元素。</li><li>劣势：语法复杂，效率较低。</li><li>使用场合：遍历数组的过程中，如果想要获得数组的合法索引取值，或者想要在遍历过程中操作数组元素，则“必须”通过普通for循环来实现。</li></ul></li><li><p><strong>使用增强for循环来实现</strong></p><ul><li><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*for(数据类型 变量名 : 数组或集合)&#123;//循环体&#125;*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//增强for循环</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> element <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>优势：语法简洁，效率较高。</p></li><li><p><strong>劣势：遍历的过程中，不能获得数组的合法索引值，因此<u>遍历过程中</u>我们无法操作数组中的元素。</strong></p></li><li><p>使用场合：遍历数组的过程中，如果<strong>无需获得数组的合法索引取值</strong>，也就是遍历数组过程中<strong>无需操作数组元素，</strong>则建议通过增强for循环来实现。</p></li><li><p><strong>快速使用增强for循环来遍历数组：数组名.for + enter</strong></p></li><li><p><strong>强调：通过length属性获得数组空间长度，则该操作的效率是非常低，因此在循环中切记不要使用length属性来获得数组空间长度。</strong></p></li><li><p><strong>建议定义一个数组长度变量来循环。</strong></p></li></ul></li></ol><hr><h4 id="栈内存的概述"><a href="#栈内存的概述" class="headerlink" title="栈内存的概述"></a>栈内存的概述</h4><ul><li><p>存储：局部变量</p><p>–&gt; “基本数据类型”的局部变量，则在栈内存中存储的是”数据值”。</p><p>–&gt; “引用数据类型”的局部变量，则在栈内存中存储的是”地址值”。</p><p>特点：</p><ul><li>栈内存具备”先进后出”或”后进先出”的特点，类似于生活中的”子弹夹”。</li><li>栈内存是一块连续的存储空间，由虚拟机分配，效率高！</li><li>栈内存由虚拟机来管理，也就是无需程序员来手动管理内存。</li><li>虚拟机会为每个线程创建一个栈内存，用于存放该线程执行方法的信息。</li></ul></li></ul><hr><h4 id="堆内存的概述"><a href="#堆内存的概述" class="headerlink" title="堆内存的概述"></a>堆内存的概述</h4><p>存储：对象（数组）</p><p>特点：</p><ul><li>堆内存不是一块连续的存储空间，分配灵活，但是效率低。</li><li>堆内存理论上需要程序员来手动管理，但是实际上交由”垃圾回收机制”来管理。</li><li><strong>虚拟机中只有一个堆内存，被所有的线程共享。</strong></li></ul><hr><h4 id="直接输出一个数组，则输出内容是什么？"><a href="#直接输出一个数组，则输出内容是什么？" class="headerlink" title="直接输出一个数组，则输出内容是什么？"></a>直接输出一个数组，则输出内容是什么？</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：[I@4554617c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>分析：”[I@4554617c”表示的含义是什么？</p><ul><li>[     –&gt;    代表数组类型；</li><li>I     –&gt;    代表数组元素为int类型</li><li>@之后    –&gt;    代表哈希编码之后的6进制地址值（简称：地址值）</li></ul><p>注意：此处 “ [I “ 代表的就是int类型的数组。</p><p>问题：<strong>想要输出数组中的所有元素，则该如何实现？</strong></p><ul><li>必须遍历数组来实现，而不能直接输出该数组（地址值）。</li></ul><p><img src="/images/note_images/%E6%A0%88%E5%86%85%E5%AD%98%E4%B8%8E%E5%A0%86%E5%86%85%E5%AD%9801.png"></p><p>eg1：</p><p><img src="/images/note_images/%E6%A0%88%E5%86%85%E5%AD%98%E4%B8%8E%E5%A0%86%E5%86%85%E5%AD%9802.png"></p><p>eg2:</p><p><img src="/images/note_images/%E6%A0%88%E5%86%85%E5%AD%98%E4%B8%8E%E5%A0%86%E5%86%85%E5%AD%9803.png"></p><hr><h4 id="目前已经见过的异常有哪些？"><a href="#目前已经见过的异常有哪些？" class="headerlink" title="目前已经见过的异常有哪些？"></a>目前已经见过的异常有哪些？</h4><ol><li>算数异常（ArithmeticException）<ul><li>原因：做除法操作的时候，如果分母为零，则就会抛出算数异常。</li></ul></li><li>数组索引越界异常（ArrayIndexOutOfBoundsException）<ul><li>原因：根据索引操作数组元素的时候，如果操作的索引值越界，则就会抛出数组索引越界异常。</li></ul></li><li>空指针异常（NullPointerException）<ul><li>原因：我们对空对象做操作，则就会抛出空指针异常。</li></ul></li></ol><hr><h4 id="调用方法时，实参传递给形参的过程-超级重点"><a href="#调用方法时，实参传递给形参的过程-超级重点" class="headerlink" title="调用方法时，实参传递给形参的过程(超级重点)"></a>调用方法时，实参传递给形参的过程(超级重点)</h4><ol><li><p><strong>调用方法时，基本数据类型的传递</strong></p><ul><li>结论：”基本数据类型”的传递，属于”数据值”的传递。</li><li>解释：”实参”赋值给”形参”之后，则”实参”和”形参”就没有任何联系了，我们在方法中修改”形参”的值，则”实参”的值不会改变。</li></ul><p><img src="/images/note_images/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BC%A0%E9%80%92.png"></p></li><li><p><strong>调用方法时，引用数据类型的传递</strong></p><ul><li><strong>结论：”引用数据类型”的传递，属于”地址值”的传递。</strong></li><li>解释：”实参”赋值给”形参”之后，则”实参”和”形参”保存的地址值就相同，也就意味着”实参”和”形参”指向了同一块存储空间，<strong>我们在方法中修改”形参”指向存储空间的数据，则”实参”指向该存储空间的数据也被修改了。</strong></li></ul><p><img src="/images/note_images/%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%BC%A0%E9%80%92.png"></p></li></ol><hr><h4 id="数组例题："><a href="#数组例题：" class="headerlink" title="数组例题："></a>数组例题：</h4><p><img src="/images/note_images/%E8%8E%B7%E5%8F%96%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%80%BC.png"></p><p><img src="/images/note_images/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%85%83%E7%B4%A0%E7%B4%A2%E5%BC%95.png"></p><hr><h3 id="DAY10"><a href="#DAY10" class="headerlink" title="DAY10"></a>DAY10</h3><h4 id="数组反转"><a href="#数组反转" class="headerlink" title="数组反转"></a>数组反转</h4><p>需求：将数组元素反转，原数组{5, 12, 54,7676,9}，反转后为：{9, 676, 54, 12, 5}。</p><p>要求：使用两种方式来实现</p><ol><li><p>方式一：<strong>创建一个新的数组，用于保存反转之后的结果。</strong></p><ul><li>缺点：<ul><li>需要创建新的数组，浪费了存储空间。</li><li>需要完整遍历整个数组，浪费了执行时间。</li></ul></li></ul></li><li><p>方式二：<strong>使用“首尾元素交换位置”的思路来实现。</strong></p><ul><li><p>优点：</p><ul><li>无需创建新的数组，节约了存储空间。</li><li>只需遍历数组长度的一半，节约了执行时间。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>length <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><p><img src="/images/note_images/%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%8F%8D%E8%BD%AC.png"></p><hr><h4 id="什么是静态方法"><a href="#什么是静态方法" class="headerlink" title="什么是静态方法"></a>什么是静态方法</h4><ul><li>使用static关键字修饰的方法，我们就称之为“静态方法”。</li></ul><p>静态方法的调用：</p><ul><li><p>情况一：调用“当前类”的静态方法</p><p>–&gt; 语法：方法名（实参列表）；</p></li><li><p>情况二：调用“别的类”的静态方法</p><p>–&gt; 语法：类名.方法名(实参列表);</p></li></ul><hr><h4 id="数组工具类"><a href="#数组工具类" class="headerlink" title="数组工具类"></a>数组工具类</h4><ul><li>问题：在前面的学习中，我们把操作数组的静态方法放到了不同的类中，因此想要调用这些静态方法的时候，我们首先得明确该方法在那个类中，然后才能通过“类名”来调用这些静态方法，因此调用这些方法的时候非常不方便。</li><li>解决：定义一个“数组工具类”，然后把操作数组的静态方法都放到该“数组工具类”中。</li></ul><ol><li><p>Arrays工具类的概述</p><ul><li>Arrays工具类在”java.util”包中，因此我们使用Arrays工具类的时候，必须通过import关键字导入Arrays类，然后才能使用Arrays工具类。</li><li>Arrays工具类我们称之为“数组相关的工具类”，在Arrays类中提供了很多操作数组的“静态方法”，因此我们调用这些方法的时候，直接通过类名.来调用。</li></ul></li><li><p>Arrays工具类的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//作用：把数组转换为字符串并返回，也就是获得数组中的元素，然后把这些元素拼接成字符串并返回。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//作用：数组的填充操作，把arr数组中的所有元素设置为val</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//作用：给数组元素执行“排序”操作，默认为“升序”排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：关于数组的排序算法，我们后面会学习(冒泡排序和选择排序)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//作用：对“指定范围”的数组元素执行“升序”排序</span><span class="token comment">//范围：从fromIndex索引位置开始（包含），到toIndex索引位置结束（不包含）。</span><span class="token comment">//注意：fromIndex取值范围在[0,数组长度-1]之间，toIndex取值范围在[0,数组长度]之间，并且必须满足toIndex大于fromIndex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/*作用：二分查找，查询key在arr数组中的索引位置。返回值：如果查询元素在数组中存在，则返回该元素在数组中的索引位置；如果查询的元素在数组中不存在，则返回负数即可。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/*作用：对“指定范围”的数组元素执行二分查找操作，此处要求arr数组为升序排序。范围；从fromIndex索引位置开始（包含），到toIndex索引位置结束（不包含）。注意：fromIndex取值范围在[0, 数组长度-1]，toIndex取值范围在[0,数组长度]之间，并且必须满足toIndex大于fromIndex。返回值：如果查询元素在数组中存在，则返回该元素在数组中的索引位置；如果查询的元素在数组中不存在，则返回负数即可。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/*作用：从索引为0的位置开始拷贝，一共拷贝newLength个数组元素并返回。注意：此处newLength取值范围在[0,数组长度]之间。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOfRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/*作用：拷贝指定索引范围的数组元素范围：从from索引位置开始（包含），到to索引位置结束（不包含）。注意：from取值范围在[0,数组长度 - 1]之间，to取值范围在[0,数组长度]之间，并且必须满足to大于from*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><img src="/images/note_images/copyOfRange.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">/*作用：判断arr1和arr2两个数组是否相等。返回值：如果arr1和arr2的地址值相等或arr1和arr2的数组元素一一对应，则都返回true，否则一律返回false。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.什么是数组拷贝？</p><ul><li><strong>把A数组中的元素拷贝进入B数组中，则我们修改A数组的元素，那么B数组中的元素不会被修改，这就是数组的拷贝操作。</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//需求：把arr1数组前3个元素拷贝进入arr2数组中</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：[11,22,33]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题：查询某个元素在数组中的索引位置，则实现方案有哪些？</strong></p><ul><li><p><strong>方式一：顺序查找（线性查找）</strong></p><p>–&gt; 优点：对数组元素是否排序没有要求！</p><p>–&gt; 缺点：查询效率非常低！</p></li><li><p><strong>方式二：二分查找（折半查找）</strong></p><p>–&gt; 优点：查询效率非常高</p><p>–&gt; 缺点：要求数组元素必须排序，默认为升序排序。</p></li></ul><hr><h4 id="方法的可变参数（掌握）"><a href="#方法的可变参数（掌握）" class="headerlink" title="方法的可变参数（掌握）"></a>方法的可变参数（掌握）</h4><p>1、可变参数的引入</p><ul><li><p>需求：定义一个方法，用于获得指定两个int类型数据之和。</p></li><li><p>实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>需求：定义一个方法，用于获得任意多个int类型数据之和（至少有两个int类型的数据）</strong></p></li><li><p>实现1：使用“方法的重载”来实现。</p><p>–&gt; 理论上没有问题，但是实际操作有问题。</p></li><li><p>实现2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–&gt;使用“数组”来实现虽然可行，但是不太符合题意。</p></li><li><p>实现3：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–&gt; 使用“方法的可变参数”来实现，该方式是最优的解决方案。</p></li></ul><hr><h4 id="可变参数的语法"><a href="#可变参数的语法" class="headerlink" title="可变参数的语法"></a>可变参数的语法</h4><ul><li>语法：数据类型 … 可变参数名</li><li>eg：int … arr</li></ul><p><strong>可变参数的注意点</strong></p><ul><li><p>“可变参数”必须存在于“形参列表”中，并且“可变参数”必须在形参列表“最末尾”。</p><p>–&gt; 也就是说，方法的形参列表中最多只能定义一个可变参数（0或1）</p></li><li><p>在方法体中，我们可以把可变参数当成“数组”来使用，本质上可变参数就是数组的另外一种语法表现形式。</p><p>–&gt; eg：调用方法的是，实参为”int类型的数组”，则方法的形参可以为“int类型的可变参数”。</p><p>–&gt;调用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–&gt; 声明方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> in <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>eg:在同个类中，以下两个同名的方法发生了编译错误，因为这两个方法没有构成方法的重载！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>调用拥有可变参数的方法时，则实参和形参的“个数”不必相同，但是实参和形参的“类型”必须相同。</p></li></ul><p><strong>可变参数的使用场合</strong></p><ul><li>​    定义一个方法的时候，参数的类型都相同，但是参数的个数不确定时。</li></ul><hr><h4 id="数组的核心特点"><a href="#数组的核心特点" class="headerlink" title="数组的核心特点"></a>数组的核心特点</h4><ul><li>数组是一块连续的存储空间，则意味着相邻两个元素的存储空间是紧挨着的。</li><li>数组存储的是相同数据类型的元素，则意味着每个元素占用的字节数相同。</li><li>常见数组则必须明确数组的空间长度，数组一旦创建成功，则数组的空间长度就不能改变。</li></ul><ol><li><p><strong>根据索引操作【改和查】</strong></p><ul><li><p>结论：根据索引操作元素效率非常高，甚至是所有数据结构中效率最高的。</p></li><li><p>依据：数组是一块连续的存储空间，则意味着相邻两个元素的存储空间是紧挨着。</p><p>–&gt; 数组存储的是相同数据类型的元素，则意味着每个元素占用的字节数相同。</p><p>–&gt; <strong>寻址公式：首地址 + 索引值 * 每个元素占用的字节数</strong></p><p><img src="/images/note_images/%E5%AF%BB%E5%9D%80%E5%85%AC%E5%BC%8F.png"></p></li></ul></li><li><p><strong>根据索引删除元素【删】</strong></p><ul><li><p>结论：根据索引删除元素的效率非常低，因为需要大量的挪动数组元素。</p></li><li><p>依据：数组是一块连续的存储空间，则意味着相邻两个元素的存储空间是紧挨着。</p><p>–&gt; 常见数组则必须明确数组的空间长度，数组一旦创建成功，则数组的空间长度就不能改变了。</p></li></ul><p><img src="/images/note_images/%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0.png"></p></li><li><p><strong>根据索引插入元素【增】</strong></p><ul><li><p>结论：根据索引插入元素的效率非常低，因为需要大量挪动数组元素+扩容操作。</p></li><li><p>依据：数组时一块连续的存储空间，则意味着相邻两个元素的存储空间时紧挨着。</p><p>–&gt; 常见数组则必须明确数组的空间长度，数组一旦创建成功，则数组的空间长度就不能改变啦。</p></li></ul></li></ol><p><img src="/images/note_images/%E6%95%B0%E7%BB%84%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%E6%A0%88%E4%B8%8E%E5%A0%86%E7%9A%84%E5%8F%98%E5%8C%96.png"></p><hr><h3 id="DAY11"><a href="#DAY11" class="headerlink" title="DAY11"></a>DAY11</h3><h4 id="二维数组（矩阵，很难，了解）"><a href="#二维数组（矩阵，很难，了解）" class="headerlink" title="二维数组（矩阵，很难，了解）"></a>二维数组（矩阵，很难，了解）</h4><ol><li><p>二维数组的定义</p><ul><li><p>数组中的每个元素都是一堆数组，这样的数组我们就称之为“二维数组”。</p></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>二维数组的声明</p><ul><li><p>明确：所谓二维数组的声明，指的就是给二维数组取一个名字，类似于“变量的声明”。</p></li><li><p>语法1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数据类型[][] 数组名；</span><span class="token comment">//int[][] arr1;</span><span class="token comment">//String[][] arr2;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>语法2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数据类型[] 数组名[];</span><span class="token comment">//int[] arr1[]</span><span class="token comment">//String[] arr2[]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注意：实际开发中，我们建议使用”语法1”来声明二维数组，因为“数据类型  [  ]  [  ] ”代表的是“二维数组类型”。</p></li></ul></li><li><p>二维数组的创建</p><ul><li><p>明确：所谓二维数组的创建，指的就是在堆内存中为二维数组开辟存储空间。</p></li><li><p><strong>方式一：创建“等长”的二维数组（动态）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//语法：数据类型[][] 数组名 = new 数据类型[m][n];</span><span class="token comment">// m: 设置二维数组得空间长度</span><span class="token comment">//n：设置一维数组的空间长度</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E7%AD%89%E9%95%BF%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84.png"></p></li><li><p><strong>方式二：创建“不等长”的二维数组（动态）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//语法：数据类型[][] 数组名 = new 数据类型[m][];</span><span class="token comment">//m:设置二维数组的空间长度</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E4%B8%8D%E7%AD%89%E9%95%BF%E7%9A%84%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84.png"></p></li><li><p><strong>方式三：静态创建的二维数组（静态）(等长|不等长)</strong></p><p>–&gt; 语法1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数据类型[][] 数组名 = &#123;&#123;数据1,数据2&#125;, &#123;数据3,数据4&#125;,...&#125;</span><span class="token comment">//int[][] arr1 = &#123;&#123;11,22,33&#125;,&#123;55,66,77&#125;,&#123;13,56,78&#125;&#125;;</span><span class="token comment">//String[][] arr2 = &#123;&#123;"aa","bb"&#125;,&#123;"cc","dd","yt"&#125;&#125;;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>–&gt;语法2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数据类型[][] 数组名 = new 数据类型[][]&#123;&#123;数据1,数据2&#125;, &#123;数据3,数据4&#125;,...&#125;;</span><span class="token comment">////int[][] arr1 = new int[][]&#123;&#123;11,22,33&#125;,&#123;55,66,77&#125;,&#123;13,56,78&#125;&#125;;</span><span class="token comment">//String[][] arr2 = new String[][]&#123;&#123;"aa","bb"&#125;,&#123;"cc","dd","yt"&#125;&#125;;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：通过大括号创建出来的二维数组，我们无法直接作为方法的”实参”和”返回值”，因为编译器不认识大括号创建的二维数组。</strong></p></li></ul></li></ol><p><img src="/images/note_images/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%8401.png"></p><hr><h4 id="断点调试（debug调试，重点）"><a href="#断点调试（debug调试，重点）" class="headerlink" title="断点调试（debug调试，重点）"></a>断点调试（debug调试，重点）</h4><ol><li><p><strong>debug调试的作用</strong></p><ul><li>查看代码的执行顺序，分析变量值的变化，从而找到问题的并解决问题。</li></ul></li><li><p><strong>debug的调试步骤</strong></p><ul><li><p>第一步：在代码可能出现问题的位置，我们在该位置打一个断点。</p><p>–&gt; 在该代码行号左侧位置，我们单击打一个断点（红色圆圈）</p></li><li><p>第二步：开启debug调试来执行程序，则代码就会停留在打断点的位置。</p><p>–&gt;方式一： 点击类名或main方法左侧绿色按钮，然后选中”Debug Xxx.main()”即可。</p><p>–&gt; 方式二：在代码编辑区域，我们鼠标右键然后选中”Debug Xxx.main()”即可。</p><p>–&gt; 方式三：已经执行程序后，我们点击工具栏或控制台左侧的”debug按钮”。</p></li><li><p>明确：开启debug调试之后，则就会出现debug窗口，debug窗口的作用如下：</p><p><strong>Debugger</strong></p><ul><li>Frames：显示代码停留的位置（包、类、方法和行号）</li><li>Variables：显示当前方法已经执行过的变量的值</li></ul><p><strong>Console</strong></p><ul><li>显示输出的内容或获取输入的内容。</li></ul></li><li><p>第三步：控制代码的执行，也就是通过Debug窗口来控制代码的执行。</p><ol><li>F8：执行下一行代码。</li><li>F7：进入执行方法体中的代码。</li><li>shift + F8：结束当前方法，回到方法的调用位置。</li><li>Alt + F9：直接执行到下一个断点的位置。</li><li>Alt + F8：计算并执行某行未执行代码的运算结果。</li></ol></li><li><p>第四步：结束debug调试。</p><p>首先，取消断点（单击取消）；然后，结束程序（点击红色按钮）；最后，关闭debug窗口。</p></li></ul></li></ol><hr><h4 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h4><ul><li><p>封装（堆功能method的封装）</p></li><li><p>典型：c语言</p></li><li><p>特点：以线性的思维来思考解决问题，强调一步一步的实现。</p><p>–&gt; 强调程序员是一个“实施者”，类似于公司中的“小职员”。</p></li><li><p><strong>优点：效率高。</strong></p></li><li><p><strong>缺点：程序的复用性、可维护性和可扩展性较低</strong>。</p></li><li><p>使用场合：适用于“小型”的程序，例如：计算器、嵌入式开发等等</p></li></ul><hr><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><ul><li><p>封装（对数据field和功能method做的封装）、继承和多态。</p></li><li><p>典型：C++、C#、java等。</p></li><li><p>特点：以非线性的思维来思考解决问题，强调宏观上的把控。</p><p>–&gt; 强调程序员是一个“指挥官”，类似于公司中的“小老板”。</p></li><li><p><strong>优点：程序的复用性、可维护性和可扩展性较高。</strong></p></li><li><p><strong>缺点：效率低。</strong></p></li><li><p>使用场合：适用于“大型”的程序，例如：京东、淘宝、微信等等。</p></li></ul><hr><h4 id="面向对象编程的特点"><a href="#面向对象编程的特点" class="headerlink" title="面向对象编程的特点"></a>面向对象编程的特点</h4><ul><li><strong>宏观</strong>上采用面向对象的思维来把控，<strong>微观</strong>实施上依旧采用的是面向过程，即<strong>：面向对象中包含了面向过程。</strong></li></ul><hr><h4 id="类和对象（理解）"><a href="#类和对象（理解）" class="headerlink" title="类和对象（理解）"></a>类和对象（理解）</h4><ol><li><p>对象（instance）</p><ul><li>从编程的角度来理解：万物皆对象。</li><li>eg：教室里面的每个学生、每个凳子、每张椅子。。。</li><li><strong>每个对象都是“独一无二”的，类似于每个同学都是“独一无二”的。</strong></li></ul></li><li><p>类（class）</p><ul><li>从编程的角度来理解：类就是对一类事物的抽象，抽象就是提取这一类事物的共同属性和行为，这样就形成了类。</li><li>eg:班上的每个同学都有姓名、年龄和成绩等属性，每个同学都有吃饭、睡觉和学习等行为，则我们对班上的同学进行向上提取，那么就得到了学生类。</li></ul></li><li><p>类和对象</p><ul><li><p>从编程的角度来分析：我们以类为模板，然后实例化出对象。</p><p>–&gt; <strong>先有类，后有对象。</strong></p><p>–&gt; <strong>类是对象的模板，对象是类的实例。</strong></p><p>eg：我们以小汽车图纸（类）为模板，然后生产出一辆一辆的小汽车（对象）。</p></li></ul></li></ol><hr><h4 id="如何定义类"><a href="#如何定义类" class="headerlink" title="如何定义类"></a>如何定义类</h4><p>语法：[修饰类] class类名{ &#x2F;&#x2F;书写的代码 }</p><p>注意：</p><ul><li>使用class关键字修饰的就是类，也就是类必须使用class来修饰。</li><li><strong>类名必须满足“标识符”的命名规则，必须满足“大驼峰”的命名规范，并且最好“见名知意”。</strong></li><li>使用“public”关键字修饰的类，则类名必须和源文件名字保持一致，否则就会出现编译错误。</li></ul><hr><h4 id="类中的组成"><a href="#类中的组成" class="headerlink" title="类中的组成"></a>类中的组成</h4><ul><li>数据（属性），我们使用“变量”来存储类中封装的数据，类中的变量有：<ol><li>成员变量：又称之为“实例变量”或“非静态变量”，因为是从属于“对象”的。</li><li>静态变量：又称之为“类变量”，从属于“类”的。</li></ol></li><li>功能（行为），我们使用“方法”来封装类中的功能。<ol><li>成员方法，又称之为“实例方法”或“非静态方法”，从属于“对象”的。</li><li>静态方法，又称之为“类方法”，从属于“类”的。</li></ol></li></ul><hr><h4 id="成员变量的概述"><a href="#成员变量的概述" class="headerlink" title="成员变量的概述"></a>成员变量的概述</h4><ul><li><p><strong>定义位置：在类中，代码块和方法体之外。</strong></p></li><li><p>定义语法：[修饰符] 数据类型 变量名；</p><p>–&gt;定义成员变量的时候，则不允许使用static关键字来修饰。</p></li><li><p>操作成员变量的语法：对象.成员变量名</p><p>–&gt; 通过 “对象.成员变量名” 就能找到该成员变量的存储空间，然后就能对该成员变量取值和赋值的操作。</p><p>–&gt; 在成员方法中，想要操作当前类的成员变量，则我们可以直接通过“成员变量名”来操作。</p></li></ul><hr><h4 id="成员方法的概述"><a href="#成员方法的概述" class="headerlink" title="成员方法的概述"></a>成员方法的概述</h4><ul><li><p>定义位置：在类中，代码块和方法体之外。</p></li><li><p>定义语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//方法体</span><span class="token keyword">return</span> <span class="token punctuation">[</span>返回值<span class="token punctuation">]</span>；<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>–&gt; 定义成员方法的时候，则不允许使用static关键字来修饰。</p><p><strong>调用成员方法的语法：对象.成员变量名(实参列表);</strong></p><p>​    –&gt; 注意：<strong>在成员方法中，想要调用当前类的成员方法，则我们可以直接通过“成员变量名(实参列表);”来实现。</strong></p></li></ul><hr><h4 id="实例化对象的概述"><a href="#实例化对象的概述" class="headerlink" title="实例化对象的概述"></a>实例化对象的概述</h4><ul><li><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">类型 对象 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//eg:</span><span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>理解：我们以类为模板，然后实例化对象。</p></li></ul><hr><h4 id="成员变量的默认值"><a href="#成员变量的默认值" class="headerlink" title="成员变量的默认值"></a>成员变量的默认值</h4><ul><li>明确：“成员变量”和“数组元素”都有默认值，并且默认值规则一样。</li><li>整数型（byte、short、int和long）成员变量的默认值为：0；</li><li>浮点型（float和double）成员变量的默认值为：0.0;</li><li>布尔型（boolean）成员变量的默认值为：false；</li><li>字符型（char）成员变量的默认值为：’\u0000’ –&gt; 代表的是空格字符</li><li>引用数据类型（数组、字符串、类和接口等等）成员变量的默认值为：null</li></ul><hr><h4 id="成员变量的初始化"><a href="#成员变量的初始化" class="headerlink" title="成员变量的初始化"></a>成员变量的初始化</h4><ul><li><strong>最先执行“默认初始化”，然后执行“显示初始化”，最后执行“指定初始化”。</strong></li></ul><hr><h4 id="创建对象时的内存分析"><a href="#创建对象时的内存分析" class="headerlink" title="创建对象时的内存分析"></a>创建对象时的内存分析</h4><ul><li><strong>结论：</strong>以类为模板来创建对象，则只需要为类中的成员变量在堆内存中开辟存储空间，<strong>而成员方法是调用的时候自动在栈内存中开辟栈帧。</strong></li><li><strong>注意：</strong>每个对象都是“独一无二”的，<strong>因为每次创建对象都会在堆内存中开辟存储空间。</strong></li></ul><p><img src="/images/note_images/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%97%B6%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90.png"></p><hr><h4 id="成员变量和局部变量的对比"><a href="#成员变量和局部变量的对比" class="headerlink" title="成员变量和局部变量的对比"></a>成员变量和局部变量的对比</h4><ol><li>定义位置区别<ul><li>成员变量：在类中，代码块和方法体之外。</li><li>局部变量：在类中，代码块或方法体之内。</li></ul></li><li>存储位置区别<ul><li>成员变量：存储在“堆内存”中。</li><li>局部变量：存储在“栈内存”中。</li></ul></li><li>生命周期区别<ul><li>成员变量：随着对象的创建而“出生”，随着对象的销毁而“死亡”。</li><li>局部变量：定义变量的时候“出生”，所在作用域执行完毕就“死亡”。</li></ul></li><li>默认值的区别<ul><li>成员变量：成员变量有默认值，并且默认值规则和数组元素默认值规则一模一样。</li><li>局部变量：局部变量没有默认值，因为只声明未赋值的局部变量，则不能做取值操作。</li></ul></li><li>修饰符的区别<ul><li>成员变量：可以被public、protected、private、static、final等修饰符修饰。</li><li>局部变量不能被public、protected、private、static修饰，只能被final修饰。</li></ul></li></ol><hr><h4 id="成员变量和局部变量的使用"><a href="#成员变量和局部变量的使用" class="headerlink" title="成员变量和局部变量的使用"></a>成员变量和局部变量的使用</h4><ul><li><p>明确：当成员变量和局部变量同名的时候，则默认采用的是“就近原则”，也就是“谁离的近，就执行谁”。</p></li><li><p>问题：当成员变量和局部变量同名的时候，我们该如何区分？</p></li><li><p>解决：局部变量采用“就近原则”来区分，成员变量使用“this”关键字来区分。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成员变量："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><hr><h4 id="我们通过new关键字来创建对象，则创建出来的对象分为两种"><a href="#我们通过new关键字来创建对象，则创建出来的对象分为两种" class="headerlink" title="我们通过new关键字来创建对象，则创建出来的对象分为两种"></a>我们通过new关键字来创建对象，则创建出来的对象分为两种</h4><ol><li><p>匿名对象，指的就是“没有名字的对象”，例如：new Tiger();</p></li><li><p>非匿名对象，指的就是“有名字的对象”，例如：Tiger tiger &#x3D; new Tiger();</p></li><li><p>开发中，匿名对象很少使用，但是以下两种场合建议使用匿名对象来实现。</p><ul><li><p>创建出来的对象，仅仅只调用一次成员方法，则该对象就建议使用匿名对象来实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"XXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建出来的对象，仅仅只作为方法的实参，则该对象就建议使用匿名对象来实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/images/note_images/%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1.png"></p></li></ol><hr><h3 id="DAY12"><a href="#DAY12" class="headerlink" title="DAY12"></a>DAY12</h3><h4 id="构造方法（构造器或构造函数）"><a href="#构造方法（构造器或构造函数）" class="headerlink" title="构造方法（构造器或构造函数）"></a>构造方法（构造器或构造函数）</h4><ol><li><p>构造方法的引入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>构造方法得语法</p><ul><li><p>语法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 类名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意：【构造方法的特点】</strong></p><ol><li><p>构造方法中没有“返回值类型”，因为在构造方法中不允许有“返回值”。</p><p>–&gt; 构造方法中没有“返回值”，则构造方法中只有“return;”，那么我们就省略”return;”。</p></li><li><p>构造方法的名字必须为“类名”，也就是构造方法名采用”大驼峰”来命名。</p><p>–&gt; 构造方法名采用“大驼峰”，而成员方法名和静态方法名采用“小驼峰”。</p></li><li><p>构造方法就是一个“特殊”的方法，并且构造方法应该通过new关键字来调用。</p></li><li><p><strong>构造方法专门给成员变量做初始化，也就是构造方法不为静态变量做初始化。</strong></p></li><li><p>构造方法可以没有（默认一个无参构造方法），也可以有多个构造方法，他们之间构成重载关系。</p></li><li><p>如果定义有参构造方法，则无参构造方法被自动屏蔽。</p></li><li><p>构造方法不能被继承。</p></li><li><p>构造方法不能手动调用，在创建类实例的时候自动调用构造方法。</p></li></ol></li></ul></li><li><p><strong>创建对象的步骤</strong></p><p>分析“new Student();”的执行顺序，也就是分析创建对象的执行步骤：</p><ol><li>创建对象，并给成员变量开辟存储空间；</li><li>给成员变量做“默认初始化”；</li><li>给成员变量做“显式初始化”；</li><li>调用构造方法，给成员变量做“指定初始化”。</li></ol></li><li><p><strong>创建对象的时候，是谁来完成的呢？</strong></p><ul><li>new关键字负责创建对象，构造方法负责给成员变量做指定初始化操作，创建对象的时候new关键字和构造方法缺一不可。</li></ul></li><li><p><strong>构造方法的作用</strong></p><ol><li>创建对象的时候new关键字和构造方法缺一不可（了解）。</li><li><strong>通过构造方法来给成员变量做指定初始化操作，从而实现代码的复用【核心】。</strong></li></ol></li><li><p><strong>无参构造方法的概述</strong></p><ul><li>作用：用于给成员变量做初始化操作，例如在无参构造方法中给int类型数组做开辟存储空间的操作。</li><li>注意：<strong>如果某个类中没有显式地提供构造方法，则程序编译时会默认为这个类提供一个无参构造方法。</strong></li></ul></li><li><p><strong>有参构造方法的概述</strong></p><ul><li>作用：用于给成员变量做初始化操作，例如<strong>在有参构造方法中我们将形参的值赋值给成员变量来保存。</strong></li><li>注意：<ol><li>建议形参的名字和成员变量名保持一致，然后在构造方法中通过this来操作成员变量。</li><li>如果一个类显式地提供了构造方法，则程序编译时就不会为该类提供默认的无参构造方法了。</li><li>建议每个类都应该提供无参构造方法，避免在继承体系中子类找不到父类的无参构造方法。</li></ol></li></ul></li><li><p><strong>构造方法的重载</strong></p><ul><li>构造方法依旧可以实现方法的重载，<strong>调用构造方法的时候会根据实参的“个数”和“类型”来选中调用合适的构造方法。</strong></li></ul></li></ol><hr><h4 id="成员方法和构造方法的对比"><a href="#成员方法和构造方法的对比" class="headerlink" title="成员方法和构造方法的对比"></a>成员方法和构造方法的对比</h4><ol><li><p>定义语法区别</p><ul><li>成员方法：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法体</span><span class="token keyword">return</span> <span class="token punctuation">[</span>返回值<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 类名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法体</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>调用方式区别</p><ul><li>成员方法：必须通过“对象”来调用；</li><li>构造方法：必须通过“new”关键字来调用；</li></ul></li><li><p>调用时期区别</p><ul><li>成员方法：对象创建完毕后调用。</li><li><strong>构造方法：创建对象的时候调用。</strong></li></ul></li><li><p>调用次数区别</p><ul><li>成员方法：对象创建完毕后，我们可以调用任意多次成员方法（n）。</li><li>构造方法：<strong>构造方法只能调用一次，每次创建对象，则都会调用一次构造方法(1)。</strong></li></ul></li></ol><hr><h4 id="成员方法和构造方法的特点"><a href="#成员方法和构造方法的特点" class="headerlink" title="成员方法和构造方法的特点"></a>成员方法和构造方法的特点</h4><ul><li>执行到构造方法中，则此时对象肯定创建完毕，也就意味着构造方法有对象。</li><li>也就是说，成员方法和构造方法中都有对象，也就意味着成员方法和构造方法中都有this。</li></ul><hr><h4 id="this关键字（重点）"><a href="#this关键字（重点）" class="headerlink" title="this关键字（重点）"></a>this关键字（重点）</h4><ol><li><p><strong>this关键字的概述</strong></p><ul><li>创建一个对象成功之后，则<strong>虚拟机</strong>就会<strong>动态地创建一个引用</strong>，该引用<strong>指向的就是新创建出来的对象</strong>，并且该引用的名字就是this。</li></ul></li><li><p><strong>this关键字指的是什么？</strong></p><ul><li><p>在构造方法中，this指的是什么？</p><p><strong>在构造方法中，this指的是“新创建出来的对象”。</strong></p></li><li><p>在成员方法中，this指的是什么？</p><p>在成员方法中，this指的是“方法的调用者对象”。</p></li></ul></li><li><p><strong>this关键字的作用</strong></p><ol><li><p><strong>操作成员变量，语法：对象.成员变量名</strong></p><ul><li>如果成员变量和局部变量的名字相同，则我们必须通过this关键字来操作成员变量，使用就近原则来操作局部变量。</li><li>如果成员变量和局部变量的名字不同，则我们可以通过this关键字来操作成员变量，也可以忽略this关键字来操作成员变量。<ul><li>–&gt; 忽略this关键字来操作成员变量，则编译时会默认添加this关键字来操作。</li></ul></li></ul></li><li><p><strong>调用成员方法，语法：对象.成员变量名(实参列表);</strong></p><ul><li><p>调用当前类的别的成员方法时，我们可以通过this关键字来调用，也可以忽略this关键字来调用。</p><p>–&gt; 忽略this关键字来调用成员方法，则编译时会默认添加this关键字来操作。</p></li></ul></li><li><p><strong>调用构造方法，语法：this(实参列表);</strong></p><ul><li><p>作用：调用“当前类”的别的构造方法，此处仅仅调用方法并不创建对象，从而实现了代码的复用。</p></li><li><p>注意：</p><ol><li><p><strong>“this(实参列表)”只能存在于构造方法中，并且必须在构造方法有效代码的第一行。</strong></p><p>–&gt; “this(实参列表)”必须在构造方法有效代码的第一行，则意味着一个构造方法中最多只能有一个“this(实参列表)”。（0或1）</p></li><li><p><strong>构造方法切记不能“递归”调用，否则就会陷入死循环，从而造成程序编译错误！</strong></p><p>–&gt; 在构造方法中，我们不允许通过“this(实参列表)”来自己调用自己，否则就会编译错误！</p></li><li><p><strong>在一个类中，不可能所有的构造方法中都存在“this(实参列表)”,因为这样肯定会陷入死循环。</strong></p><p><strong>–&gt; 一个类中，可以定义多个构造方法，但是至少有一个构造方法中没有“this(实参列表)”。</strong></p></li></ol></li></ul></li></ol></li></ol><hr><h4 id="静态变量（重点）"><a href="#静态变量（重点）" class="headerlink" title="静态变量（重点）"></a>静态变量（重点）</h4><ol><li><p>静态变量的引入</p><ul><li>需求：班上所有同学的姓名、年龄和成绩等属性，并且所有的学生都共享同一个教室和饮水机。</li><li>解决：定义一个Student类，然后在Student类中定义姓名、年龄、成绩、教室和饮水机等成员变量即可。</li></ul><p><img src="/images/note_images/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%BC%95%E5%85%A5.png"></p><ul><li><p>问题：一个班有几十个同学，也就意味着需要创建几十个学生对象，每个学生对象都需要为classRoom开辟存储空间，并且每个对象存储的内容都相同，则浪费了存储空间。</p></li><li><p>解决：把姓名、年龄和成绩使用“成员变量”来保存；把教室和饮水机使用“静态变量”来存储。</p><p>–&gt; 如果存储的是“特有数据”，则就使用“成员变量”来存储，例如：姓名、年龄和成绩就属于学生特有数据，那么就使用成员变量来存储。</p><p>–&gt; 如果存储的是“共享数据”，则就使用“静态变量”来存储，例如：教室和饮水机就属于学生的共享数据，那么就使用静态变量来存储。</p></li></ul></li><li><p>静态变量的概述</p><ul><li><p>在类中，代码块和方法体之外，使用static关键字修饰的变量，我们就称之为“静态变量”。</p><p><img src="/images/note_images/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E6%A6%82%E8%BF%B0.png"></p></li></ul></li><li><p><strong>类的加载过程分析</strong></p><ul><li><p>第一次使用某个类的时候，就会加载该类的信息进入方法区，如果该类中存在静态变量，则还会在方法区中为该静态变量开辟存储空间并设置默认值。</p></li><li><p><strong>问题1：什么时候执行加载类的操作呢？</strong></p><p>–&gt; 第一次使用某个类的时候，则就会执行加载类的操作。</p></li><li><p><strong>问题2：一个类会加载几次呢？</strong></p><p>–&gt; 每个类都只会加载一次，因为第一次使用某个类的时候就执行加载类的操作。</p></li><li><p><strong>问题3：什么是方法区？方法区存储的内容是什么？？</strong></p><p>​    <strong>–&gt; 方法区就是一块存储空间，并且方法区属于堆内存中的一部分，<u>方法区用于存储类的信息、静态变量等等内容。</u></strong></p></li><li><p><strong>问题4：静态变量什么时候开辟存储空间呢？</strong></p><p>–&gt; 加载类的时候，则就会把该类中的静态变量在方法区中开辟存储空间，<strong>也就意味着静态变量优先于对象存在。</strong></p></li><li><p><strong>问题5：一个类中的静态变量，会开辟几次存储空间？</strong></p><p>–&gt; 因为类只会加载一次，<u><strong>因此每个类中的静态变量就只有一份，也就是每个静态变量只会开辟一次存储空间。</strong></u></p></li><li><p><strong>问题6：静态变量的默认值是什么？</strong></p><p>–&gt; 静态变量和成员变量都有默认值，并且他们的默认值规则一模一样。</p></li></ul></li><li><p><strong>静态变量的特点</strong></p><ol><li><p>静态变量优先于对象存在，随着类的加载就已经存在了。</p></li><li><p>一个类中，每个静态变量都只有一份，为类和对象所共享。</p></li><li><p>我们可以通过“类名”来操作静态变量，也可以通过“对象”来操作静态变量。</p><p><strong>语法1：类名.静态变量  –&gt; 建议</strong></p><p>语法2：对象.静态变量  –&gt; 不建议</p></li></ol></li></ol><hr><h4 id="成员变量和静态变量的对比"><a href="#成员变量和静态变量的对比" class="headerlink" title="成员变量和静态变量的对比"></a>成员变量和静态变量的对比</h4><ol><li><p>存储位置区别</p><ul><li>成员变量：存储在堆内存中。</li><li>静态变量：存储在方法区中。</li></ul></li><li><p>生命周期</p><ul><li>成员变量：随着对象的创建而“出生”，随着对象的销毁而”死亡”。</li><li>静态变量：随着类的加载而“出生”，随着程序执行完毕而“死亡”。</li></ul></li><li><p>创建次数的区别：</p><ul><li>成员变量：对象创建多少次，则成员变量就创建多少次。</li><li>静态变量：因为类只会加载一次，因次静态变量就只会创建一次。</li></ul></li><li><p>调用语法区别</p><ul><li><p>成员变量：必须通过”对象”来调用。</p></li><li><p>静态变量：可以通过“类名”来调用，也可以通过“对象”来调用。</p></li></ul></li></ol><hr><h4 id="成员变量和静态变量的使用"><a href="#成员变量和静态变量的使用" class="headerlink" title="成员变量和静态变量的使用"></a>成员变量和静态变量的使用</h4><ul><li>成员变量：如果存储的是“特有数据”，则就使用成员变量来存储。</li><li>静态变量：如果存储的是“共享数据”，则就是用静态变量来存储。</li></ul><hr><h4 id="什么是静态方法-1"><a href="#什么是静态方法-1" class="headerlink" title="什么是静态方法"></a>什么是静态方法</h4><ul><li>使用static关键字修饰的方法，我们就称之为“静态方法”。</li></ul><hr><h4 id="静态方法的特点"><a href="#静态方法的特点" class="headerlink" title="静态方法的特点"></a>静态方法的特点</h4><ol><li>静态方法优先于对象存在，随着类的加载就已经存在了。</li><li>静态方法可以通过“对象”来调用，也可以通过“类名”来调用。<ul><li>语法1：类名.静态方法名(实参列表);   –&gt; 建议</li><li>语法2：对象.静态方法名(实参列表);   –&gt; 不建议</li></ul></li></ol><hr><h4 id="成员方法和静态方法的对比"><a href="#成员方法和静态方法的对比" class="headerlink" title="成员方法和静态方法的对比"></a>成员方法和静态方法的对比</h4><ol><li><p>操作变量的区别</p><ul><li><p>在成员方法和构造方法中，<strong>不但能直接操作当前类的静态变量，还能直接操作当前类的成员变量。</strong></p><p>–&gt; 在成员方法中，则意味着对象都创建完毕，也就是意味着肯定加载完毕，那么就能操作当前类的静态变量。</p></li><li><p><strong>在静态方法中，可以直接去操作当前类的静态变量，但是不能直接操作当前类的成员变量。</strong></p><p>–&gt; 在静态方法中，则意味着类已经加载完毕了，但是静态方法中还没有对象。</p></li></ul></li><li><p>调用方法的区别</p><ul><li><p>在成员方法和构造方法中，不但能直接调用当前类的静态方法，还能直接调用当前类的成员方法。</p><p>–&gt; 在成员方法中，则意味着对象都创建完毕，也就意味着类肯定加载完毕，那么就能调用当前类的静态方法。</p></li><li><p>在静态方法中，可以直接调用当前类的静态方法，但是不能直接调用当前类成员的方法。</p><p>–&gt; 在静态方法中，则意味着类已经加载完毕，但是静态方法中还没有对象。</p></li></ul></li><li><p>操作this的区别</p><ul><li>在成员方法和构造方法中，我们可以直接操作this关键字。</li><li>在静态方法中，我们不能直接操作this关键字。</li></ul></li></ol><p><strong>注意：操作“成员内容”的时候，默认省略的是“this”；操作“静态内容”的时候，默认省略的是“类名”。</strong></p><hr><h4 id="成员方法和静态方法的使用"><a href="#成员方法和静态方法的使用" class="headerlink" title="成员方法和静态方法的使用"></a>成员方法和静态方法的使用</h4><ul><li><p>成员方法：如果在方法体中，想要直接操作当前类的成员变量，则该方法就”必须”是成员方法。</p></li><li><p>静态方法：如果在方法体中，我们无需操作当前类的成员变量，则该方法就”建议”是静态方法。</p><p>–&gt; 工具类中的方法都是静态方法，也就是静态方法常用于工具类中，例如：Arrays、Math等。</p></li></ul><hr><h3 id="DAY12-1"><a href="#DAY12-1" class="headerlink" title="DAY12"></a>DAY12</h3><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><ol><li><p><strong>什么是代码块</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>代码块的分类</strong></p><ul><li>局部代码块</li><li>静态代码块</li><li>构造代码块(非静态代码块)</li></ul></li><li><p><strong>局部代码块的概述</strong></p><ul><li>定义位置：在类中，代码块或方法体的内部。</li><li>定义个数：任意多个。</li><li>执行顺序：从上往下，顺序执行。</li><li>注意事项：<ol><li>在局部代码块中定义的变量，则该变量就只能在当前作用域中使用，不能在代码块之外使用。</li></ol></li></ul></li><li><p><strong>静态代码块的概述</strong></p><ul><li><p>定义位置：在类中，代码块和方法体之外（必须使用static来修饰）。</p></li><li><p>定义个数：任意多个</p></li><li><p>执行顺序：从上往下，顺序执行</p></li><li><p>注意事项：a）加载某个类的时候，就会执行该类中的静态代码块，并且静态代码块只会执行一次。</p><p>​                        –&gt;执行时间：加载类的时候，就会执行该类中的静态代码块。</p><p>​                        –&gt; 执行次数：因为类只会加载一次，因此静态代码块就只会执行一次。</p><p>​                    b）在静态代码块中，我们可以直接操作当前类的静态内容，但是不能直接操作当前类的成员内容和this。</p><p>​                        –&gt; 原因：加载类的时候，就会执行该类中的静态代码块，则执行静态代码块的时候对象都还未创建。</p><p>​                    c）加载类的时候，静态变量和静态代码块属于“从上往下，顺序执行”，建议把静态变量定义在静态代码块之前。</p><p>​                        –&gt; 注意：在静态代码块中，我们“未必”能直接操作当前的静态变量。</p><p>​                    d）在静态代码块中定义的变量，则该变量就只能在当前作用域中使用，不能再代码块之外使用。</p><p>使用场合：<strong>开发中，我们经常再静态代码块中完成对静态变量的初始化操作（常见）。</strong></p><p>​        –&gt;例如：创建工厂、加载数据库初始信息等等。</p></li></ul></li><li><p><strong>构造代码块的概述</strong></p><ol><li>定义位置：在类中，代码块和方法体之外（不能使用static来修饰）</li><li>定义个数：任意多个</li><li>执行顺序：从上往下，顺序执行。</li><li><strong>注意事项：</strong><ul><li><strong>创建对象的时候，则就会执行该类中的构造代码块，对象创建了多少次则构造代码块就执行多少次。</strong><ul><li>执行时间：创建对象的时候，则就会执行该类中的构造代码块。</li><li>执行次数：对象创建了多少次，则该类中的构造代码块就执行多少次。</li></ul></li><li><strong>在构造代码块中，我们不但能直接操作当前类的静态内容，并且还能直接操作当前类的成员内容和this。</strong><ul><li>原因：执行代码块的时候，此时对象都已经创建完毕，因此就能操作当前类的成员内容和this。</li></ul></li><li><strong>创建对象的时候，成员变量和构造代码块属于“从上往下，顺序执行”，建议把成员变量定义在构造代码块之前。</strong><ul><li>注意：在构造代码块中，我们“未必”能直接操作当前类的成员变量。</li></ul></li><li><strong>在构造代码块中定义的变量，则该变量就只能在当前作用域中使用，不能在代码块之外使用。</strong></li><li><strong>使用场合：开发中，我们偶尔会在构造代码块中完成对成员变量的初始化操作。（不常见）</strong><ul><li>可以将各个构造方法中公共的代码提取到构造代码块。</li><li>匿名内部类不能提供构造方法，此时初始化操作可以放到构造代码块中。</li></ul></li></ul></li></ol></li><li><p><strong>问题：静态代码块、构造代码块和构造方法执行顺序？</strong></p><p>–&gt; 静态代码块 &gt; 构造代码块 &gt; 构造方法</p></li></ol><hr><h4 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h4><ol><li><p>包的作用</p><ul><li>我们使用包来管理类，也就是类应该放在包中。</li><li><strong>包的出现，为类提供了多层的命名空间，也即是类的完整名字为”包名.类名”。</strong></li><li>注意：不同的包中，我们可以定义同名的类；同一个包中，我们不允许定义同名的类。</li></ul></li><li><p>如何定义包</p><ul><li><p>包名必须满足“标识符”的命名规则，必须满足<strong>“单词全部小写，多个单词之间以’.’链接，并且做到顶级域名倒着写”</strong>的命名规范。</p></li><li><p><strong>问题：以下两个包是否存在父子关系？【没有】</strong></p><p>–&gt; com.bjpowernode.demo         com.bjpowernode.demo.test</p></li></ul></li><li><p>如何使用包</p><p>–&gt; <strong>在源文件有效代码第一行，使用package关键字来声明当前源文件中的类在那个包中。</strong></p><p>注意：通过IDEA新建的源文件，则源文件有效代码的第一行默认就有包声明；<strong>如果通过DOS命令来运行IDEA创建的源文件，则必须删除源文件中的包声明。</strong></p></li><li><p>java语言提供的包</p><ul><li><strong>java.lang    包含一些java语言的核心类，如String、Math、System等；</strong></li><li>java.awt      包含了构成抽象窗口工具集(abstract window toolkits)的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)；</li><li>java.net      包含执行与网络相关的操作的类；</li><li>java.io        包含能提供多种输入、输出功能的类；</li><li>java.util      包含一些实用工具类，如定义系统特性、使用与日期日历相关的函数。</li></ul></li><li><p><strong>类的访问方式</strong></p><ul><li><p><strong>简化访问</strong></p><ul><li><p>解释：当我们需要访问“java.lang”或“当前包”中的类时，则就可以直接使用“类名”来实现简化访问。</p></li><li><p>例如：访问“当前包”中的类</p><p>–&gt; Tiger tiger &#x3D; new Tiger(“老虎”, 18);</p></li><li><p>例如：访问“java.lang”中的类</p><p>–&gt; String str &#x3D; “hello world”;</p></li></ul></li><li><p><strong>带包名访问</strong></p><ul><li><p>解释：当我们需要访问“当前包”之外的类时（排除java.lang包中的类），则我们就必须通过“包名.类名”的方式来访问。</p></li><li><p>例如：访问”p1包”中的类</p><p>–&gt; com.bjpowernode.p1.staticblock.student stu &#x3D; new com.bjpowernode.p1.staticblock.student();</p></li><li><p>例如：访问“java.util”中的类</p><p>–&gt; java.util.Scanner input &#x3D; new java.util.Scanner(System.in);</p></li></ul></li></ul></li><li><p><strong>import关键字的概述</strong></p><ul><li><p><strong>解释：当我们需要访问“当前包”之外的类（排除java.lang包中的类），则必须通过“带包名”的方式来访问，则此访问方式太麻烦，想要实现简化访问，则就可以先通过import关键字导入需要访问的类，然后再通过“类名”来实现简化访问。</strong></p></li><li><p>例如：访问“p1包”中的类</p><p>–&gt; import com.bjpowernode.p1.staticblock.student;</p><p>–&gt; Student stu &#x3D; new Steudent();</p></li><li><p>例如：访问”java.util”中的类</p><p>–&gt; import java.util.Scanner;</p><p>–&gt; Scanner input &#x3D; new Scanner(System.in);</p></li></ul></li><li><p><strong>import关键字的注意点</strong></p><ul><li><p><strong>如果需要使用某个包中的多个类时，则我们可以通过”*”通配符来导入这个包中的所有类。</strong></p><p>–&gt; 注意：开发中，不建议使用“*”来导入某个包中的所有类，因此此方式效率非常低。</p></li><li><p><strong>如果需要使用不同包中的同名类时，则其中一个类必须通过“带包名”的方式来访问。</strong></p><p>–&gt; 原因：通过import关键字导入多个不同包的同名类，则在源文件中使用导入的类时，无法区分。</p></li><li><p><strong>在JDK1.5之后，还新增了静态导入，也就是能导入某个类中的静态属性和静态方法。</strong></p><p>–&gt; 例如：导入Math类中的静态属性</p><ol><li>第一步：import static java.lang.Math.PI;</li><li>第二步：System.out.println(PI);</li></ol><p>–&gt; 例如：导入Math类中的静态属性和静态方法</p><ol><li>第一步：import static java.lang.Math.*;</li><li>第二部：System.out.println(PI);</li></ol></li></ul></li></ol><hr><h4 id="数组算法-冒泡排序"><a href="#数组算法-冒泡排序" class="headerlink" title="数组算法_冒泡排序"></a>数组算法_冒泡排序</h4><p><img src="/images/note_images/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png"></p><hr><h4 id="数组算法-选择排序"><a href="#数组算法-选择排序" class="headerlink" title="数组算法_选择排序"></a>数组算法_选择排序</h4><p><img src="/images/note_images/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.png"></p><hr><h4 id="数组算法-查找"><a href="#数组算法-查找" class="headerlink" title="数组算法_查找"></a>数组算法_查找</h4><p>需求：查找元素8在数组{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20}中的索引位置，查找元素在数组中不存在则返回-1。</p><ol><li><strong>方式一：顺序查找（线性查找）</strong><ul><li>优点：对查找的数组元素是否排序没有要求。</li><li>缺点：查找效率非常低。</li></ul></li><li><strong>方式二：二分查找（折半查找）</strong><ul><li>优点：查询效率非常高。</li><li>缺点：<strong>要求查找的数组元素必须排序（升序 | 降序）。</strong></li></ul></li></ol><p><img src="/images/note_images/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95.png"></p><hr><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ol><li><p>问题：具备那三大特性的编程语言，我们才称之为面向对象语言？</p><p><strong>–&gt; 封装、继承、多态</strong></p></li><li><p><strong>封装的引入</strong></p><ul><li><p>问题1：给学生年龄赋值的时候，赋值的年龄不能为负数！</p><p>–&gt; 使用“setter和getter”方法来解决</p></li><li><p>问题2：<strong>相同的代码在不同的包中，可能会发生编译错误！</strong></p><p>–&gt; 使用“权限修饰符”来解决</p></li></ul></li><li><p><strong>编程中的封装</strong></p><ul><li><strong>核心：对于使用者而言，只需掌握其公开的访问方式，无需了解内部的具体实现细节。</strong></li></ul></li><li><p><strong>封装的层次</strong></p><ul><li>面向过程：对功能做的封装，也就是使用方法来完成的封装。</li><li><strong>面向对象：对数据和功能做的封装，也就是使用类来完成的封装。</strong></li></ul></li><li><p><strong>封装的好处</strong></p><ul><li>封装的出现，提高了代码的安全性【了解】。</li><li><strong>封装的出现，提高了代码的复用性【核心】。</strong></li></ul></li></ol><hr><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><ol><li><p>private，私有的，权限：只能在“<strong>当前类</strong>”中访问，因此我们称之为“类可见性”。</p></li><li><p>default，<strong>默认的，权限：</strong>只能在“<strong>当前类 + 当前包</strong>”中访问，因此我们称之为“包可见性”。</p><p>–&gt; 注意：在权限修饰符中，没有default关键字，省略权限修饰符默认就是包可见性。</p></li><li><p>protected，受保护的，权限：只能在“<strong>当前类 + 当前包 + 别的包中的子类包</strong>”中访问，因此我们称之为“子类可见性”。</p></li><li><p>public，公开的，权限：只能在“<strong>当前类 + 当前包 + 加别的包</strong>”中访问，因此我们称之为“项目可见性”。</p></li></ol><ul><li><strong>权限大小【由低到高】：private  &lt;&lt; default &lt;&lt; protected &lt;&lt; public</strong></li></ul><hr><h4 id="权限修饰符的使用"><a href="#权限修饰符的使用" class="headerlink" title="权限修饰符的使用"></a>权限修饰符的使用</h4><ul><li><p><strong>明确：实际开发中，“默认的”和“受保护的”很少使用，但是“私有的”和“公开的”却很常用。</strong></p></li><li><p><strong>private：default、protected和public都能修饰”成员变量”和“静态变量”。</strong></p><p>–&gt; 成员变量：因为存储都是“特殊数据”，因此使用private修饰。</p><p>–&gt; 静态变量：因为存储是“共享数据”，因此使用public来修饰。</p></li><li><p><strong>private：default、protected和public都能修饰”成员方法”和“静态方法”。</strong></p><p>–&gt; 如果该方法需要外界访问，则就把该方法使用public来修饰。</p><p>–&gt; 如果该方法无需外界访问，也就是只为当前类服务，那么久把该方法使用private来修饰。</p></li><li><p><strong>private：default、protected和public都能修饰“构造方法”。</strong></p><p>–&gt; 如果该类需要被外界实例化，则该类的构造方法就采用public来修饰;</p><p>–&gt; 如果该类无需被外界实例化，则该类的构造方法就采用private来修饰。</p><p><strong>注意：工具类中只有静态内容，因此工具类就无需被实例化，那么工具类的构造方法都采用了private修饰，eg：Arrays和Math等等。</strong></p></li><li><p><strong>定义类的时候，类只允许使用public和default，不允许使用private和protected来修饰。</strong></p><p>–&gt;使用public修饰的类（公开权限），则该类就能在整个项目中使用。</p><p>–&gt; 使用default修饰的类（默认权限），则该类就只能在当前包中使用。</p></li><li><p><strong>使用权限修饰符，则不允许修饰局部变量、局部代码块、静态代码块和构造代码块。</strong></p></li></ul><hr><h4 id="setter和getter"><a href="#setter和getter" class="headerlink" title="setter和getter"></a>setter和getter</h4><ol><li><p>setter和getter方法的概述</p><ul><li>成员变量一律私有化（private），避免外界直接去访问成员变量，然后提供公开的setter和getter方法来操作私有的成员变量。</li></ul></li><li><p><strong>setter方法的概述</strong></p><ul><li><p>作用：用于给私有的成员变量做<strong>赋值操作</strong>，<strong>并且还能对赋值的数据做检查和处理。</strong></p></li><li><p>eg：给私有的name成员变量提供setter方法，则实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>问题：给学生年龄赋值的时候，赋值的年龄不能为负数！【假设年龄在0-130之间】</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//处理赋值年龄不合法的情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> age <span class="token operator">></span> <span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//System.out.println("输入年龄不合法");</span>        <span class="token comment">//需求：在此处需要抛出一个参数不合法异常！</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"赋值年龄参数不合法，age"</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行到此处，则证明赋值年龄合法，则就执行赋值操作。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>getter方法的概述</strong></p><ul><li><p>作用：<strong>用于获取私有成员变量的值（取值操作），并且还能对获得的数据做统一的处理。</strong></p></li><li><p>例如：给私有的name成员变量提供getter方法，则实现代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>setter和getter的注意点</strong></p><ul><li>通过构造方法给成员变量赋值，如果赋值的数据需要做检查和处理，则在构造方法中就必须调用setter方法来实现赋值操作。</li><li><strong>给boolean类型成员变量提供getter方法的时候，此时getter方法的名字前缀必须是“is”开头，而不是能以“get”来开头。</strong></li><li><strong>给类提供“构造方法”和“setter和getter方法”的时候，则建议使用“alt + insert”快捷键来实现，而不建议手动写代码来实现。</strong></li></ul></li></ol><hr><h3 id="DAY13"><a href="#DAY13" class="headerlink" title="DAY13"></a>DAY13</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ol><li><p><strong>继承的引入</strong></p><ul><li>问题：讲师类和学生类中都有相同的name和age两个成员变量，都有相同的eat()和sleep()两个成员方法，因此需要实现代码的复用。</li><li>解决：使用“继承”来实现。</li></ul></li><li><p><strong>继承的本质</strong></p><ul><li>就是提取一系列类中相同的成员变量和成员方法，这样就得到了一个父类，从而形成了继承关系。</li><li>即：**<u>向上提取。</u>**</li></ul></li><li><p><strong>继承的语法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 父类<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>问题：请问extends表达的含义是什么？ –&gt;  扩展的含义</li><li>注意：父类又称为“超类”或“基类”，子类又称之为“派生类”。</li></ul></li><li><p><strong>继承的特点</strong></p><ul><li>子类不但能继承父类的成员变量和成员方法，并且子类还可以有自己特有的成员变量和成员方法。</li><li>即：**<u>子类对父类做的扩展。</u>**</li></ul></li><li><p><strong>继承的好处</strong></p><ul><li>继承的出现，提高了代码的复用性，从而提高了开发的效率。</li><li>继承的出现，让类与类之间产生了联系，为后面学习“多态”打下了技术铺垫。</li><li><strong>强调：继承是一把“双刃剑”，父类代码一旦发生了变化，则就会影响所有的子类，使用继承的时候慎重。【高耦合】</strong></li></ul></li><li><p><strong>哪些内容子类不能继承</strong></p><ul><li>父类私有的内容，子类不能继承。</li><li>父类的构造方法，子类不能继承。</li><li><strong>父类静态的内容，虽然子类能够使用，但父类静态内容“不参与”继承。</strong></li><li><strong>强调：继承强调的是“对象”之间的关系，因此成员内容能参与继承，但是静态内容不参与继承。</strong></li></ul></li><li><p><strong>继承的注意点</strong></p><ul><li><p><strong>java语言采用的是“单继承”，C++语言采用的是“多继承”。</strong></p><ul><li><strong>单继承：</strong>一个子类只能有一个直接父类。</li><li><strong>多继承：</strong>一个子类可以有多个直接父类。</li></ul></li><li><p>AA类继承于BB类，BB类继承于CC类，CC类继承于DD类，。。。，从而就形成了“继承链”。</p><p>–&gt; 此处BB类，CC类和DD类都是AA类的“父类”，<strong>只有BB类属于AA类的“直接父类”。</strong></p></li><li><p><strong>java语言中，一个子类只能有一个直接父类，但是一个父类可以有多个直接子类。</strong></p></li><li><p><strong>如果一个类没有显式地使用extends关键字，则该类就默认继承于”java.lang.Object”类。</strong></p><p>–&gt; <strong>所有的java类都可以使用object类提供的方法。【最终继承的都是object类】</strong></p></li></ul></li></ol><hr><h4 id="方法重写（方法复写，override）"><a href="#方法重写（方法复写，override）" class="headerlink" title="方法重写（方法复写，override）"></a>方法重写（方法复写，override）</h4><ol><li><p><strong>方法重写的引入</strong></p><ul><li>eg：智能机是对功能机做的扩展，也就是应该让“智能机类”继承于“功能机类”，也就意味着“父类”和“子类”中都有show()方法，从而就形成了“方法重写”。</li></ul></li><li><p><strong>什么是方法重写呢？</strong></p><ul><li>在子类中，我们定义一个和父类“几乎”一模一样的方法，这就形成了“方法重写”。</li></ul></li><li><p><strong>什么时候使用方法重写？</strong></p><ul><li>当父类提供的方法无法满足子类的需求，则在子类中就可以重写父类提供的方法，从而满足开发的需求。</li></ul></li><li><p><strong>父类的哪些方法子类不能重写？</strong></p><ul><li>父类的构造方法，子类不能重写。</li><li>父类的静态方法，子类不能重写。</li><li>父类私有的成员方法，子类不能重写。</li></ul></li><li><p><strong>方法重写的注意点</strong></p><ul><li><p>通过子类对象来调用重写方法，则默认调用的是子类重写的方法，而不是调用父类被重写的方法。</p></li><li><p>保证子类的某个方法肯定是重写方法，则可以在该方法声明之前添加“@Override”注解，从而保证该方法肯定是重写方法。</p><p>–&gt; 如果某个方法声明之前添加了“@Override”注解，则该方法就必须是重写方法，否则就会编译错误。</p></li><li><p><strong>在子类重写方法中，如果想要调用父类被重写的方法，则必须通过super关键字来调用（this和super使用类似）</strong></p></li></ul></li><li><p><strong>方法重写的具体要求</strong></p><ul><li><p><strong>&#x3D;&#x3D;，子类重写方法的“方法名”和“形参列表”必须和父类被重写方法的“方法名”和“形参列表”相同。</strong></p><p>–&gt; 此处“形参列表”必须相同，指的是“形参个数”和“形参类型”必须相同，<strong>形参名字不同不影响。</strong></p></li><li><p><strong>“&gt;&#x3D;”，子类重写方法的<u>修饰符权限</u>必须<u>大于等于</u>父类被重写方法的修饰符权限【权限】。</strong></p><p>–&gt; 修饰符权限：public &gt; protected &gt; default &gt; private</p><p><strong>–&gt; 注意：子类就不能重写父类采用了static或private来修饰的方法。</strong></p></li><li><p><strong>“&lt;&#x3D;”，子类重写方法的“<u>返回值类型</u>”必须<u>小于等于</u>父类被重写方法的“返回值类型”【辈分】。</strong></p><p>–&gt; 如果父类被重写方法的返回值类型为void、基本数据类型和String类型，则子类重写方法的返回值类型必须和父类被重写方法的返回值类型保持一致（&#x3D;&#x3D;）。</p><p>–&gt; 如果父类被重写方法的返回值类型为引用数据类型（排除String类型），则子类重写方法的返回值必须小于等于被重写方法的返回值类型。（&lt;&#x3D;，辈分）。</p></li></ul></li></ol><hr><h4 id="方法重载和方法重写的区别"><a href="#方法重载和方法重写的区别" class="headerlink" title="方法重载和方法重写的区别"></a>方法重载和方法重写的区别</h4><ol><li><p><strong>整体区别</strong></p><ul><li><p>英文名字区别</p><p>方法重载：overload</p><p>方法重写：override</p></li><li><p>使用位置区别</p><p>方法重载：同一个类中使用。</p><p>方法重写：<strong>必须在继承体系中使用。</strong></p></li><li><p>具体作用区别</p><p>方法重载：允许在同一类中定义多个同名的方法，从而避免了方法名被污染。</p><p>方法重写：父类提供的方法如果无法满足子类需求，则子类就可以重写父类提供的方法。</p></li></ul></li><li><p><strong>具体区别</strong></p><ul><li><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//方法体</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>返回值<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修饰符的区别</p><p>方法重载：修饰符不同，不构成方法重载。</p><p>方法重写：<strong>子类重写方法的“<u>修饰符权限</u>”必须<u>大于等于</u>父类被重写方法的“修饰符权限”【权限】。</strong></p></li><li><p>返回值类型的区别</p><p>方法重载：返回值类型不同。不构成方法重载。</p><p>方法重写：<strong>子类重写方法的“<u>返回值类型</u>”必须<u>小于等于</u>父类被重写方法的“返回值类型”【辈分】。</strong></p></li><li><p>方法名的区别</p><p>方法重载：方法名必须相同。</p><p>方法重写：方法名必须相同。</p></li><li><p><strong>形参列表的区别</strong></p><p>方法重载：<strong>形参个数不同 或 形参类型不同，形参名字不同不影响。</strong></p><p>方法重写：<strong>形参个数 和 形参类型必须相同。</strong></p></li></ul></li></ol><hr><h4 id="重写toString-方法（理解）"><a href="#重写toString-方法（理解）" class="headerlink" title="重写toString()方法（理解）"></a>重写toString()方法（理解）</h4><ol><li><p><strong>请问print()和println()方法的作用</strong></p><ul><li><strong>通过输出语句，都能把输出的内容转化为字符串类型，然后把转化为字符串类型的结果输出到控制台。</strong></li></ul></li><li><p><strong>请问基本数据类型和引用数据类型在内存中存储的是什么？</strong></p><ul><li>“基本数据类型”在内存中存储的是“数据值”，“引用数据类型”在内存中存储的是“地址值”。</li></ul></li><li><p><strong>直接输出一个对象，则输出的内容是什么呢？</strong></p><p><img src="/images/note_images/%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%87%BA%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1.png"></p></li><li><p><strong>输入一个对象的时候，底层做了什么嘛操作？</strong></p><ul><li><p><strong>问题： 引用数据类型在内存中存储的是“地址值”，则我们输出一个对象的时候，为什么输出的是“带包名的类@地址值”呢？</strong></p><p>​    –&gt;原因：输出一个对象的时候，则默认就调用toString()这个方法，此时我们Tiger类中没有定义toString()方法，则默认调用的就是Object类中的toString()方法，在Object类提供的toString()方法中，就返回了“带包名的类@地址值”这个字符串，因此输出一个对象就输出了“带包名的类@地址值”。</p></li><li><p><strong>源码：分析Object类提供toString()方法的底层源码</strong></p><p><img src="/images/note_images/Object%E7%B1%BB%E6%8F%90%E4%BE%9B%E7%9A%84toString%E6%96%B9%E6%B3%95.png"></p></li><li><p><strong>重写Object类提供的toString()方法</strong></p><p><strong>问题：</strong>开发中，输出一个对象的时候，则直接输出“带包名的类@地址值”是没有任何意义的，实际开发中，我们输出一个对象的            时候，更多的是想输出该对象中的所有成员变量值，如何实现？</p><p><strong>解决：</strong>也就是说Object类提供的toStrig()方法无法满足我们的需求，则我们就可以重写Object类所提供的toString()方法，也就是在            重写toString()方法中返回该对象的所有成员变量值（字符串拼接成员变量后返回即可）。</p><pre class="line-numbers language-none"><code class="language-none">     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>实现：</strong>使用“alt + insert”快捷键来重写toString()方法，不要自己手动去重写toString()方法。</p><p><img src="/images/note_images/%E9%87%8D%E5%86%99toString%E6%96%B9%E6%B3%95.png"></p><p><strong>注意：建议每个类都应该重写Object类中的toString()方法，并且建议用“alt + insert”快捷键来重写toString()方法。</strong></p></li></ul></li></ol><hr><h4 id="super关键字-重点"><a href="#super关键字-重点" class="headerlink" title="super关键字(重点)"></a>super关键字(重点)</h4><ol><li><p><strong>super关键字的概述</strong></p><ul><li>创建一个对象成功之后，则虚拟机就会动态地创建一个引用，该引用指向的就是“新创建出来的对象”，并且该引用的名字就是this。</li><li>创建一个子类对象成功之后，则虚拟机还会动态创建一个引用，该引用指向的就是“当前对象的直接父类对象”，并且该引用的名字就是super。</li><li>总结：this指的就是“当前对象”，super指的就是“当前对象的直接父类对象”。并且this可以单独使用，但是super不能单独使用。</li></ul></li><li><p><strong>super关键字的作用</strong></p><ul><li><strong>强调：this和super指的都是“对象”，并且this和super使用场合是相同的（构造方法、成员方法和构造代码块）。</strong></li><li>操作父类的成员变量，语法： super.父类成员变量名</li><li>调用父类的成员方法，语法：super.父类成员方法(实参列表);</li><li>调用父类的构造方法，语法：super(实参列表);</li></ul></li><li><p><strong>this和super的区别</strong></p><ul><li>this的特点：先在当前类找，找不到再去父类找。</li><li>super的特点：直接去父类找，而不会在当前类找。</li></ul></li><li><p><strong>super关键字的注意点</strong></p><ul><li><p>在子类重写方法中，如果想要调用父类被重写的方法，则必须通过super关键字来实现。</p></li><li><p>当局部变量，子类的成员变量和父类的成员变量同名的时候，则该如何去区分呢？</p><p><strong>局部变量采用“就近原则”，子类成员变量通过“this”来操作，父类成员变量通过“super”来操作。</strong></p></li><li><p><strong>父类私有的成员变量，在子类中即使使用super关键字也无法操作，只能通过setter和getter方法来操作父类私有成员变量。</strong></p></li></ul></li></ol><hr><h4 id="super-实参列表-的概述"><a href="#super-实参列表-的概述" class="headerlink" title="super(实参列表)的概述"></a>super(实参列表)的概述</h4><ul><li><strong>在子类构造方法中，如果想要显式地调用父类的某个构造方法，则必须通过“super(实参列表)”来实现，从而实现了代码的复用。</strong></li><li><strong>在子类构造方法中，如果没有显式地调用别的构造方法，则默认就会调用父类的无参构造方法，也就是编译时会默认添加“super();”语句。</strong></li></ul><hr><h4 id="super-实参列表-的注意点"><a href="#super-实参列表-的注意点" class="headerlink" title="super(实参列表)的注意点"></a>super(实参列表)的注意点</h4><ul><li><strong>“super(实参列表)”只能存在于构造方法中，并且必须在构造方法有效代码的第一行。</strong></li><li><strong>建议每个类都应该有自己的无参构造方法，避免在继承体系中子类找不到父类的无参构造方法。</strong></li></ul><hr><h4 id="this-实参列表-和super-实参列表-的区别"><a href="#this-实参列表-和super-实参列表-的区别" class="headerlink" title="this(实参列表)和super(实参列表)的区别"></a>this(实参列表)和super(实参列表)的区别</h4><ul><li>this(实参列表)的特点：<strong>调用“当前类”的别的构造方法，并且必须在构造方法有效代码的第一行。</strong></li><li>super(实参列表)的特点：<strong>调用“父类”中的某个构造方法，并且必须在构造方法有效代码的第一行。</strong></li><li>结论：<strong>因为“this(实参列表)”和“super(实参列表)”都必须在构造方法有效代码的第一行，因此构造方法中不允许同时存在“this(实参列表)”和“super(实参列表)”。</strong></li></ul><hr><h4 id="继承体系下，创建子类对象的步骤分析"><a href="#继承体系下，创建子类对象的步骤分析" class="headerlink" title="继承体系下，创建子类对象的步骤分析"></a>继承体系下，创建子类对象的步骤分析</h4><ol><li><strong>第一步：加载类（先加载父类，后加载子类）</strong><ul><li>先执行父类的静态代码块，然后执行子类的静态代码块。</li></ul></li><li><strong>第二步：创建对象（先创建父类对象，后创建子类对象）</strong><ul><li>首先，执行父类的构造代码块，接着执行父类的构造方法。</li><li>然后，执行子类的构造代码块，接着执行子类的构造方法。</li></ul></li></ol><hr><h4 id="继承体系下，创建子类对象的内存分析"><a href="#继承体系下，创建子类对象的内存分析" class="headerlink" title="继承体系下，创建子类对象的内存分析"></a>继承体系下，创建子类对象的内存分析</h4><ul><li><strong>创建一个子类对象，则默认还会创建他的父类对象，并且创建的这些对象之间属于“包含”关系。</strong></li><li><strong>也就是说，子类对象中包含了父类对象，那么子类对象和父类对象的“首地址”肯定是相同的。</strong></li></ul><p><img src="/images/note_images/%E5%88%9B%E5%BB%BA%E5%AD%90%E7%B1%BB%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90.png"></p><hr><h4 id="继承和组合"><a href="#继承和组合" class="headerlink" title="继承和组合"></a>继承和组合</h4><ol><li>组合的引入<ul><li>需求：有一台电脑，电脑中包含鼠标、键盘和CPU等。</li><li>实现：定义电脑类（Computer），然后再定义鼠标类（Mouse）、键盘类（KeyBoard）和CPU类（CPU），然后把鼠标、键盘和CPU作为电脑类的“成员变量”即可，这就形成了“组合”关系。</li></ul></li><li>继承和组合<ul><li>相同点<ul><li><strong>都能让类与类之间产生联系，都能实现代码的复用。</strong></li></ul></li><li>不同点<ul><li><strong>继承描述的是“is a”的关系</strong>，例如：Tiger is Animal, Student is a Person等等。</li><li><strong>组合描述的是“has a”的关系</strong>，例如：Computer has a Mouse,Computer has a keyBoard等等。</li></ul></li></ul></li></ol><hr><h4 id="final关键字的概述"><a href="#final关键字的概述" class="headerlink" title="final关键字的概述"></a>final关键字的概述</h4><ol><li>final关键字的含义<ul><li>最终的、不可变的</li></ul></li><li>final关键字能修饰的内容？<ul><li>final关键字能修饰类、变量（局部变量、成员变量和静态变量）和方法（成员方法和静态方法），但是不能修饰构造方法和代码块。</li></ul></li></ol><hr><h4 id="final关键字的特点"><a href="#final关键字的特点" class="headerlink" title="final关键字的特点"></a>final关键字的特点</h4><ol><li>使用final关键字修饰的类，<strong>则该类就不能被继承。</strong><ul><li>使用final修饰的类，则改类肯定是一个子类，例如String、Math和System都采用了final修饰。</li></ul></li><li><strong>使用final关键字修饰的方法（成员方法和静态方法），则该方法就不能被重写。</strong><ul><li>如果某个成员方法不想被子类重写，则该方法就采用final来修饰即可，例如Object类中的很多方法都采用了final修饰。</li></ul></li><li><strong>使用final关键字修饰的变量（局部变量、成员变量和静态变量），则该变量就变为常量了。</strong><ul><li>常量名必须符合“标识符”的命名规则，必须符合“字母全部大写，多个单词之间以下划线连接”的命名规范。</li><li>使用final修饰的静态变量，要么做显式初始化，要么在静态代码块中初始化，否则就会编译错误。</li><li>使用final修饰的成员变量，要么做显式初始化，要么在构造代码块中初始化，要么在构造方法中初始化，否则就会编译错误。</li></ul></li><li><strong>使用final关键字，我们不能修饰构造方法、局部代码块、构造代码块和静态代码块。</strong></li></ol><hr><h4 id="final修饰引用数据类型变量的特点"><a href="#final修饰引用数据类型变量的特点" class="headerlink" title="final修饰引用数据类型变量的特点"></a>final修饰引用数据类型变量的特点</h4><ul><li><strong>引用数据类型的变量采用final修饰后，则该变量就变为常量了，因此常量保持的地址值不能更改，但是该常量指向堆内存中的成员变量值可以更改。</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 实例化Tiger对象</span>        <span class="token keyword">final</span> <span class="token class-name">Tiger</span> TIGER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token string">"母老虎"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注意：常量只能赋值一次！</span>        <span class="token comment">// TIGER = null; // 编译错误</span>        <span class="token comment">// 问题：请问是否能修改TIGER指向堆内存中的成员变量值呢？？？</span>        TIGER<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"公老虎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TIGER<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>TIGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*final int MAX_VALUE = 10;        System.out.println(MAX_VALUE); // 输出：10        // 注意：常量只能赋值一次！        MAX_VALUE = 20; // 编译错误*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="通过javadoc-exe来生成API文档（了解）"><a href="#通过javadoc-exe来生成API文档（了解）" class="headerlink" title="通过javadoc.exe来生成API文档（了解）"></a>通过javadoc.exe来生成API文档（了解）</h4><ol><li>注释的分类<ul><li>单行注释</li><li>多行注释</li><li>文档注释</li></ul></li><li>注释的使用<ul><li>单行注释用于对代码块或方法体中的某行代码做解释说明，文档注释是用于给类、方法（成员方法、静态方法和构造方法）、成员变量、静态变量、构造代码块和静态代码块做解释说明，而多行注释在实际开发中很少使用。</li></ul></li><li>文档注释的概述<ul><li>使用文档注释的时候，我们需要合理的配合“块标记”来使用，常见的块标记如下：<ul><li>@version版本号    –&gt; 说明当前类在那个板块中开发或在那个版本中有修改</li><li>@author 作者名 –&gt; 说明当前类是那个程序员开发的</li><li>@param 形参名 –&gt; 对方法的形参做解释说明</li><li>@return             –&gt; 对方法的返回值做解释说明</li></ul></li></ul></li><li>生成项目的API文档<ul><li>IDEA默认集成了javadoc.exe这个可执行程序，因此我们通过IDEA就能够直接生成项目的API文档，详情步骤请看预习文档。【第7章】</li></ul></li></ol><hr><h3 id="DAY14"><a href="#DAY14" class="headerlink" title="DAY14"></a>DAY14</h3><h4 id="Object类的概述"><a href="#Object类的概述" class="headerlink" title="Object类的概述"></a>Object类的概述</h4><ul><li>如果一个类没有显式地使用extends关键字，则这个类默认就是继承于java.Object类，也就是说Object类是所有java类的父类。也就意味着所有的java类都能使用Object类提供的方法。</li></ul><hr><h4 id="Object类的方法"><a href="#Object类的方法" class="headerlink" title="Object类的方法"></a>Object类的方法</h4><p>1. </p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//作用：把对象转化为字符串并返回。</span><span class="token comment">//注意：每个类都应该重写Object类的toString()方法，在重写的方法中返回该对象的所有成员变量。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2. </p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//作用：判断this和obj这两个对象是否相等。相等则返回true，不相等则返回flse。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>回顾：关于比较运算符“&#x3D;&#x3D;”的作用？</p><ul><li>如果左右两边属于“基本数据类型”，则比较左右两边的“数据值”是否想等。</li><li>如果左右两边属于“引用数据类型”，则比较左右两边的“地址值”是否相等。</li></ul></li><li><p>底层：分析Object类提供equals()方法的底层源码</p><ul><li>&#96;&#96;&#96;java<br>public boolean equals(Object obj){<br>return(this &#x3D;&#x3D; obj)<br>}<pre class="line-numbers language-none"><code class="language-none">     - 强调：Object类提供的equals(Object obj)方法，则默认比较两个对象的“地址值”是否相等。     - **问题：实际开发中，直接比较两个对象的地址值是否相等是没有任何意义的，因为每次创建出来的对象地址值都不一样，开发中我们比较两个对象是否相等，更多的是想比较两个对象的成员变量值是否相等，则该需求如何实现呢？**     - 解决：Object类提供的equals(Object obj)方法无法满足我们的需求，则我们就就可以重写Object类所提供给的equals(Object obj)方法，然后在重写的equals(Object obj)方法中根据成员变量值来判断两个对象是否相等。     - 实现：不建议手动去重写equals(Object obj)方法，而是**建议使用“alt + inset”快捷键来重写equals(Object obj)方法。**     - **注意：java提供的类，则默认重写了Object类中的equals(Object obj)方法；自定义的类，则需要我们自己去重写Object类中的equals(Object obj)方法。**      - **哈希算法（自行了解）**---#### hashCode()1.       &#96;&#96;&#96;java   public native int hashCode();   &#x2F;&#x2F;作用：根据对象来生成一个哈希值，此处的哈希值是一个int类型的整数。   &#x2F;&#x2F;底层：Objec类提供的hashCode()方法，则默认是根据对象的地址值来生成的哈希值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ol start="2"><li><p>问题：实际开发中，根据对象的地址值来生成哈希值是没有任何意义的，因为每次创建出来的对象的地址值都不一样。开发中，我们更多的是想根据对象的成员变量来生成哈希值，则该需求如何实现呢？</p><ul><li><p>解决：Object类提供的hashCode()方法无法满足我们的需求，则我们就可以重写Object类提供的hashCode()方法，并且在重写的hashCode()方法中，根据对象的成员变量值来生成哈希值即可。</p></li><li><p>实现：不建议手动去重写hashCode()方法，而是建议使用“Alt + insert”快捷键来重写hashCode()方法。</p></li><li><p>结论：</p><ol><li><p>两个对象调用equals()方法的结果是true，则这两个对象调用hashCode()方法返回的结果“肯定”相等。</p><p>–&gt; 如果都没有重写equals()方法和hashCode()方法，则以上结论“肯定”满足。</p><p>–&gt; 如果重写了equals()方法，则hashCode()方法也必须重写，从而保证以上结论“肯定”相等。</p><p>–&gt; 强调：要么都不重写equals()和hashCode()方法，要么都重写equals()和hashCode()方法，从而保证以上结论“肯定”满足。</p></li><li><p><strong>两个对象调用hashCode()方法返回的结果相同，则这两个对象调用equals()方法的结果“未必”为true。</strong></p><p>–&gt; 不同的两个对象（两个对象调用equals()方法的结果为false），则调用hashCode()方法返回的结果可能相同。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 实例化两个Tiger对象</span>        <span class="token class-name">Tiger</span> tiger1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token string">"母老虎"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Tiger</span> tiger2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token string">"母老虎"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断两个对象是否相等</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tiger1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tiger2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获得两个对象的哈希值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tiger1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：854700057</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tiger2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：854700057</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–&gt; 设计哈希算法的时候，则必须遵守的原则为：不同的两个对象，则生成的哈希值要尽可能不相同。</p></li></ol></li></ul></li></ol><p><img src="/images/note_images/hashCode.png"></p><hr><h4 id="面试题-2"><a href="#面试题-2" class="headerlink" title="面试题"></a>面试题</h4><ol><li><p><strong>设计哈希算法的时候，为啥偏偏要使用31来做乘法运算呢？</strong></p><ul><li><p>原因1：因为31是一个质数，而<strong>质数做乘法运算得到相同结果的概率非常低。</strong></p><p>–&gt; 例如：31 * 5，则结果为：155，那么得到155的乘法组合有：31 * 5、1 * 155</p><p>–&gt; 例如：30 * 5，则结果为：150，那么得到150的乘法组合有：30 * 5、1 * 150、25 * 6、50 * 3、15 * 10等等</p></li><li><p>原因2：因为31是一个质数，而<strong>使用质数做乘法运算的效率非常高（位运算）</strong>。</p><p>–&gt; 使用31来做乘法运算的公式，例如把“31*i”的操作换算为位运算的公式为：(i &lt;&lt; 5) - i</p><p> –&gt; 例如：31*5的结果为155，则计算公式“(5 &lt;&lt; 5) - 5”，那么得到的结果就是155</p><p> –&gt; 例如：31*3的结果为93，则计算公式“(3 &lt;&lt; 5) - 3”，那么得到的结果就是93</p><hr></li></ul></li><li><p><strong>质数千千万，为啥偏偏要使用31来做乘法运算呢？</strong></p><ul><li>假设：使用7来做乘法运算，因为7是一个质数，因此做乘法运算得到相同结果的概率较低，并且使用7来做乘法运算的效率还非常高。</li><li>公式：实现“7*i”的操作，则可以通过“(i &lt;&lt; 3) - i”来实现。</li><li>例如：7*5，则套用公式为“(5 &lt;&lt; 3) - 5”，则得到的结果为：35</li><li>答案：为什么要使用31来做乘法运算，因为这是数学家让我们这么做的。</li></ul></li></ol><hr><h4 id="本地方法"><a href="#本地方法" class="headerlink" title="本地方法"></a>本地方法</h4><ol><li>什么是本地方法？<ul><li><strong>使用native关键字修饰的方法，我们就称之为“本地方法”。</strong></li></ul></li><li>本地方法的特点？<ul><li>本地方法只有方法声明，没有方法内部的具体实现，也就是没有方法体。</li></ul></li><li>为什么会有本地方法？<ul><li>因为java语言无法直接操作硬件，因此需要调用别的编程语言来操作硬件，而本地方法体就是调用了别的编程语言，考虑到java程序员可能不认识别的编程语言，因此本次发就省略了方法体。</li></ul></li></ol><hr><h4 id="基本数据类型的转换"><a href="#基本数据类型的转换" class="headerlink" title="基本数据类型的转换"></a>基本数据类型的转换</h4><ol><li><p>隐式类型转换（自动）</p><ul><li>&#96;&#96;&#96;java<br>double num &#x3D; 123;<pre class="line-numbers language-none"><code class="language-none">2. 强制类型转换（手动）   - &#96;&#96;&#96;java     int num &#x3D; (int)3.14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h4 id="引用数据类型的转换"><a href="#引用数据类型的转换" class="headerlink" title="引用数据类型的转换"></a>引用数据类型的转换</h4><ol><li><p><strong>向上转型（自动）</strong></p><ul><li><p>解释：父类引用指向子类对象。</p></li><li><p><strong>语法：父类类型 对象 &#x3D; 子类对象;</strong></p></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>优势：隐藏了子类特有内容，从而提高了代码的扩展性（多态）。</strong></p></li><li><p><strong>劣势：只能使用父类共有的内容，不能使用子类特有的内容。</strong></p></li><li><p>使用场合：<strong>使用“多态”的时候，则我们就必须使用“向上转型”，从而提高了代码的扩展性。</strong></p></li></ul></li><li><p><strong>向下转型（手动）</strong></p><ul><li><p>解释：子类引用指向父类对象。</p></li><li><p><strong>语法：子类类型 对象 &#x3D; (子类类型) 父类对象;</strong></p></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>animal<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>优势：不但能使用父类共有的内容，并且还能使用子类特有的内容。</strong></p></li><li><p>劣势：使用向下转型的时候，<strong>可能会抛出“类型转换异常（ClassCastException）”。</strong></p></li><li><p>使用场合：使用多态提高代码的扩展性后，<strong>如果需要使用对象实际类型中的内容，则那么就必须做向下转型的操作。</strong></p></li></ul></li><li><p>eg1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 向上转型（自动）</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 向下转型（手动）</span>        <span class="token comment">// 原因：因为animal对象本质上属于Dog类型，因此就无法将animal对象强转为Tiger类型</span>        <span class="token class-name">Tiger</span> tiger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Tiger</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span> <span class="token comment">// 类型转换异常</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 向上转型（自动）</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 向下转型（手动）</span>        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>        <span class="token comment">// 优势：不但能使用父类共有的内容，并且还能使用子类特有的内容。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 向上转型（自动）</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 劣势：只能使用父类共有的内容，不能使用子类特有的内容。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// System.out.println(animal.color); // 编译错误</span>        <span class="token comment">// animal.show(); // 编译错误</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eg2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 需求：调用一个方法，传入一个字符串类型的类名，则就返回该类名所对应的对象。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token class-name">Animal</span> dog <span class="token operator">=</span> <span class="token function">getAnimalInstance</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token class-name">Animal</span> tiger <span class="token operator">=</span> <span class="token function">getAnimalInstance</span><span class="token punctuation">(</span><span class="token string">"Tiger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 场合二：返回值类型为父类类型，则返回值就可以是该父类的任意子类对象。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Animal</span> <span class="token function">getAnimalInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"Dog"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"Cat"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"Pig"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"Bird"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"Tiger"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"参数不合法异常，name："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="多态的引入"><a href="#多态的引入" class="headerlink" title="多态的引入"></a>多态的引入</h4><ol><li><p>需求：在动物园中，管理员专门给动物们喂食。</p><ul><li><p>实现：定义管理员类（Admin），然后再定义动物类（Dog、Cat、Pig、Bird和Tiger），接着给每个动物提供eat()方法，最后再管理员类中给每个动物提供喂食的方法，例如给Dog提供的喂食方法为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">feedDog</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>问题：</p><ul><li>a)动物园中有无穷无尽的动物，则在管理员类中就需要提供无穷无尽的喂食方法。</li><li>b)当动物园引进一只新的动物，则在管理员类中就需要为它提供喂食的方法，这样不利于程序的维护性。</li></ul></li><li><p>解决：使用“多态”来解决。</p></li></ul></li><li><p>修改代码的步骤？</p><ul><li>第一步：定义一个Animal类，然后再Animal类中提供eat()方法。</li><li><strong>第二步：让所有的动物类都继承于Animal类，并重写Animal类的eat()方法。</strong></li><li>第三步：在Admin类中，我们只提供一个喂食的方法，也就是专门给所有的动物们喂食。</li><li>第四步：在测试类中，我们调用Admin类的feedAnimal()方法，用于给所有动物们喂食。</li></ul></li><li><p><strong>使用多态的前提？</strong></p><ul><li><p><strong>前提1：继承是实现多态的前提。</strong></p><p>–&gt; 让所有的动物类都继承于Animal类，也就是Animal类是所有动物类的父类！</p></li><li><p><strong>前提2：子类必须重写父类方法。</strong></p><p>–&gt; 所有的动物类都重写了Animal类的eat()方法，毕竟每个动物吃的东西都不同。</p></li><li><p><strong>前提3：父类引用指向子类对象。</strong></p><p>–&gt; Admin类中的feedAnimal()方法的形参为“Animal”类型，调用该方法时的实参为“Animal类的子类对象”，此处就用到了“父类引用指向子类对象”。</p><p>–&gt; 调用feedAnimal()方法的代码为“admin.feedAnimal(new Dog());”，则实现赋值给形参的操作就等效于：Animal animal &#x3D; new Dog();</p></li></ul></li><li><p><strong>使用多态的场合</strong></p><ul><li><p><strong>场合一：方法的形参为父类类型，则实参就可以是该父类的任意子类对象。</strong></p><p>–&gt; 例如：管理员给动物们喂食的案例</p></li><li><p><strong>场合二：返回值类型为父类类型，则返回值就可以是该父类的任意子类对象。</strong></p><p>–&gt; 例如：简单工厂模式的案例</p></li></ul></li><li><p>目前的学习中，我们在哪些地方遇到多态呢？</p><ul><li>在Object类中，提供的equals(Object obj)方法就使用了多态。</li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 实例化管理员对象</span>        <span class="token class-name">Admin</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化动物对象</span>        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pig</span> pig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bird</span> bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Tiger</span> tiger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Panda</span> panda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Panda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 管理员给动物们喂食</span>        admin<span class="token punctuation">.</span><span class="token function">feedAnimal</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">feedAnimal</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">feedAnimal</span><span class="token punctuation">(</span>pig<span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">feedAnimal</span><span class="token punctuation">(</span>bird<span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">feedAnimal</span><span class="token punctuation">(</span>tiger<span class="token punctuation">)</span><span class="token punctuation">;</span>        admin<span class="token punctuation">.</span><span class="token function">feedAnimal</span><span class="token punctuation">(</span>panda<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="多态情况下，操作成员变量的特点"><a href="#多态情况下，操作成员变量的特点" class="headerlink" title="多态情况下，操作成员变量的特点"></a>多态情况下，操作成员变量的特点</h4><ol><li>编译时：检查“编译时类型”，也就是检查编译时类型中是否有该成员变量。</li><li>运行时：检查“编译时类型”，也就是操作了编译时类型中的成员变量。</li><li><strong>总结：多态情况下操作成员变量，则编译和运行都检查“编译时类型”。</strong></li></ol><hr><h4 id="多态情况下，调用成员方法的特点？"><a href="#多态情况下，调用成员方法的特点？" class="headerlink" title="多态情况下，调用成员方法的特点？"></a>多态情况下，调用成员方法的特点？</h4><ol><li><p>编译时：检查“编译时类型”，也就是检查编译时类型中是否有该成员方法。</p></li><li><p>运行时：检查“运行时类型”，也就是调用了运行时类型中的成员方法。</p></li><li><p><strong>总结：编译时检查“编译时类型”，运行时检查“运行时类型”。</strong></p></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token comment">// animal对象的编译时类型为“Animal”类，animal对象的运行时类型为“Tiger”类。</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 运行时：检查“运行时类型”，也就是调用了运行时类型中的成员方法。</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 编译时：检查“编译时类型”，也就是检查编译时类型中是否有该成员方法。</span>        <span class="token comment">/*animal.eat();        animal.sleep(); // 编译错误*/</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token comment">// animal对象的编译时类型为“Animal”类，animal对象的运行时类型为“Tiger”类。</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 运行时：检查“编译时类型”，也就是操作了编译时类型中的成员变量。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 编译时：检查“编译时类型”，也就是检查编译时类型中是否有该成员变量。</span>        <span class="token comment">/*System.out.println(animal.name);        System.out.println(animal.color); // 编译错误*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="instanceof二元运算符的概述"><a href="#instanceof二元运算符的概述" class="headerlink" title="instanceof二元运算符的概述"></a>instanceof二元运算符的概述</h4><ol><li><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> result <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注意：</p><ul><li>此处obj可以是一个对象，也可以为null。</li><li>此处class可以是一个类，也可以是一个接口。</li><li>此处instanceof二元运算符返回的结果肯定是boolean类型。</li></ul></li></ol><hr><h4 id="instanceof二元运算符的作用"><a href="#instanceof二元运算符的作用" class="headerlink" title="instanceof二元运算符的作用"></a>instanceof二元运算符的作用</h4><ol><li>官方：判断左边的“对象”是否为右边“类或接口”的实例，如果“对象”属于“类或接口”的实例，则返回true，否则一律返回false。</li><li>通俗：如果强转的“对象”属于强转“类或接口”的实例，则就可以把该“对象”强转为该“类或接口”的类型，否则就会出现类型转换异常。</li></ol><hr><h4 id="编译时类型和运行时类型的概述"><a href="#编译时类型和运行时类型的概述" class="headerlink" title="编译时类型和运行时类型的概述"></a>编译时类型和运行时类型的概述</h4><ol><li><p><strong>编译时类型：指的就是声明对象的类型，也就是等号左边的类型。</strong></p></li><li><p><strong>运行时类型：指的就是对象的实际类型，也就是等号右边的类型。</strong></p></li><li><p>eg：没有使用多态之前，则编译时类型和运行时类型如下：</p><ul><li><pre><code class="java">Dog dog = new Dog();<pre class="line-numbers language-none"><code class="language-none">   - 此处dog对象的编译时类型为”Dog“类，dog对象的运行时类型为”Dog“类。4. eg：学习使用多态之后，则编译时类型和运行时类型如下：   - &#96;&#96;&#96;java     Animal animal &#x3D; new Dog();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>此处animal对象的编译时类型为“Animal”类，animal对象的运行时类型为“Dog”类。</p></li></ul></li></ol><hr><h4 id="instanceof二元运算符编译的特点"><a href="#instanceof二元运算符编译的特点" class="headerlink" title="instanceof二元运算符编译的特点"></a>instanceof二元运算符<u>编译</u>的特点</h4><ol><li><strong>情况一：当obj存储的内容就是null的情况</strong><ul><li>当obj的存储的内容为null，则无论右侧的类或接口属于哪种类型，那么都编译都通过。</li></ul></li><li><strong>情况二：当obj存储的内容不是null的情况</strong><ul><li>当右边的“类或接口”属于左边“对象”编译时类型的父类、本身类和子类时，则编译通过，否则一律编译错误。</li><li><strong>注意：此处参照左边“对象”的“编译时类型”，并且此处的“本身类”指的也就是对象的“编译时类型”。</strong></li></ul></li></ol><hr><h4 id="instanceof二元运算符运行的特点"><a href="#instanceof二元运算符运行的特点" class="headerlink" title="instanceof二元运算符运行的特点"></a>instanceof二元运算符<u>运行</u>的特点</h4><ol><li><p><strong>情况一：当obj存储的内容就是null的情况</strong></p><ul><li>当obj存储的内容为null，则无论右侧的类或接口属于哪种类型，那么返回的结果都是false。</li><li><strong>结论：null不是任何类或接口的实例。</strong></li></ul></li><li><p><strong>情况二：当obj存储的内容不是null的情况</strong></p><ul><li><strong>当右侧的“类或接口”属于左边“对象”运行时类型的父类和本身类时，则一律返回true；</strong></li><li>当右侧的“类或接口”属于左边“对象”运行时类型的子类和兄弟类时，则一律返回false。</li><li><strong>注意：此处参照左边“对象”的“运行时类型”，并且此处的“本身类”指的也就是对象的“运行时类型”。</strong></li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token comment">// animal对象的编译时类型为“Animal”类，animal对象的运行时类型为“Dog”类</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 编译时：父类      运行时：父类</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出：true</span>        <span class="token comment">// 编译时：本身类    运行时：父类</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出：true</span>        <span class="token comment">// 编译时：子类      运行时：本身类</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出：true</span>        <span class="token comment">// 编译时：子类      运行时：兄弟类</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Tiger</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出：false</span>        <span class="token comment">// 编译时：子类      运行时：子类</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">SmallDog</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>        <span class="token comment">// 编译时：没有关系</span>        <span class="token comment">// System.out.println(animal instanceof String);</span>        <span class="token comment">// 编译时：没有关系</span>        <span class="token comment">// System.out.println(animal instanceof Test01);</span>        <span class="token comment">/*System.out.println(null instanceof Object);   // 输出：false        System.out.println(null instanceof Animal);   // 输出：false        System.out.println(null instanceof Dog);      // 输出：false        System.out.println(null instanceof Tiger);    // 输出：false        System.out.println(null instanceof SmallDog); // 输出：false        System.out.println(null instanceof String);   // 输出：false        System.out.println(null instanceof Test01);   // 输出：false*/</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 需求：把animal对象强转为Dog类型</span>        <span class="token comment">// 1.判断animal对象是否为Dog类的实例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 2.把animal对象强转为Dog类型</span>            <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"把animal对象强转为Dog类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 需求：把animal对象强转为Tiger类型</span>        <span class="token comment">// 1.判断animal对象是否为Tiger类的实例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Tiger</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 2.把animal对象强转为Tiger类型</span>            <span class="token class-name">Tiger</span> tiger <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Tiger</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"把animal对象强转为Tiger类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 需求：把animal对象强转为SmallDog类型</span>        <span class="token comment">// 1.判断animal对象是否为SmallDog类的实例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">SmallDog</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 2.把animal对象强转为SmallDog类型</span>            <span class="token class-name">SmallDog</span> smallDog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SmallDog</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"把animal对象强转为SmallDog类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="abstract的引入"><a href="#abstract的引入" class="headerlink" title="abstract的引入"></a>abstract的引入</h4><ol><li>需求：在动力节点中，有讲师和助教两个工种，他们都具备工作的能力。</li><li>实现：定义讲师类（Teacher）和助教类（Assistant），然后分别提供work()的方法。</li><li>问题：讲师类和助教类都有work()方法，也就是讲师类和助教类都有相同的代码，因此我们需要实现代码的复用。</li><li>解决：使用“继承”来实现。定义一个员工类（Employee），并且给员工类提供work()方法，然后让讲师类和助教类继承于员工类，并重写员工类中的work()方法。</li><li>问题1：世界上没有任何一个工种就叫做员工，因此员工类不应该被实例化！<ul><li>–&gt; 使用“抽象类”来解决，也就是把员工类设置为抽象类即可。</li></ul></li><li>问题2：为了避免讲师和助教偷懒，因为要求讲师类和助教类必须重写员工类的work()方法！<ul><li>–&gt; 使用“抽象方法”来解决，也就是把员工类的work()方法设置为抽象方法。</li></ul></li></ol><hr><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ol><li><p>什么是抽象类</p><ul><li><strong>使用abstract关键字修饰的类，则我们就称之为“抽象类”。</strong></li></ul></li><li><p><strong>抽象类的组成</strong></p><ul><li>a)在抽象类中，依旧可以拥有成员变量和静态变量。</li><li>b)在抽象类中，依旧可以拥有成员方法和静态方法，<strong>并且还可以有任意多个抽象方法。</strong></li><li>c)在抽象类中，依旧可以拥有构造方法，该构造方法用于给抽象类中的成员变量做指定初始化操作。</li><li>d)在抽象类中，依旧可以拥有构造代码块和静态代码块。</li><li><strong>总结：抽象类就是一个特殊的类，抽象类对比普通类新增了任意多个抽象方法。</strong></li></ul></li><li><p><strong>抽象类的特点</strong></p><ul><li><p><strong>a)抽象类不能被实例化，因为抽象类中包含了抽象方法。</strong></p></li><li><p>b)抽象类肯定是一个父类，<strong>只有实现类“实现”了抽象类中的所有抽象方法，则该实现类才能被实例化，否则该实现类就是一个抽象类。</strong></p><p><strong>实现：子类重写父类的抽象方法，我们就称之为“实现”。</strong></p><p>重写：子类重写父类的普通方法，我们就称之为“重写”。</p></li><li><p><strong>c)抽象类可以作为方法的“形参类别”和“返回值类型”，也就是抽象类也可以实现多态。</strong></p></li><li><p><strong>d)实现类与抽象类之间属于“extends”的关系，并且属于“单继承”。</strong></p></li></ul></li></ol><hr><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><ol><li><p>什么是抽象方法？</p><ul><li><strong>使用abstract关键字修饰的方法，我们就称之为“抽象方法”。</strong></li></ul></li><li><p>抽象方法的特点</p><ul><li>a)抽象方法<strong>只有方法声明</strong>，没有方法内部的具体实现，也就是<strong>没有方法体。</strong></li><li><strong>b)抽象方法只能存在于“抽象类”和“接口”中，不能存在于“普通类”中。</strong></li></ul></li><li><p>关于abstract关键字的补充？</p><ul><li>a)<strong>请问abstract关键字和哪一个关键字是反义词？</strong>？？final</li><li>b)<strong>请问abstract关键字不能和哪些关键字共存呢？</strong>？？final、private、static</li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Employee employee = new Employee();</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化Teacher对象</span>        <span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacher<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 实例化Assistant对象</span>        <span class="token class-name">Assistant</span> assistant <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Assistant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        assistant<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h3 id="DAY15"><a href="#DAY15" class="headerlink" title="DAY15"></a>DAY15</h3><h4 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h4><ol><li>接口的引入<ul><li>需求：让飞机、炮弹、小鸟和超人进行飞行表演！</li><li>实现：定义飞机类（Plane）、炮弹类（Peng）、小鸟类（Bird）和超人类（SuperMan），然后为每个类提供showFly()的方法。</li><li>问题：飞机类、炮弹类、小鸟类和超人类都有showFly()方法，也就是这些类中有相同的代码，那么我们就需要实现代码的复用，如何实现？</li><li>解决：使用“继承”来解决。定义一个Flyable类，然后给Flyable类提供showFly()的方法，接着让飞机类、炮弹类、小鸟类和超人类“继承”于Flyable类，并重写Flyable类中的showFly()方法。</li><li>问题：继承描述的是“is a”的关系，也就是描述“相同体系”的基本行为，此处飞机、炮弹、小鸟和超人属于不同体系，因此使用继承不合适</li><li>解决：使用“接口”来解决。定义一个Flyable接口，然后给Flyable接口提供showFly()方法，接着让飞机类、炮弹类、小鸟类和超人类“实现”于Flyable接口，并实现Flyable接口中的showFly()方法。</li><li><strong>总结：接口描述的是“is like a”的关系，也就是描述“不同体系”的相同行为，此处飞机、炮弹、小鸟和超人属于不同体系，因此使用接口很合适。</strong></li></ul></li></ol><hr><h4 id="接口的概述"><a href="#接口的概述" class="headerlink" title="接口的概述"></a>接口的概述</h4><ol><li><p>接口的定义</p><ul><li><p><strong>明确：接口使用interface关键字来修饰，并且interface和class属于平级的，因此interface和class不能共存！</strong></p></li><li><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">interface</span> 接口 <span class="token keyword">extends</span> 父接口<span class="token number">1</span><span class="token punctuation">,</span> 父接口<span class="token number">2</span><span class="token punctuation">,</span> 父接口<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">&#123;</span> <span class="token comment">// 全局静态常量和全局抽象方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>接口的组成</p><ul><li><p>a)接口中的<strong>属性</strong>，<strong>默认全部是“全局静态常量”，也就是默认使用了“public static final”来修饰。</strong></p></li><li><p>b)接口中的<strong>方法，默认全部是“全局抽象方法”，也就是默认使用了“public abstract”来修饰。</strong></p><p><strong>在JDK1.8之后，接口中还新增了“全局静态方法”和“default修饰的全局默认方法”。</strong></p></li><li><p>c)<strong>在接口中，不允许存在构造方法，因为接口中都没有成员变量，因此就无需存在构造方法。</strong></p></li><li><p><strong>d)在接口中，不允许存在静态代码块和构造代码块。</strong></p></li></ul></li><li><p>接口的特点</p><ul><li>a)<strong>接口不能被实例化，因为接口中存在抽象方法，并且接口中没有构造方法。</strong></li><li>b)<strong>接口可以作为方法的“形参类型”和“返回值类型”</strong>，也就是<strong>接口能够实现多态。</strong></li><li>c)接口与接口之间属于“extends”的关系，并且<strong>接口还属于“多继承”。</strong></li><li>d)<strong>抽象方法只能存在于“抽象类”和“接口”中，不能存在于“普通类”中。</strong></li></ul></li></ol><hr><h4 id="实现类的概述"><a href="#实现类的概述" class="headerlink" title="实现类的概述"></a>实现类的概述</h4><ol><li><p>实现类的定义</p><ul><li><p>明确：<strong>实现类和接口之间属于“implements”的关系，而不是属于“extends”的关系。</strong></p></li><li><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 实现类 <span class="token keyword">extends</span> 父类 <span class="token keyword">implements</span> 接口<span class="token number">1</span><span class="token punctuation">,</span> 接口<span class="token number">2</span><span class="token punctuation">,</span> 接口<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#123;</span><span class="token comment">// 实现类中书写的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>实现类的特点</p><ul><li>a)<strong>实现类只有“实现”了接口中的所有抽象方法，则该实现类才能被实例化，否则该实现类就是一个抽象类。</strong></li><li>b)<strong>实现类可以先继承一个父类，然后再去实现多个接口，实现多个接口的操作我们就称之为“接口的多实现”。</strong></li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token keyword">extends</span> <span class="token class-name">Runable</span><span class="token punctuation">,</span> <span class="token class-name">Sleepable</span><span class="token punctuation">,</span> <span class="token class-name">Eatable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// a)接口中的属性，默认全部是“全局静态常量”，也就是默认使用了“public static final”来修饰。</span>    <span class="token comment">/*public static final*/</span> <span class="token class-name">String</span> CLASS_ROOM <span class="token operator">=</span> <span class="token string">"教室四"</span><span class="token punctuation">;</span>    <span class="token comment">// d)在接口中，不允许存在静态代码块和构造代码块。</span>    <span class="token comment">// &#123;&#125;</span>    <span class="token comment">// static &#123;&#125;</span>    <span class="token comment">// c)在接口中，不允许存在构造方法，因为接口中都没有成员变量，因此就无需存在构造方法。</span>    <span class="token comment">// public Flyable() &#123;&#125;</span>    <span class="token comment">// b)接口中的方法，默认全部是“全局抽象方法”，也就是默认使用了“public abstract”来修饰。</span>    <span class="token comment">/*public abstract*/</span> <span class="token keyword">void</span> <span class="token function">showFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在JDK1.8之后，接口中还新增了“全局静态方法”。</span>    <span class="token comment">/*public*/</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static method ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 在JDK1.8之后，接口中还新增了“default修饰的全局默认方法”。</span>    <span class="token comment">/*public*/</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default method ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Flyable</span><span class="token punctuation">.</span>CLASS_ROOM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Flyable</span><span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token comment">// bird对象的编译时类型为“Flyable”接口，bird对象的运行时类型为“Bird”类。</span>        <span class="token class-name">Flyable</span> bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 编译时：检查“编译时类型”，也就是检查Flyable接口中是否有showFly()方法。</span>        <span class="token comment">// 运行时：检查“运行时类型”，也就是调用了Bird类中的showFly()方法</span>        bird<span class="token punctuation">.</span><span class="token function">showFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="抽象类和接口的总结"><a href="#抽象类和接口的总结" class="headerlink" title="抽象类和接口的总结"></a>抽象类和接口的总结</h4><ol><li><p>普通类、抽象类和接口的特点</p><ul><li><strong>接口的抽象程度最高，抽象类的抽象程度次之，普通类的抽象程度最低。</strong></li></ul></li><li><p>抽象类和接口的对比</p><ul><li><p>相同点</p><ol><li>都是向上提取的结果，因此都不能被实例化。</li><li>都是向上提取的结果，因此都包含了抽象方法。</li></ol></li><li><p>不同点</p><ol><li><p>接口与接口之间属于“extends”的关系，并且属于“多继承”。</p><p>抽象类与抽象类之间属于“extends”的关系，并且属于“单继承”。</p></li><li><p>实现类与接口之间属于“implements”的关系，并且属于“多实现”。</p><p>实现类与抽象类之间属于“extends”的关系，并且属于“单继承”。</p></li><li><p>接口描述的是“is like a”的关系，也就是描述“不同体系”的相同行为。</p><p>抽象类描述的是“is a”的关系，也就是描述“相同体系”的基本行为。</p></li><li><p>接口中只有“全局静态常量”和“全局抽象方法”，JDK1.8之后新增了“全局静态方法”和“default修饰的全局默认方法”。</p><p>抽象类就是一个特殊类，抽象类对比普通类新增了任意多个抽象方法。</p></li></ol></li></ul></li></ol><hr><h4 id="单继承和多继承的概述？"><a href="#单继承和多继承的概述？" class="headerlink" title="单继承和多继承的概述？"></a>单继承和多继承的概述？</h4><ol><li>单继承：java、C#等等<ul><li>解释：一个子类只能有一个直接父类，类似于一个儿子只有一个亲爹。</li><li>优势：简单、安全。</li><li>劣势：只能继承一个父类的内容，则子类功能不够强大。</li></ul></li><li>多继承：C++<ul><li>解释：一个子类可以有多个直接父类，类似于一个儿子可以有多个亲爹。</li><li>优势：可以继承多个父类的内容，则子类功能非常强大。</li><li>劣势：复杂、不安全。</li></ul></li></ol><hr><h4 id="接口的多实现的概述"><a href="#接口的多实现的概述" class="headerlink" title="接口的多实现的概述"></a>接口的多实现的概述</h4><ol><li>需求：要求子类不但简单又安全，同时还要求子类功能非常强大，如何实现？<ul><li>不但要集合单继承和多继承的优势，并且还要摒弃单继承和多继承的劣势。</li><li><strong>实现：先让子类继承于某个父类，然后再让该子类实现多个接口，实现多个接口的操作就称之为“接口的多实现”。</strong></li><li>通过以上的实现方式，我们就模拟了C++的多继承操作，并且还摒弃了C++多继承的劣势。</li></ul></li></ol><hr><h4 id="内部类的概述"><a href="#内部类的概述" class="headerlink" title="内部类的概述"></a>内部类的概述</h4><ol><li><p>什么是内部类</p><ul><li><strong>在OutClass类的内部，我们再定义InnerClass类就是内部类。</strong></li></ul></li><li><p>内部类的定义位置？</p><ul><li>位置一：在类中，代码块或方法体的内部。</li><li>位置二：在类中，代码块和方法体的外部。</li></ul></li><li><p>什么时候使用内部类？</p><ul><li>描述一个事物的时候，我们发现该事物内部还有别的事物，此时就可以使用内部类来实现。</li><li>例如：描述小汽车的时候，我们发现小汽车内部还有发动机，此时的发动机就是一个内部类。</li></ul></li><li><p>内部类的分类？</p><ul><li><strong>成员内部类（掌握）</strong>、<strong>静态内部类（掌握）</strong>、局部内部类（了解）和<strong>匿名内部类（重点）</strong>。</li></ul></li><li><p>内部类编译的特点？</p><ul><li><p>在OuterClass类的内部，我们再定义InnerClass类，此时我们对程序进行编译，<strong>则就会获得两个字节码文件</strong></p><p>–&gt; <strong>OuterClass.class</strong>             外部类的字节码文件，也就是OuterClass类的字节码文件</p><p>–&gt; <strong>OuterClass$InnerClass.class</strong>  内部类的字节码文件，也就是InnerClass类的字节码文件</p></li></ul></li><li><p>操作内部类的特点？</p><ul><li>想要操作内部类，则必须通过外部类来实现，也就是内部类是依附于外部类的。</li></ul></li></ol><hr><h4 id="成员内部类（掌握）"><a href="#成员内部类（掌握）" class="headerlink" title="成员内部类（掌握）"></a>成员内部类（掌握）</h4><p>明确：学习成员内部类的时候，我们建议<strong>把“成员内部类”当成“成员变量”来理解。</strong></p><ol><li><p>定义位置</p><ul><li>在类中，代码块和方法体之外。</li></ul></li><li><p>定义语法</p><ul><li>&#96;&#96;&#96;java<br>[修饰符] class 外部类{<br>&#x2F;&#x2F;成员内部类<br>[修饰符] class 内部类{<br>    &#x2F;&#x2F;内部类中的代码<br>}<br>}<pre class="line-numbers language-none"><code class="language-none">3. 注意事项   - a)**定义成员内部类的时候**，我们可以使用private、protected、public、final和abstract来修饰，但是**不能使用static来修饰。**   - b)**在成员内部类中**，我们只能定义成员变量、成员方法、构造方法和构造代码块，但是**不能定义静态变量、静态方法和静态代码块。**   - c)想要操作成员内部类，则我们必须通过外部类对象来操作，也就是**成员内部类是依附于外部类对象的**，此处联想“成员变量”来理解。     **在外部类的成员位置，我们可以直接操作当前类的成员内部类；但是在外部类的静态位置，我们不能直接操作当前类的成员内部类。**   - d)在成员内部类中，我们不但能直接操作外部类的成员变量和成员方法，并且还能直接操作外部类的静态变量和静态方法。     代码执行到成员内部类中，则意味着外部类对象肯定已经创建完毕，因此就能操作外部类的成员内容和静态内容。   - e)在成员内部类中，当局部变量、成员内部类的成员变量和外部类的成员变量同名的时候，则如何区分呢？     - &#96;&#96;&#96;java       System.out.println&#123;&quot;局部变量：&quot; + name&#125;       System.out.println(&quot;内部类的成员变量：&quot; + this.name);       System.out.println(&quot;外部类的成员变量：&quot; + OuterClass.this.name);       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>成员内部类的实例化方式？</p><ul><li><p>情况一：<strong>在外部类的内部，我们实例化成员内部类对象（掌握）</strong></p><p>–&gt; 语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">内部类 对象 <span class="token operator">=</span> <span class="token keyword">new</span> 内部类<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>情况二：<strong>在外部类的外部，我们实例化成员内部类对象。（了解）</strong></p><p>–&gt; 语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">外部类<span class="token punctuation">.</span>内部类 对象 <span class="token operator">=</span> <span class="token keyword">new</span> 外部类<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> 内部类<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 外部类</span><span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"OuterClass"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> classRoom<span class="token punctuation">;</span>    <span class="token comment">// 成员内部类</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"InnerClass"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 在成员内部类中，当局部变量、成员内部类的成员变量和外部类的成员变量同名的时候，则如何区分呢？？？</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类的成员变量："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部类的成员变量："</span> <span class="token operator">+</span> <span class="token class-name">OuterClass</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*System.out.println(age); // 没问题            System.out.println(classRoom);  // 没问题            System.out.println("show ...");*/</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 情况一：在外部类的内部，我们实例化成员内部类。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InnerClass</span> innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"局部变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// new OuterClass().method();</span>        <span class="token comment">// 情况二：在外部类的外部，我们实例化成员内部类对象</span>        <span class="token class-name">OuterClass<span class="token punctuation">.</span>InnerClass</span> innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"局部变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h4 id="静态内部类-掌握"><a href="#静态内部类-掌握" class="headerlink" title="静态内部类(掌握)"></a>静态内部类(掌握)</h4><p>明确：学习静态内部类的时候，我们把“静态内部类”当成“静态变量”来理解。</p><ol><li><p>定义位置</p><ul><li>在类中，代码块和方法之外。</li></ul></li><li><p>定义语法</p><p>- </p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 外部类<span class="token punctuation">&#123;</span><span class="token comment">//静态内部类</span><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">static</span> <span class="token keyword">class</span> 内部类<span class="token punctuation">&#123;</span><span class="token comment">//书写静态内部类的代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项</p><ul><li><p>a)定义静态内部类的时候，我们可以使用private、protected、public、final和abstract来修饰，并且还<strong>必须使用static来修饰</strong></p></li><li><p>b)在静态内部类中，我们不但能定义成员变量、成员方法、构造方法和构造代码块，并且还<strong>能定义静态变量、静态方法和静态代码块。</strong></p></li><li><p>c)<strong>想要操作静态内部类，则直接通过外部类名来操作即可</strong>，因为静态内部类是依附于外部类的，此处联想“静态变量”来理解即可。</p><p><strong>在外部类的成员位置，我们可以直接操作当前类中的静态内部类；在外部类的静态位置，我们可以直接操作当前类中的静态内部类。</strong></p></li><li><p>d)<strong>在静态内部类中，我们可以直接操作外部类的静态变量和静态方法，但是不能直接操作外部类的成员变量和成员方法。</strong></p><p>静态内部类是依附于外部类的，也就是<strong>只要外部类加载完毕，则就能操作当前类中静态内部类。</strong></p></li><li><p>e)想要操作静态内部类中的静态变量和静态方法，则我们还可以通过以下方式来直接操作：</p><ol><li><strong>操作静态变量</strong>：外部类.静态内部类.静态变量名；</li><li><strong>操作静态方法</strong>：外部类.静态内部类.静态方法名(实参列表);</li></ol></li></ul></li><li><p><strong>静态内部类的实例化方式？</strong></p><ul><li><p><strong>情况一：在外部类的内部，我们实例化静态内部类对象（掌握）</strong></p><p>–&gt; 语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">内部类 对象 <span class="token operator">=</span> <span class="token keyword">new</span> 内部类<span class="token punctuation">(</span>实现列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>情况二：在外部类的外部，我们实例化静态内部类对象（了解）</p><p>–&gt; 语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">外部类<span class="token punctuation">.</span>内部类 对象 <span class="token operator">=</span> <span class="token keyword">new</span> 外部类<span class="token punctuation">.</span>内部类<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>成员内部类和静态内部类的总结</strong></p><ul><li><strong>成员内部类：如果内部类需要依附于外部类对象，则该内部类就必须为成员内部类。</strong></li><li><strong>静态内部类：如果内部类只需依附于外部类即可，并且需要在该内部类中定义静态内容，则该内部类就必须定义为静态内部类。</strong></li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 外部类</span><span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token comment">// 静态内部类</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token class-name">String</span> classRoom<span class="token punctuation">;</span>        <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*System.out.println(age); // 编译错误            System.out.println(userName); // 没问题*/</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 情况一：在外部类的内部，我们实例化静态内部类对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InnerClass</span> innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 操作静态方法：外部类.静态内部类.静态方法名(实参列表);</span>        <span class="token class-name">OuterClass<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 操作静态变量：外部类.静态内部类.静态变量名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">OuterClass<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">.</span>classRoom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// OuterClass.method();</span>        <span class="token comment">// 情况二：在外部类的外部，我们实例化静态内部类对象</span>        <span class="token class-name">OuterClass<span class="token punctuation">.</span>InnerClass</span> innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OuterClass<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        innerClass<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="局部内部类（了解）"><a href="#局部内部类（了解）" class="headerlink" title="局部内部类（了解）"></a>局部内部类（了解）</h4><p>明确：学习局部内部类，则我们把“局部内部类”当成“局部变量”来理解。</p><ol><li><p>定义位置</p><ul><li>在类中，代码块或方法体的内部。</li></ul></li><li><p>定义语法</p><p>- </p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 外部类<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token comment">//位置一：定义在代码块中</span><span class="token keyword">class</span>内部类<span class="token punctuation">&#123;</span><span class="token comment">//书写局部内部类中的代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//位置二：定义在方法体中</span>        <span class="token keyword">class</span> 内部类<span class="token punctuation">&#123;</span>            <span class="token comment">//书写局部内部类中的代码</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项</p><ul><li><p>a)定义局部内部类的时候，我们不能使用private、protected、public和static修饰，但是<strong>可以使用final和abstract来修饰。</strong></p></li><li><p>b)在局部内部类中，我们<strong>只能定义成员变量、成员方法、构造方法和构造代码块</strong>，但是<strong>不能定义静态变量、静态方法和静态代码块。</strong></p></li><li><p>c)局部内部类只能在“当前作用域”中使用，不能在代码块或方法体之外使用，此处我们可以联想局部变量的“生命周期”来理解。</p></li><li><p>d)<strong>在局部内部类中，我们“肯定”能操作外部类的静态变量和静态方法，但是“未必”能操作外部类的成员变量和成员方法。</strong></p><p>在局部内部类中，是否能操作外部类的成员变量和成员方法，<strong>关键是看该局部内部类在哪个位置中定义的。</strong></p></li><li><p>e)<strong>在局部内部类中，想要操作外部的局部变量，则该局部变量必须采用final来修饰，从而保证数据的安全性。</strong></p><p><strong>在局部内部类中，如果操作了外部的局部变量，则该局部变量的生命周期就延长了，也就是该局部变量的生命周期和局部内部类对象的生命周期保持一致了。</strong></p></li><li><p><strong>补充：在JDK1.8之后，如果在局部内部类中使用了外部的局部变量，则该局部变量默认就会采用final来修饰，从而保证数据的安全性。</strong></p></li><li><p>eg1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 外部类</span><span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> classRoom<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 外部的局部变量</span>        <span class="token comment">/*final*/</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// num出生</span>        <span class="token comment">// 局部内部类</span>        <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name<span class="token punctuation">;</span>            <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// num = 20; --> 编译错误</span>                <span class="token comment">/*System.out.println(age); // 未必                System.out.println(classRoom); // 没问题*/</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 实例化InnerClass对象</span>        <span class="token class-name">InnerClass</span> innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用show()方法</span>        innerClass<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// 如果在局部内部类中，我们没有使用外部的局部变量num，则该变量num就在此处死亡</span>      <span class="token comment">// 如果在局部内部类中，我们使用了外部的局部变量num，则该num就和局部内部类对象的生命周期保持一致啦。</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OuterClass</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>eg2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>p5<span class="token punctuation">.</span>innerclass</span><span class="token punctuation">;</span><span class="token comment">/** * 需求：调用一个方法，则就返回某个抽象类的实现类对象，并且该实现类必须是一个局部内部类。 */</span><span class="token comment">// 抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 外部类</span><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回Animal的实现类对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Animal</span> <span class="token function">getAnimalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 外部的局部变量</span>        <span class="token comment">/*final*/</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// num出生</span>        <span class="token comment">// 定义一个继承于Animal类的局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * 此处就是我写的方法，在该eat()方法中我们需要使用num的值，也就是需要使用num的初始值10即可             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小鸟在吃虫子..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">/**             * 这个是同事写的方法，在该方法中需要定义一个变量来保存数据20，如果使用num来保存20，则数据就不安全啦             */</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// num = 20; --> 编译错误</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 实例化Bird对象（多态）</span>        <span class="token class-name">Animal</span> bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回该局部内部类对象</span>        <span class="token comment">// 因为在局部内部类中，我们没有使用外部的局部变量num，则局部变量num就在此处“死亡”。</span>        <span class="token comment">// 因为在局部内部类中，我们使用了外部的局部变量num，则该局部变量num就和局部内部类对象的生命周期保持一致啦</span>        <span class="token keyword">return</span> bird<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获得Animal抽象类的实现类对象</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token comment">// bird对象的编译时类型为“Animal”，bird对象的运行时类型为“Bird”</span>        <span class="token class-name">Animal</span> bird <span class="token operator">=</span> <span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token function">getAnimalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用eat()方法，涉及到多态情况下调用成员方法的特点</span>        <span class="token comment">// 编译时：检查“编译时类型”，也就是检查Animal类中是否有eat()方法</span>        <span class="token comment">// 运行时：检查“运行时类型”，也就是调用Bird类中的eat()方法。、</span>        bird<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// 执行到此处，则意味着bird对象被销毁，那么则局部变量num也在此处“死亡”</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h4 id="匿名内部类（重点）"><a href="#匿名内部类（重点）" class="headerlink" title="匿名内部类（重点）"></a>匿名内部类（重点）</h4><ol><li><p>匿名内部类的引入</p><ul><li><p>需求1：定义一个方法，在该方法体中定义一个继承于某个抽象类的局部内部类，然后再创建该局部内部类对象并调用方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 需求1：定义一个方法，在该方法体中定义一个继承于某个抽象类的局部内部类，然后再创建该局部内部类对象并调用方法。</span><span class="token comment">// 抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 外部类</span><span class="token keyword">class</span> <span class="token class-name">OuterClass01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：定义继承于Animal类的局部内部类，并且创建该局部内部类对象。</span>        <span class="token comment">// 方式一：使用“局部内部类”来实现</span>        <span class="token comment">/*// 定义一个继承于Animal的局部内部类        class Bird extends Animal &#123;            @Override            public void eat() &#123;                System.out.println("小鸟在吃虫子...");            &#125;        &#125;        // 实例化Bird对象（多态）        // bird对象的编译时类型为“Animal”，bird对象的运行时类型为“Bird”        Animal bird = new Bird();        // 调用eat()方法，设计到多态情况下调用成员方法的特点        // 编译时：检查“编译时类型”，也就是检查Animal类中是否有eat()方法        // 运行时：检查“运行时类型”，也就是调用Bird类中的eat()方法        bird.eat();*/</span>        <span class="token comment">// 方式二：使用“匿名内部类”来实现</span>        <span class="token comment">// 父类引用指向子类对象（多态）</span>        <span class="token comment">// bird对象的编译时类型为“Animal”，bird对象的运行时类型为“继承于Animal类的实现类”</span>        <span class="token class-name">Animal</span> bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> name<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小鸟在吃虫子..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 调用eat()方法，设计到多态情况下调用成员方法的特点</span>        <span class="token comment">// 编译时：检查“编译时类型”，也就是检查Animal类中是否有eat()方法</span>        <span class="token comment">// 运行时：检查“运行时类型”，也就是调用“继承于Animal类的实现类”中的eat()方法</span>        bird<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 需求：操作匿名内部类中特有的成员变量</span>        <span class="token comment">// 问题：多态情况下，操作成员变量的特点？？？</span>        <span class="token comment">// 编译时：检查“编译时类型”，也就是检查Animal类中是否有name成员变量。</span>        <span class="token comment">// 运行时：检查“编译时类型”</span>        <span class="token comment">// System.out.println(bird.name); // 编译错误</span>        <span class="token comment">// 需求：调用匿名内部类中特有的成员方法</span>        <span class="token comment">// 问题：多态情况下，调用成员方法的特点？？？</span>        <span class="token comment">// 编译时：检查“编译时类型”，也就是检查Animal类中是否有show()方法。</span>        <span class="token comment">// 运行时：检查“运行时类型”</span>        <span class="token comment">// bird.show(); // 编译错误</span>        <span class="token comment">// 方式三：使用“匿名对象+匿名内部类”来实现</span>        <span class="token comment">/*new Animal() &#123;            @Override            public void eat() &#123;                System.out.println("小鸟在吃虫子...");            &#125;        &#125;.eat();*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OuterClass01</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>需求2：定义一个方法，在该方法体中定义一个实现于某个接口的局部内部类，然后再创建该局部内部类对象并调用方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 需求2：定义一个方法，在该方法体中定义一个实现于某个接口的局部内部类，然后再创建该局部内部类对象并调用方法。</span><span class="token comment">// 接口</span><span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">showFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 外部类</span><span class="token keyword">class</span> <span class="token class-name">OuterClass02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：定义一个实现于Flyable接口的局部内部类，然后再创建该局部内部类对象。</span>        <span class="token comment">// 方式一：使用“局部内部类”来实现</span>        <span class="token comment">/*// 定义一个实现于Flyable接口的局部内部类        class Bird implements Flyable &#123;            @Override            public void showFly() &#123;                System.out.println("小鸟自由自在的飞翔...");            &#125;        &#125;        // 实例化Bird对象（多态）        // bird对象的编译时类型为“Flyable”，bird对象的运行时类型为“Bird”        Flyable bird = new Bird();        // 调用showFly()方法，涉及到多态情况下调用成员方法的特点        // 编译时：检查“编译时类型”，也就是检查Flyable接口中是否有showFly()方法        // 运行时：检查“运行时类型”，也就是执行Bird类中的showFly()方法        bird.showFly();*/</span>        <span class="token comment">// 方式二：使用“匿名内部类”来实现</span>        <span class="token comment">/*// 父类引用指向子类对象（多态）        // bird对象的编译时类型为“Flyable”，bird对象的运行时类型为“实现于Flyable接口的实现类”        Flyable bird = new Flyable() &#123;            @Override            public void showFly() &#123;                System.out.println("小鸟自由自在的飞翔...");            &#125;        &#125;;        // 调用showFly()方法，涉及到多态情况下调用成员方法的特点        // 编译时：检查“编译时类型”，也就是检查Flyable接口中是否有showFly()方法        // 运行时：检查“运行时类型”，也就是执行“实现于Flyable接口的实现类”中的showFly()方法        bird.showFly();*/</span>        <span class="token comment">// 方式三：使用“匿名对象+匿名内部类”来实现</span>        <span class="token keyword">new</span> <span class="token class-name">Flyable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小鸟自由自在的飞翔..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">showFly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OuterClass02</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>匿名内部类的概述</p><ul><li><strong>匿名内部类本质就是一个“局部内部类”，也就是一个“没有名字”的局部内部类，也就是一个特殊的局部内部类。</strong></li></ul></li><li><p>匿名内部类的语法</p><p>- </p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">class</span> 外部类 <span class="token punctuation">&#123;</span>       <span class="token punctuation">&#123;</span>            <span class="token comment">// 位置一：创建一个继承于某个父类的局部内部类对象，该局部内部类没有名字。</span>            <span class="token comment">// 第一步：定义了一个继承于某个父类的局部内部类，并且该局部内部类没有名字。</span>            <span class="token comment">// 第二步：创建该局部内部类对象，也就是常见了一个没有名字的局部内部类对象。</span>            <span class="token keyword">new</span> 父类名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 书写匿名内部类中的代码</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>        <span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 位置二：创建一个实现于某个接口的局部内部类对象，该局部内部类没有名字。</span>           <span class="token comment">// 第一步：定义一个实现于某个接口的局部内部类，并且该局部内部类没有名字</span>           <span class="token comment">// 第二步：创建该局部内部类对象，也就是常见了一个没有名字的局部内部类对象</span>            <span class="token keyword">new</span> 接口名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 书写匿名内部类中的代码</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>匿名内部类的注意点</p><ul><li>a)匿名内部类就是一个特殊的局部内部类，因此局部内部类的要求对于匿名内部类依旧生效。</li><li>b)<strong>在匿名内部类中，我们不能定义构造方法，因为匿名内部类都没有类名，而构造方法名必须为类名。</strong></li><li>c)<strong>在匿名内部类中，我们不建议定义自己“特有”的成员变量和成员方法，因为这样不方便我们去操作。</strong></li><li><strong>注意：在匿名内部类中，我们一般用于重写父类或接口中的抽象方法。</strong></li></ul></li></ol><hr><h3 id="DAY16"><a href="#DAY16" class="headerlink" title="DAY16"></a>DAY16</h3><h4 id="异常的概述"><a href="#异常的概述" class="headerlink" title="异常的概述"></a>异常的概述</h4><ol><li><p>什么是异常？</p><ul><li>程序在执行过程中，发生的各种不正常情况，我们就称之为“异常”。</li><li>例如：算数异常、数组索引越界异常、空指针异常和类型转换异常等等</li></ul></li><li><p>什么是异常类？</p><ul><li>用于封装和描述各种不正常情况的类，我们就称之为“异常类”。</li><li>例如：ArithmeticException、ArrayIndexOutOfBoundsException、NullPointerException和ClassCastException等等。</li></ul></li><li><p>学习异常的好处？</p><ul><li><strong>a)学习异常之后，就能够实现把“正常逻辑代码”和“错误逻辑代码”相分离。</strong></li><li>b)没有学习异常，则某些情况下无论我们如何处理，则都可能无法满足需求。</li></ul></li><li><p><strong>异常的处理机制？</strong></p><ul><li>在java语言中，使用面向对象的思想来处理异常。在可能出现问题的位置，我们创建并抛出一个异常对象，该异常对象中封装了异常的详细描述信息（异常类名、异常位置和异常原因），从而实现“正常逻辑代码”和“错误逻辑代码”相分离。</li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据索引获得数组元素的值</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果index的取值不合法，则抛出一个异常即可</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组索引越界，index："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 执行到此处，则证明index取值合法，则返回索引对应的元素值</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="异常的体系"><a href="#异常的体系" class="headerlink" title="异常的体系"></a>异常的体系</h4><ol><li><p>异常体系的引入</p><ul><li>在程序执行的过程中，可能会发生各种各样的不正常情况，因此我们就需要很多的异常类来封装和描述这些不正常情况，我们对这些异常类进行“向上提取”，那么就得到了异常的继承体系。</li></ul></li><li><p>异常体系的概述</p><ul><li><p><strong>所有Java类的老祖宗为Object类，所有不正常情况类的老祖宗就是Throwable类，那么Throwable类的继承体系如下：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*Throwable            --> 所有不正常情况类的老祖宗 |-- Error         --> 所有错误类的老祖宗 |-- Exception     --> 所有异常类的老祖宗 */</span><span class="token comment">//注意：a)如何查看某个类的继承体系呢？？？选中该类，然后使用“ctrl + h”来查看继承体系。</span><span class="token comment">// b)所有错误类的后缀都以“Error”来结尾，所有异常类的后缀都以“Exception”来结尾。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Throwable的概述</p><ul><li><p><strong>Throwable类是所有不正常情况类的老祖宗，Error类和Exception类都属于Throwable的子类，因此Error类和Exception类都能使用Throwable提供的方法。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>      <span class="token comment">//作用：返回异常出现的原因。</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>      <span class="token comment">//作用：返回异常的类名+异常的原因。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>      <span class="token comment">//作用：把异常的类名、异常的位置和异常的原因在控制台输出。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Error类的概述</p><ul><li><p><strong>Error类是所有“错误类”的老祖宗，并且Error类继承于Throwable类，因此Error类能使用Throwable类提供的所有方法。</strong></p></li><li><p><strong>Error描述的是“资源耗尽”或“虚拟机内部错误”等不正常情况，因此开发中遇到这样的不正常情况，我们程序员是无法解决的（不结束程序的前提来解决），也就是程序员只能先结束程序，然后再去重新修改代码来搞定这种不正常情况</strong>，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//案例1：栈内存溢出错误（StackOverflowError）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">//案例2：堆内存溢出错误（OutOfMemoryError）</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 创建数组占用的堆内存为：8GB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Exception类的概述</p><ul><li>Exception类是所有“异常类”的老祖宗，并且Exception类继承于Throwable类，因此Exception类能使用Throwable类提供的所有方法。</li><li><strong>Exception类描述的是“程序员能够解决”的不正常情况，开发中我们遇到了Exception异常，则需要拼尽全力去解决该异常（不结束程序的前提来解决）。</strong></li><li><strong>Error属于程序员无法解决的不正常情况，而Exception属于程序员能够解决的不正常情况。</strong></li></ul></li><li><p><strong>Error与Exception的区别</strong></p><ul><li>我开着车走在路上，一头猪冲在路中间，我刹车，这叫一个异常。</li><li>我开着车在路上，发动机坏了，我停车，这叫错误。</li><li>发动机什么时候坏？我们普通司机能管吗？不能。发动机什么时候坏是汽车厂发动机制造商的事。</li></ul></li></ol><hr><h4 id="自定义异常类（掌握）"><a href="#自定义异常类（掌握）" class="headerlink" title="自定义异常类（掌握）"></a>自定义异常类（掌握）</h4><ol><li><p>自定义异常类的引入</p><ul><li>问题：给学生年龄复制的时候，则赋值的年龄不能为负数。</li><li>解决：如果赋值的年龄为负数，则无论我们给年龄赋值任何数据都不合理，那么最好的方案就是如果年龄不合法就抛出异常。</li><li>问题：如果赋值的年龄不合法，则应该抛出“学生年龄不合法异常”，该如何实现？？？</li><li><strong>解决：使用“自定义异常类”来解决。</strong></li></ul></li><li><p>什么时候使用自定义异常类</p><ul><li>当Java语言提供的异常类无法满足我们的需求，则我们就可以使用“自定义异常类”来满足需求。</li></ul></li><li><p>自定义异常类的要求</p><ul><li><p><strong>要求1：自定义异常类必须继承于异常体系中的类，一般继承于Exception类或RuntimeException类。</strong></p><p>–&gt; <strong>只有继承于异常体系的中的类，该类才具备可抛型，也就是才能使用throw和throws关键字。</strong></p></li><li><p>要求2：自定义异常类必须提供两个构造方法，其中一个为无参构造方法，<strong>另外一个为字符串参数的有参构造方法。</strong></p><p>​    –&gt; <strong>使用字符串参数的有参构造方法，我们可以用于封装和保存异常出现的原因，从而传递给父类的异常来保存。</strong></p></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 学生年龄越界异常类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentAgeOutOfBoundsException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 无参构造方法     */</span>    <span class="token keyword">public</span> <span class="token class-name">StudentAgeOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 有参构造方法     * @param message 用于保存异常产生的原因     */</span>    <span class="token keyword">public</span> <span class="token class-name">StudentAgeOutOfBoundsException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>p2<span class="token punctuation">.</span>exception</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 假设：学习年龄的合法取值范围在[0, 130]之间</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.如果赋值的年龄不合法，则抛出一个异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> age <span class="token operator">>=</span> <span class="token number">130</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 问题：此处我们应该抛出什么异常呢？？？抛出“学生年龄越界异常”</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StudentAgeOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"赋值的年龄不合法，age："</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2.执行到此处，则意味着赋值年龄合法，那么就执行赋值操作</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr></li></ol><h4 id="异常产生的过程？"><a href="#异常产生的过程？" class="headerlink" title="异常产生的过程？"></a>异常产生的过程？</h4><pre><code>  1.    如果在方法体中抛出了异常，而我们在方法体中又没有处理该异常，则就会把该异常继续抛给方法的上层调用者，也就是抛给方法的上层调用者来处理。  2.    如果方法的上层调用者依旧没有处理该异常，那么就会继续把该异常抛给方法的上层调用者来处理，以此类推，如果方法的上层调用者都没有处理该异常，那么最终就把该异常抛给了main方法的调用者（虚拟机），而虚拟机也不会处理该异常，那么程序就终止啦。</code></pre><p>   <img src="/images/note_images/%E5%BC%82%E5%B8%B8%E4%BA%A7%E7%94%9F%E7%9A%84%E8%BF%87%E7%A8%8B.png"></p><hr><h4 id="手动抛出异常（throw）"><a href="#手动抛出异常（throw）" class="headerlink" title="手动抛出异常（throw）"></a>手动抛出异常（throw）</h4><ol><li><p>在可能出现异常的位置，我们创建并抛出一个异常对象，该异常对象中包含了异常的详细描述信息（异常类名、异常位置和异常原因），从而实现了“正常逻辑代码”和“错误逻辑代码”相分离。</p></li><li><p>注意：throw关键字只能在方法体中使用，也就是我们只能在方法体中来手动抛出一个异常。</p></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果index的取值不合法，则就抛出数组索引越界异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组索引越界异常，index："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 执行到此处，则意味着index取值合法，那么就返回数组元素</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="异常的分类（重点）"><a href="#异常的分类（重点）" class="headerlink" title="异常的分类（重点）"></a>异常的分类（重点）</h4><ol><li><p>异常的分类的引入？</p><ul><li><p>问题：“学生年龄越界异常类”继承于Exception类和RuntimeException类的区别?</p></li><li><p>答案：“学生年龄越界异常类”继承于Exception类，则抛出“学生年龄越界异常”就会出现<strong>编译错误。</strong></p><p>​           “学生年龄越界异常类”继承于RuntimeException类，则抛出 “学生年龄越界异常”就<strong>不会出现编译错误。</strong></p></li></ul></li><li><p>异常的分类的概述</p><ul><li><p><strong>运行时异常</strong></p><p>–&gt; 包含：RuntimeException类及其所有子类。</p><p>–&gt; 特点：程序编译时，不强制我们对抛出的异常进行处理（可以处理，也可以不处理）</p></li><li><p>编译时异常</p><p>–&gt;包含：Exception类及其所有子类（排除运行时异常）。</p><p>–&gt;特点：程序编译时，强制我们对抛出的异常进行处理（必须处理，否则就会编译错误）。</p></li></ul></li><li><p>异常的处理的方式</p><ul><li><p><strong>声明异常（throws）</strong></p><p>–&gt; 属于“消极”的处理方式，本质上并没有处理该异常。</p></li><li><p><strong>捕捉异常（try…catch…finally）</strong></p><p>–&gt;属于“积极”的处理方式，本质上已经解决了该异常。</p></li></ul></li><li><p>不正常情况的分类补充</p><ul><li><p><strong>可检查异常（CheckedException）</strong></p><p>–&gt;包含：编译时异常</p><p>–&gt;特点：<strong>程序在编译时期，能够检查出程序中出现的不正常情况。</strong></p></li><li><p><strong>不可检查异常（UnCheckedException）</strong></p><p>–&gt;包含：Error和运行时异常</p><p>–&gt;特点：<strong>程序在编译时期，不能够检查出程序中出现的不正常情况。</strong></p></li></ul></li></ol><hr><h4 id="面试题【请问throw和throws关键字的区别？】"><a href="#面试题【请问throw和throws关键字的区别？】" class="headerlink" title="面试题【请问throw和throws关键字的区别？】"></a>面试题【请问throw和throws关键字的区别？】</h4><ol><li>使用位置区别<ul><li>throw：必须在“方法体”中使用。</li><li>throws：必须在“方法声明”末尾使用。</li></ul></li><li>操作内容区别<ul><li>throw：操作是“异常对象”，只能操作一个异常对象。</li><li>throws：操作是“异常类”，可以操作任意多个异常类。</li></ul></li><li>具体作用区别<ul><li>throw：抛出异常，如果执行了throw关键字，则肯定会出现异常。</li><li>throws：声明异常，如果使用了throws关键字，则未必会出现异常。</li></ul></li></ol><hr><h4 id="声明异常（throws）"><a href="#声明异常（throws）" class="headerlink" title="声明异常（throws）"></a>声明异常（throws）</h4><ol><li><p>声明异常的概述</p><ul><li>声明异常属于“消极”的处理方式，本质上并没有解决该异常。</li><li>程序中出现了异常，此时我们又无法处理该异常，那么就使用声明异常来处理。</li></ul></li><li><p>声明异常的使用？</p><ul><li>当方法中“可能”会出现异常，此时我们又无法处理该异常，那么就可以使用“声明异常”来处理。也就是在方法声明的末尾，使用throws关键字将方法体中可能抛出的异常声明出来，然后报告给方法的调用者，交给方法的调用者来处理。</li></ul></li><li><p>声明异常的语法？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常类<span class="token number">1</span><span class="token punctuation">,</span> 异常类<span class="token number">2</span><span class="token punctuation">,</span> 异常类<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#123;</span><span class="token comment">// 方法体</span>     <span class="token keyword">return</span> <span class="token punctuation">[</span>返回值<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">,</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果arr的值为null，则就抛出空指针异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"空指针异常，arr："</span> <span class="token operator">+</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果index的取值不合法，则就抛出数组索引越界异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组索引越界异常，index："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 执行到此处，则意味着index取值合法，那么就返回数组元素</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">StudentAgeOutOfBoundsException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*// 注意：此处我们可以处理该异常，因此应该使用“捕捉异常”来处理。        Student stu = new Student("卧龙", -18);        System.out.println(stu);*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="捕捉异常类（try…catch…finally）"><a href="#捕捉异常类（try…catch…finally）" class="headerlink" title="捕捉异常类（try…catch…finally）"></a>捕捉异常类（try…catch…finally）</h4><ol><li><p>捕捉异常的概述</p><ul><li>捕捉异常属于“积极”的处理方式，本质上就已经处理了该异常。</li><li>当程序中可能出现异常，此时我们恰好能解决该异常，则就使用捕捉异常来处理。</li></ul></li><li><p>try…catch组合</p><ul><li><p>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token comment">//书写可能出现异常的代码</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类 对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//用于处理捕获到的异常。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行：如果try代码块中没有出现异常，则try代码块中的代码正常执行完毕，然后就直接执行try…catch之后的代码。 <strong>如果try代码块中出现了异常，则catch代码块就会立刻捕获到该异常，然后就执行catch代码中的代码，最后再执行try…catch之后的代码。</strong></p></li></ul></li><li><p>try…多catch组合</p><ul><li>语法：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token comment">//书写可能出现异常的代码</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类 对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//用于处理捕获到的异常</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类 对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//用于处理捕获到的异常</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>作用：<strong>使用try…多catch组合，我们可以实现对try代码块中出现的异常进行“针对性”的处理。</strong></p></li><li><p>注意：</p><ol><li><p><strong>使用捕捉异常的时候，建议使用“Ctrl + Alt + T”快捷键来生成try…catch…finally代码。</strong></p><ul><li>选择中可能出现异常的代码，然后使用使用“Ctrl + Alt + T”快捷键来捕捉异常的代码。</li></ul></li><li><p>在JDK1.8之后，则我们还以可以这样来处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> <span class="token operator">|</span> <span class="token class-name">ArrayIndexOutOfBoundsExceptionexception</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>以上操作不建议使用，因为使用以上操作无法实现对try代码块中出现的异常进行针对性的处理。</strong></li></ul></li><li><p>使用try…多catch组合的时候，建议把子类异常catch放在前面，把父类异常catch放在后面，否则就会编译错误。</p><ul><li><strong>捕获异常的时候，属于“从上往下”来顺序匹配，如果父类异常catch放前面，则后面的子类异常catch将永远无法执行。</strong></li></ul></li><li><p>try…多catch…finally组合</p><ul><li><p>语法：</p></li><li><p>&#96;&#96;&#96;java<br>try{<br>&#x2F;&#x2F;书写可能出现异常的代码<br>}catch(异常类 对象){<br> &#x2F;&#x2F; 用于处理捕获到的异常<br>}<br>catch(异常类 对象){<br> &#x2F;&#x2F; 用于处理捕获到的异常<br>}<br>…<br>finally{<br>    &#x2F;&#x2F; 无论是否出现异常，则都会执行finally中代码<br>}</p><pre class="line-numbers language-none"><code class="language-none">     注意：   - a)即使在try或catch代码块中执行了return操作，则finally代码块中的代码也依旧会执行。当在try或catch中执行“关闭虚拟机”的操作，那么此时finally代码块中的代码才不会执行。     --&gt;  **System.exit(0); --&gt; 关闭虚拟机，也就是结束程序，当实参的值为0的时候，代表整除结束程序。**   - b)实际开发中，我们经常在finally代码块中完成关闭“资源的操作”，例如：关闭IO流、关闭数据库链接。   - 生活中，打开一个水龙头（打开资源），然后执行洗手的过程中，无论是否出现不正常情况（异常），则我们最终都需要关闭水龙头（关闭资源）。5. eg：   &#96;&#96;&#96;java   public class Test03 &#123;       public static void main(String[] args) &#123;           try &#123;               Student stu &#x3D; new Student(&quot;卧龙&quot;, -18);               System.out.println(stu);               System.exit(0); &#x2F;&#x2F; 关闭虚拟机，也就是结束程序           &#125;           catch (StudentAgeOutOfBoundsException exception) &#123;               exception.printStackTrace();               System.exit(0); &#x2F;&#x2F; 关闭虚拟机，也就是结束程序           &#125;           finally &#123;               &#x2F;&#x2F; 注意：在此处，以下输出语句不会执行！               System.out.println(&quot;finally&quot;);           &#125;           &#x2F;&#x2F; 注意：在此处，以下输出语句不会执行！           System.out.println(&quot;over&quot;);              &#x2F;*try &#123;               Student stu &#x3D; new Student(&quot;卧龙&quot;, -18);               System.out.println(stu);               &#x2F;&#x2F; return; &#x2F;&#x2F; 先执行完毕finally中的代码，然后才会结束main方法           &#125;           catch (StudentAgeOutOfBoundsException exception) &#123;               exception.printStackTrace();               return; &#x2F;&#x2F; 先执行完毕finally中的代码，然后才会结束main方法           &#125;           finally &#123;               &#x2F;&#x2F; 注意：在此处，无论try中是否发生异常，则都执行并输出了“finally”               System.out.println(&quot;finally&quot;);           &#125;           &#x2F;&#x2F; 注意：此处的代码“未必”会执行           System.out.println(&quot;over&quot;);*&#x2F;              &#x2F;*try &#123;               Student stu &#x3D; new Student(&quot;卧龙&quot;, 18);               System.out.println(stu);           &#125;           catch (StudentAgeOutOfBoundsException exception) &#123;               exception.printStackTrace();           &#125;           finally &#123;               &#x2F;&#x2F; 注意：在此处，无论try中是否发生异常，则都执行并输出了“finally”               System.out.println(&quot;finally&quot;);           &#125;           &#x2F;&#x2F; 注意：在此处，无论try中是否发生异常，则都执行并输出了“over”           System.out.println(&quot;over&quot;);*&#x2F;       &#125;   &#125;   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">,</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果arr的值为null，则就抛出空指针异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"空指针异常，arr："</span> <span class="token operator">+</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 如果index的取值不合法，则就抛出数组索引越界异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"数组索引越界异常，index："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 执行到此处，则意味着index取值合法，那么就返回数组元素</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*try &#123;            int[] arr = null; // &#123;11, 22, 33, 44, 55&#125;;            int value = getValue(arr, 12);            System.out.println(value);        &#125;        // 专门对空指针异常和数组索引越界异常进行处理        catch (NullPointerException | ArrayIndexOutOfBoundsException exception) &#123;            exception.printStackTrace();        &#125;*/</span>        <span class="token comment">/*try &#123;            int[] arr = null; // &#123;11, 22, 33, 44, 55&#125;;            int value = getValue(arr, 12);            System.out.println(value);        &#125;        // 专门处理空指针异常        catch (NullPointerException exception) &#123;            exception.printStackTrace();        &#125;        // 专门处理数组索引越界异常        catch (ArrayIndexOutOfBoundsException exception) &#123;            exception.printStackTrace();        &#125;        System.out.println("over");*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//try...finally组合？？？</span>  语法：<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 书写可能出现异常的代码</span>        <span class="token punctuation">&#125;</span>       <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>           <span class="token comment">// 无论是否出现异常，则都会执行finally中代码</span><span class="token operator">*</span>        <span class="token punctuation">&#125;</span><span class="token operator">*</span>   使用前提：<span class="token operator">*</span>     前提<span class="token number">1</span>：当<span class="token keyword">try</span>代码块中出现了异常，此时我们又无法处理该异常，因此就必须省略<span class="token keyword">catch</span>代码块，而是使用声明异常来处理。<span class="token operator">*</span>     前提<span class="token number">2</span>：无论<span class="token keyword">try</span>代码块中是否出现异常，则我们都需要做“关闭资源”的操作，也就是在<span class="token keyword">finally</span>中关闭资源，因此就必须存在<span class="token keyword">finally</span>代码块。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="方法重写之异常（掌握）"><a href="#方法重写之异常（掌握）" class="headerlink" title="方法重写之异常（掌握）"></a>方法重写之异常（掌握）</h4><ol><li><p>原则：子类重写方法声明的异常类型必须小于等于父类被重写方法声明的异常类型【辈分】。</p><p>–&gt;此处说的异常，指的是编译时异常，而运行时异常不用管！</p></li><li><p>要求：a)如果父类被重写方法没有声明异常，则子类重写方法也不能声明异常。</p><p>b)如果父类被重写方法声明了异常，则子类重写方法声明的异常类型必须小于等于父类被重写方法声明的异常类型（辈分）。</p></li><li><p>eg</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AAException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">BBException</span> <span class="token keyword">extends</span> <span class="token class-name">AAException</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AAException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent show ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">// public void show() throws AAException &#123; // 没问题</span>    <span class="token comment">// public void show() throws BBException &#123; // 没问题</span>    <span class="token comment">// public void show() throws Exception &#123; // 编译错误</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AAException</span><span class="token punctuation">,</span> <span class="token class-name">BBException</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没问题</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child show ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr></li></ul></li></ol><h4 id="异常链（了解）"><a href="#异常链（了解）" class="headerlink" title="异常链（了解）"></a>异常链（了解）</h4><ol><li><p>解释：在catch代码块中，我们抛出一个描述更加详细的异常，这就是异常链。</p><ol><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 分母为零异常类</span><span class="token keyword">class</span> <span class="token class-name">DenominatorZeroException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">DenominatorZeroException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DenominatorZeroException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 功能：获得两个数相除的结果     * 问题：a)除法运算，如果分母为0，则不应该返回任何结果，而此处却返回了结果为0。     *      b)除法运算，如果分母为0，则抛出算数异常，那么意味着异常描述不够清晰。     * 解决：使用“异常链”来解决。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">division</span><span class="token punctuation">(</span><span class="token keyword">int</span> fenZi<span class="token punctuation">,</span> <span class="token keyword">int</span> fenMu<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DenominatorZeroException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.定义一个变量，用于保存运算的结果</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 2.执行除法运算，并处理了可能出现的算数异常</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> fenZi <span class="token operator">/</span> fenMu<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 需求：在此处，我们需要抛出一个描述更加详细的异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DenominatorZeroException</span><span class="token punctuation">(</span><span class="token string">"分母为零异常，fenMu："</span> <span class="token operator">+</span> fenMu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3.返回除法运算的结果</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">division</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DenominatorZeroException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><hr><h4 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>p7<span class="token punctuation">.</span>exception</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * 1.try-with-resource的引入？？？ *   在JDK1.8之前，想要实现关闭资源的操作，则必须在finally代码块中完成，这样的操作非常麻烦。 *   在JDK1.8之后，想要实现关闭资源的操作，则就可以通过try-with-resource来自动关闭资源，也就是无需再finally代码块关闭资源。 * 2.try-with-resource的语法？？？ *   try (用于实例化需要关闭资源的对象) &#123; *       // 用于书写可能出现异常的代码 *   &#125; *   catch (异常类1 对象) &#123; *       // 用于处理捕获到的异常 *   &#125; *   catch (异常类2 对象) &#123; *       // 用于处理捕获到的异常 *   &#125; *   ...... * 3.try-with-resource的概述？？？ *   只要是AutoCloseable接口的实现类，则都可以使用try-with-resource来自动关闭资源，也就是自动会调用实现于AutoCloseable接口的close()方法。 */</span><span class="token keyword">class</span> <span class="token class-name">AutoCloseableImpl01</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AutoCloseableImpl01 show ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AutoCloseableImpl01 close ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">AutoCloseableImpl02</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AutoCloseableImpl02 show ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AutoCloseableImpl02 close ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 案例：需要处理两个关闭资源的对象</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">AutoCloseableImpl01</span> impl01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoCloseableImpl01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">AutoCloseableImpl02</span> impl02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoCloseableImpl02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            impl01<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            impl02<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*// 案例：只需要一个关闭资源的对象        try (AutoCloseableImpl01 impl01 = new AutoCloseableImpl01()) &#123;            impl01.show();        &#125; catch (Exception exception) &#123;            exception.printStackTrace();        &#125;*/</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：读取demo.txt文件中的内容，然后再控制台输出。</span>        <span class="token comment">// 方式二：使用JDK1.8之后的方案</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 执行读取数据的操作，此代码块无需掌握</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 方式一：使用JDK1.8之前的方案</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建字节输入流，注意：“demo.txt”文件在项目中不存在，则抛出异常</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"demo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行读取数据的操作，此代码块无需掌握</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 关闭流</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><ol><li><p>包装类的引入</p><ul><li><strong>世界上没有任何一门语言是完全面向对象的，因为面向对象语言中都包含了“基本数据类型”，为了方便“基本数据类型”和“引用数据类型”之间的转换，因此就诞生了“包装类”。</strong></li></ul></li><li><p>包装类的概述？</p><ul><li><p>明确：每一种基本数据类型都对应一个包装类，因此Java语言中提供的包装类至少有8种。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span>        <span class="token class-name">Byte</span><span class="token keyword">short</span>        <span class="token class-name">Short</span><span class="token keyword">int</span>          <span class="token class-name">Integer</span><span class="token keyword">long</span>        <span class="token class-name">Long</span><span class="token keyword">float</span>        <span class="token class-name">Float</span><span class="token keyword">double</span>        <span class="token class-name">Double</span><span class="token keyword">char</span>        <span class="token class-name">Character</span><span class="token keyword">boolean</span>    <span class="token class-name">Boolean</span><span class="token comment">//注意：除了int类型和char类型之外，其余基本数据类型对应的包装类名都是“首字母大写”即可。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Number类的概述</p><ul><li><p>java.lang.Number属于一个抽象类，所有的“数值型包装类”都属于Number的实现类，也就意味着所有的数值型包装类都能使用Number抽象类所提供的方法，并且Number抽象类常见的方法如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">byte</span> <span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>       <span class="token operator">--</span><span class="token operator">></span> 把数值型包装类对象转化为<span class="token keyword">byte</span>类型<span class="token keyword">public</span> <span class="token keyword">short</span> <span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>     <span class="token operator">--</span><span class="token operator">></span> 把数值型包装类对象转化为<span class="token keyword">short</span>类型<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">--</span><span class="token operator">></span> 把数值型包装类对象转化为<span class="token keyword">int</span>类型<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">long</span> <span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">--</span><span class="token operator">></span> 把数值型包装类对象转化为<span class="token keyword">long</span>类型<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">float</span> <span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">--</span><span class="token operator">></span> 把数值型包装类对象转化为<span class="token keyword">float</span>类型<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">></span> 把数值型包装类对象转化为<span class="token keyword">double</span>类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>包装类的作用</p><ul><li><p>作为和基本数据类型对应的类型存在，方便涉及到对象的操作，如Object[]、集合等的操作。</p></li><li><p>包含每种基本数据类型的相关属性如最大值、最小值等，以及相关的操作方法(这些操作方法的作用是在基本数据类型、包装类对象、字符串之间提供相互之间的转化)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int类型表示的最大值："</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int类型表示的最小值："</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte类型表示的最大值："</span> <span class="token operator">+</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte类型表示的最小值："</span> <span class="token operator">+</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*// 问题：数组的定义？？？数组就是一个存储“相同数据类型”的“有序”集合（容器）。        // 涉及到的技术：向上转型+自动装箱        Object[] arr = &#123;123, 3.14, true, 'a', "abc", new Test01()&#125;;        System.out.println(Arrays.toString(arr));*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h4 id="基本数据类型和包装类之间的转换"><a href="#基本数据类型和包装类之间的转换" class="headerlink" title="基本数据类型和包装类之间的转换"></a>基本数据类型和包装类之间的转换</h4><ol><li><p>包装类的底层</p><ul><li><strong>所谓的包装类，则底层中定义了一个对应基本数据类型的“私有常量”来保存数据，包装类其实就是对基本数据类型的数据执行封装的操作。</strong></li><li>例如：在Integer包装类中，其底层定义了一个int类型的“私有常量”来保存数据，也就是Integer包装类就是对int类型数据执行的封装操作。</li></ul></li><li><p>基本数据类型转化为包装类</p><ul><li><p>方式一：通过构造方法来实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">//作用：把基本数据类型转化为包装类对象。</span><span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>          <span class="token comment">//作用：把字符串的内容转化为包装类对象。</span>          <span class="token comment">//注意：当字符串存储的内容和对应的基本数据类型的数据格式不匹配的时候，则就会抛出“数值格式化异常”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式二：通过valueOf()静态方法来实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>          <span class="token comment">//作用：把基本数据类型转化为包装类对象。</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>          <span class="token comment">//作用：把字符串的内容转化为包装类对象。</span>          <span class="token comment">//注意：当字符串存储的内容和对应的基本数据类型的数据格式不匹配的时候，则就会抛出“数值格式化异常”。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项</strong></p><ul><li>1、<strong>针对Character类型，字符串不能转化为Character类型的包装类对象，因为Character类没有提供字符串参数的构造方法和字符串参数的valueOf()方法。</strong></li><li>2、针对Boolean类型，只有字符串为“true”（不区分大小写）的时候，转化为包装对象的值才为true，否则一律都为false。</li><li>3、<strong>数值型的包装类中（不包含Character和Boolean），形参字符串的内容为必须为数值型，否则抛出NumberFormatException异常。</strong></li></ul></li></ul></li><li><p><strong>包装类转化为基本数据类型？</strong></p><ul><li><p><strong>情况一：数值型包装类</strong></p><p>–&gt; 数值型包装类都是Number抽象类的实现类，因此数值型包装类使用Number抽象类提供的方法，我们就可以实现把“数值型包装类对象”转化为“数值型”。</p></li><li><p><strong>情况二：非数值型包装类</strong></p><p>–&gt; 针对Character类型，我们可以使用Character类中提供的charValue()方法，从而将“Character对象”转化为对应的“char类型”。</p><p>–&gt; 针对Boolean类型，我们可以使用Boolean类中提供的booleanValue()方法，从而将“Boolean对象”转化为对应的“boolean类型”。</p></li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Boolean</span> aBoolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">"TrUe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> aBoolean<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>        <span class="token comment">/*Character character = new Character('a');        char ch = character.charValue();        System.out.println(ch); // 输出：a*/</span>        <span class="token comment">/*Double aDouble02 = Double.valueOf("5.12");        int num1 = aDouble02.intValue();        double num2 = aDouble02.doubleValue();        long num3 = aDouble02.longValue();*/</span>        <span class="token comment">/*Integer integer = Integer.valueOf(123);        int num1 = integer.intValue();        double num2 = integer.doubleValue();        long num3 = integer.longValue();*/</span>        <span class="token comment">/*Boolean aBoolean01 = new Boolean("TrUe");        System.out.println(aBoolean01); // 输出：true        Boolean aBoolean02 = Boolean.valueOf("abc");        System.out.println(aBoolean02); // 输出：false*/</span>        <span class="token comment">/*// 方式二：通过valueOf()静态方法来实现        Integer integer01 = Integer.valueOf(123);        System.out.println(integer01); // 输出：123        Integer integer02 = Integer.valueOf("520");        System.out.println(integer02); // 输出：520        Double aDouble01 = Double.valueOf(3.14);        System.out.println(aDouble01); // 输出：3.14        Double aDouble02 = Double.valueOf("5.12");        System.out.println(aDouble02); // 输出：5.12*/</span>        <span class="token comment">/*// 方式一：通过构造方法来实现        Integer integer01 = new Integer(123);        System.out.println(integer01); // 输出：123        Integer integer02 = new Integer("520");        System.out.println(integer02); // 输出：520        Double aDouble01 = new Double(3.14);        System.out.println(aDouble01); // 输出：3.14        Double aDouble02 = new Double("5.12");        System.out.println(aDouble02); // 输出：5.12*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h3 id="DAY17"><a href="#DAY17" class="headerlink" title="DAY17"></a>DAY17</h3><h4 id="自动装箱和自动拆箱（超级重点）"><a href="#自动装箱和自动拆箱（超级重点）" class="headerlink" title="自动装箱和自动拆箱（超级重点）"></a>自动装箱和自动拆箱（超级重点）</h4><ol><li><p><strong>自动装箱和自动拆箱的概述</strong></p><ul><li>在JDK1.5之前，想要实现“基本数据类型”和“包装类”之间的转换，则必须通过调用包装类的方法来手动完成，此操作比较麻烦。</li><li>在JDK1.5之后，想要实现“基本数据类型”和“包装类”之间的转换，则我们可以通过自动装箱和自动拆箱来完成，此操作非常简单。</li></ul></li><li><p><strong>自动装箱机制的概述？</strong></p><ul><li><p>解释：当基本数据类型处于需要对象的环境中，则就会触发自动装箱机制，也就是自动会把基本数据类型转化为对应的包装类对象。</p></li><li><p>底层：当触发自动装箱机制的时候，则默认就会调用包装类的valueOf(xxx x)静态方法，从而将基本数据类型转化为包装类对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//例如：Integer integer = 123;  --底层--> Integer integer = Integer.valueOf(123);</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>自动拆箱机制的概述？</strong></p><ul><li>解释：当包装类对象处于需要基本数据类型的环境中，则就会触发自动拆箱机制，也就是自动会把包装类对象转化为对应的基本数据类型。</li><li>底层：当触发自动拆箱机制的时候，则默认就会调用包装类的xxxValue()成员方法，从而将包装类对象转化为对应的基本数据类型。</li><li>例如：int num &#x3D; new Integer(123);   –底层–&gt; int num &#x3D; new Integer(123).intValue();</li></ul></li><li><p><strong>自动装箱的缓存问题？</strong></p><ul><li><p>解释：当“整数型”的数据取值范围在[-128, 127]之间的时候，如果触发了自动装箱机制，则就会从“缓存池”中取出一个包装类对象并返回，也就是不会创建新的包装类对象并返回。</p></li><li><p>当“整数型”的数据取值范围在[-128, 127]之外的时候，如果触发了自动装箱机制，则就会直接创建一个新的包装类对象并返回，也就是不会从缓存池中取出包装类对象来返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">底层：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 如果i的取值在[-128, 127]之间，则直接从“缓存池”中取出一个Integer对象并返回</span>         <span class="token comment">// 备注：此处IntegerCache属于一个Integer类中的“私有静态内部类”。</span>         <span class="token comment">// IntegerCache.low：此处low属于int类型的静态常量，并且默认值为：-128</span>         <span class="token comment">// IntegerCache.high：此处high属于int类型的静态常量，并且默认值为：127</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>             <span class="token comment">// IntegerCache.cache：此处cache属于Integer数组类型的静态常量，数组中存储的元素依次为[-128, 127]之间的Integer对象</span>             <span class="token comment">// IntegerCache.cache[i + (-IntegerCache.low)]：返回整数i所对应的Integer对象，例如i的值为127，则就返回127的Integer对象，也就是返回cache数组中的最后一个元素</span>             <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// 如果i的取值在[-128, 127]之外，则创建一个新的Integer对象并返回</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>自动拆箱的空指针问题？</strong></p><ul><li><p>解释：<strong>当触发自动拆箱机制的时候，则默认就会调用包装类的xxxValue()成员方法，如果该包装对象为null，那么触发自动拆箱机制就会抛出空指针异常。</strong></p><p>–&gt;  <strong>例如：Integer integer &#x3D; null; int num &#x3D; integer; &#x2F;&#x2F; 等效于： int num &#x3D; integer.intValue();</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 此处Integer对象处于需要int类型的环境中，那么就会触发自动拆箱机制</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> integer<span class="token punctuation">;</span> <span class="token comment">// 等效于： int num = integer.intValue();</span>        <span class="token comment">/*Integer integer01 = 128;        Integer integer02 = 128;        System.out.println(integer01 == integer02);      // 输出：false        System.out.println(integer01.equals(integer02)); // 输出：true*/</span>        <span class="token comment">/*Integer integer01 = 123;        Integer integer02 = 123;        System.out.println(integer01 == integer02);      // 输出：true        System.out.println(integer01.equals(integer02)); // 输出：true*/</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">/*// 此处3.14出于需要Double对象的环境中，则就会触发自动装箱机制，也就是会把3.14从double类型转化为Double对象，然后再赋值        Double num = 3.14;        // 此处123出于需要Integer对象的环境中，则就会触发自动装箱机制，也就是会把123从int类型转化为Integer对象，然后再赋值        Integer integer = method01(123);        System.out.println(integer);*/</span>        <span class="token comment">/*// 此处Double对象处于需要基本数据类型的环境中，则就会触发自动拆箱机制，也就是会把Double对象转化为double类型，然后再赋值        double num1 = Double.valueOf(3.14);        // 此处Integer对象处于需要基本数据类型的环境中，则就会触发自动拆箱机制，也就是会把Integer对象转化为int类型，然后再赋值        int num2 = method02(new Integer(123));        System.out.println(num2);*/</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 此处Integer对象处于需要基本数据类型的环境中，则就会触发自动拆箱机制，也就是会把Integer对象转化为int类型，然后再作为返回值</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 此处456出于需要Integer对象的环境中，则就会触发自动装箱机制，也就是会把456从int类型转化为Integer对象，然后再作为返回值</span>        <span class="token keyword">return</span> <span class="token number">456</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="十进制和别的进制之间的转换"><a href="#十进制和别的进制之间的转换" class="headerlink" title="十进制和别的进制之间的转换"></a>十进制和别的进制之间的转换</h4><ol><li><p>十进制转化为别的进制？</p><ul><li><p>明确：把十进制转化为别的进制，则我们需要使用integer包装类提供的静态方法来实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 作用：把十进制转化为二进制</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">// 作用：把十进制转化为八进制，返回的结果没有添加前缀“0”</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toOctalString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">// 作用：把十进制转化为十六进制，返回的结果没有添加前缀“0x”。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>别的进制转化为十进制？</p><ul><li><p>明确：把别的进制转化为十进制，则我们需要使用Integer包装类提供的“int parseInt(String str, int radix)”静态方法来实现。</p><p>–&gt; 参数：str用于保存需要转化为数据，此处str保存的数据可以为“二进制”、“八进制”和“十六进制”的数据。 radix用于保存str属于何种进制，例如str保存的数据为二进制，则radix赋值的内容就是2。</p></li><li><p><strong>注意：八进制转化为十进制的时候，则str保存的八进制可以添加前缀“0”；十六进制转化为十进制的时候，则str保存的十六进制不能添加前缀“0x”</strong></p></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：把二进制转化为十进制</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"10111"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：23</span>        <span class="token comment">// 需求：把八进制转化为十进制</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"054"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：44</span>        <span class="token comment">// 需求：把十六进制转化为十进制</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"2B"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：43</span>        <span class="token comment">/*// 需求：把十进制转化为二进制        String bitStr1 = Integer.toBinaryString(23);        System.out.println(bitStr1); // 输出：10111        // 需求：把十进制转化为八进制        String bitStr2 = Integer.toOctalString(44);        System.out.println(bitStr2); // 输出：54        // 需求：把十进制转化为十六进制        String bitStr3 = Integer.toHexString(43);        System.out.println(bitStr3); // 输出：2B*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h4 id="基本数据类型和字符串之间的转换"><a href="#基本数据类型和字符串之间的转换" class="headerlink" title="基本数据类型和字符串之间的转换"></a>基本数据类型和字符串之间的转换</h4><ol><li><p><strong>字符串转化为基本数据类型（重要）</strong></p><ul><li><p>明确：<strong>使用包装类提供的parseXxx(String str)的静态方法来实现。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Byte</span>    <span class="token keyword">static</span> <span class="token keyword">byte</span> <span class="token function">parseByte</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>        <span class="token comment">//将字符串参数解析为带符号的十进制byte 。</span><span class="token class-name">Short</span>    <span class="token keyword">static</span> <span class="token keyword">short</span> <span class="token function">parseShort</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>    <span class="token comment">//将字符串参数解析为带符号的十进制short 。</span><span class="token class-name">Integer</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>        <span class="token comment">//将字符串参数解析为带符号的十进制int。</span><span class="token class-name">Long</span>    <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>     <span class="token comment">//将字符串参数解析为带符号的十进制long。</span><span class="token class-name">Float</span>    <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>    <span class="token comment">//返回一个新 float值，该值被初始化为用指定字符串表示的值。</span><span class="token class-name">Double</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">parseDouble</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>    <span class="token comment">//返回一个新 double值，该值被初始化为用指定字符串表示的值。</span> <span class="token class-name">Boolean</span><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token comment">//将字符串参数解析为boolean值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项：</p><ul><li>1.<strong>不能把字符串转化为char类型，因为Character包装类中没有提供parseChar(String value)方法。</strong></li><li>2.针对Boolean类型，只有字符串为“true”的时候（不区分大小写），转化为基本类型的值才为true，否则都为false。</li><li>3.<strong>整数型包装类，字符串中的内容必须是十进制整数；浮点型包装类中，字符串中的内容必须为十进制整数或浮点数，否则抛出NumberFormatException异常。</strong></li></ul></li></ul></li><li><p>基本数据类型转化为字符串（了解）</p><ul><li><p>明确：<strong>把基本数据类型转换为字符串，我们可以使用“+”连接符来实现，也可以使用包装类提供的方法来实现。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">所有包装类<span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                返回对象的字符串表示形式。<span class="token class-name">Byte</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">)</span>    把<span class="token keyword">byte</span>类型转化为字符串返回。<span class="token class-name">Short</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">short</span> s<span class="token punctuation">)</span>    把<span class="token keyword">short</span>类型转化为字符串返回。<span class="token class-name">Integer</span><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>    把<span class="token keyword">int</span>类型转化为字符串返回。<span class="token class-name">Long</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token punctuation">)</span>    把<span class="token keyword">long</span>类型转化为字符串返回。<span class="token class-name">Float</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">float</span> f<span class="token punctuation">)</span>    把<span class="token keyword">float</span>类型转化为字符串返回。<span class="token class-name">Double</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span>把<span class="token keyword">double</span>类型转化为字符串返回。<span class="token class-name">Boolean</span><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span>把<span class="token keyword">boolean</span>类型转化为字符串返回。<span class="token class-name">Character</span><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span>    把<span class="token keyword">char</span>类型转化为字符串返回。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：把int类型的数据转化为字符串类型</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：123</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：123</span>        <span class="token comment">/*boolean flag1 = Boolean.parseBoolean("TrUe");        System.out.println(flag1); // 输出：true        boolean flag2 = Boolean.parseBoolean("abc");        System.out.println(flag2); // 输出：false*/</span>        <span class="token comment">/*// 把字符串转化为基本数据类型        int num1 = Integer.parseInt("123");        System.out.println(num1); // 输出：123        double num2 = Double.parseDouble("3.14");        System.out.println(num2); // 输出：3.14        boolean flag = Boolean.parseBoolean("true");        System.out.println(flag);*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="字符串的创建方式"><a href="#字符串的创建方式" class="headerlink" title="字符串的创建方式"></a>字符串的创建方式</h4><ol><li><p>方式一：通过双引号来创建字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式二：通过new+构造方法来创建字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="/images/note_images/%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E5%BC%8F.png"></p><hr><h4 id="字符串常量池的概述"><a href="#字符串常量池的概述" class="headerlink" title="字符串常量池的概述"></a>字符串常量池的概述</h4><ul><li><p><strong>加载类的时候</strong>，如果该类中有双引号创建的字符串，则就<strong>把该字符串在常量池中开辟存储空间并存储，并且常量池中存储的字符串都是唯一的。</strong></p></li><li><p><strong>执行程序的时候</strong>，如果遇到了双引号创建的字符串，则<strong>直接去常量池中取出该字符串并使用即可，也就是不会再次去创建一个新的字符串。</strong></p></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过双引号创建字符串</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token comment">// 通过构造方法创建字符串</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 比较地址</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>        <span class="token comment">// equals方法比较字符串内容</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出：true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>        <span class="token comment">/*String str1 = new String("hello world");        String str2 = new String("hello world");        System.out.println(str1 == str2);      // 输出：false        System.out.println(str1.equals(str2)); // 输出：true*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="字符类（String）"><a href="#字符类（String）" class="headerlink" title="字符类（String）"></a>字符类（String）</h4><ol><li><p>String类的概述</p><ul><li>在字符串中，存储的是任意多个字符，这些字符以char类型的数组来存储的。<strong>在String类中，char类型的数组默认采用了final来修饰</strong>，也就意味着<strong>char类型的数组不能扩容</strong>，也就是<strong>字符串中存储的字符内容不可改变，因此我们称String为“不可变的Unicode编码序列”，简称“不可变字符串”。</strong>并且，<strong>String类还采用了final修饰，则意味着String类不能被继承。</strong></li></ul></li><li><p>String类的构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//初始化新创建的String对象，使其表示空字符序列（不会使用）。</span><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span> original<span class="token punctuation">)</span><span class="token comment">//初始化新创建的String对象，新创建的字符串是参数字符串的副本。</span><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span>    <span class="token comment">//通过使用平台的默认字符集解码指定的字节数组来构造新的String。</span><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">)</span>    <span class="token comment">//分配一个新的String，以便它表示当前包含在字符数组参数中的字符序列。</span><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token comment">//从bytes数组索引为offset位置开始截取length个元素并组成一个字符串。</span><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token comment">//从value数组索引为offset位置开始截取count个元素并组成一个字符串。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：从value数组索引为offset位置开始截取count个元素并组成一个字符串。</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token char">'g'</span><span class="token punctuation">,</span> <span class="token char">'h'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：cdefg</span>        <span class="token comment">/*// 需求：从bytes数组索引为offset位置开始截取length个元素并组成一个字符串。        byte[] bytes = &#123;97, 98, 99, 100, 101, 102, 103&#125;;        String str = new String(bytes, 1, 4);        System.out.println(str); // 输出：bcde*/</span>        <span class="token comment">/*//  需求：创建一个字符串，要求字符串内容为字符数组来指定，并且底层的char类型数组空间长度有“字符数组的空间长度”来决定        char[] chars = &#123;'a', 'b', 'c', 'd'&#125;;        String str = new String(chars);        System.out.println(str); // 输出：abcd*/</span>        <span class="token comment">/*// 需求：创建一个字符串，要求字符串内容为字节数组来指定，并且底层的char类型数组空间长度有“字节数组的空间长度”来决定        byte[] bytes = &#123;97, 98, 99, 100&#125;;        String str = new String(bytes);        System.out.println(str); // 输出：abcd*/</span>        <span class="token comment">/*// 需求：创建一个字符串，要求字符串中存储指定内容，并且底层的char类型数组空间长度为：指定字符串的空间长度        String str = new String("abc");        System.out.println(str); // 输出：abc*/</span>        <span class="token comment">/*// 需求：创建一个字符串，要求字符串中没有存储任何内容，并且底层的char类型数组空间长度为0        String str = new String();        System.out.println(str); // 输出：*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="String类-的查找方法"><a href="#String类-的查找方法" class="headerlink" title="String类 的查找方法"></a>String类 的查找方法</h4><ol><li><p>length()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">//作用：获得字符串的长度，也就是获得底层char类型数组的空间长度。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>charAt()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">//作用：根据索引获得字符串中的字符。</span><span class="token comment">//注意：index取值范围在[0, 字符串长度-1]之间，超出范围则就会抛出StringIndexOutOfBoundsException异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>indexOf()方法</p><ul><li><p>明确：“从前往后”查找某个“字符”或“子串”在“主串”中的索引位置，如果查找的“字符”或“字串”不存在，则返回-1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span>                <span class="token comment">//返回指定字符第一次出现在字符串内的索引。</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>    <span class="token comment">//返回指定字符第一次出现在字符串内的索引，以指定的索引开始搜索。</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>            <span class="token comment">//返回指定子字符串第一次出现在字符串内的索引。</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token comment">//返回指定子串的第一次出现在字符串中的索引，从指定的索引开始搜索。</span><span class="token comment">//注意：此处indexOf()方法的底层使用“字符串匹配算法”来实现，常见的字符串匹配算法有：BF算法和KMP算法。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>lastIndexOf()方法</p><ul><li><p>明确：“从后往前”查找某个“字符”或“子串”在“主串”中的索引位置，如果查找的“字符”或“字串”不存在，则返回-1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span>                <span class="token comment">//返回指定字符最后一次出现在字符串内的索引。</span><span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>    <span class="token comment">//返回指定字符最后一次出现在字符串内的索引，以指定的索引开始搜索。</span><span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>            <span class="token comment">//返回指定子字符串最后一次出现在字符串内的索引。</span><span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token comment">//返回指定子串的最后一次出现在字符串中的索引，从指定的索引开始搜索。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>startsWith()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">// 作用：判断某个字符串是否以prefix开头。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>endsWith()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">//作用：判断某个字符串是否以suffix结尾</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>contains()方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">//作用：判断字符串中是否包含某个子串（开头、中间和结尾）</span><span class="token comment">//注意：此处CharSequence是一个接口，该接口的实现类有String、StringBuffer和StringBuilder</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：判断字符串是否包含“baidu”这个字串</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"baidu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出：true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"xixi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：false</span>        <span class="token comment">/*// 需求：判断字符串是否以“com”结尾        String path = "http://www.baidu.com";        System.out.println(path.endsWith("com")); // 输出：true        System.out.println(path.endsWith("cn"));  // 输出：false*/</span>        <span class="token comment">/*// 需求：判断字符串是否以“http”开头        String path = "http://www.baidu.com";        System.out.println(path.startsWith("http"));  // 输出：true        System.out.println(path.startsWith("https")); // 输出：false*/</span>        <span class="token comment">/*String str = "hello hello";        System.out.println(str.lastIndexOf("llo", 6)); // 输出：2        System.out.println(str.lastIndexOf("xixi", 6)); // 输出：-1*/</span>        <span class="token comment">/*String str = "hello hello";        System.out.println(str.lastIndexOf("llo")); // 输出：8        System.out.println(str.lastIndexOf("xixi")); // 输出：-1*/</span>        <span class="token comment">/*String str = "hello hello";        System.out.println(str.lastIndexOf('e', 6)); // 输出：1        System.out.println(str.lastIndexOf('a', 6)); // 输出：-1*/</span>        <span class="token comment">/*String str = "hello hello";        System.out.println(str.lastIndexOf('e')); // 输出：7        System.out.println(str.lastIndexOf('a')); // 输出：-1*/</span>        <span class="token comment">/*String str = "hello hello";        System.out.println(str.indexOf("llo", 5)); // 输出：8        System.out.println(str.indexOf("xixi", 5)); // 输出：-1*/</span>        <span class="token comment">/*String str = "hello hello";        System.out.println(str.indexOf("llo")); // 输出：2        System.out.println(str.indexOf("xixi")); // 输出：-1*/</span>        <span class="token comment">/*String str = "hello hello";        System.out.println(str.indexOf('e', 5)); // 输出：7        System.out.println(str.indexOf('a', 5)); // 输出：-1*/</span>        <span class="token comment">/*String str = "hello hello";        System.out.println(str.indexOf('e')); // 输出：1        System.out.println(str.indexOf('a')); // 输出：-1*/</span>        <span class="token comment">/*String str = "hello world";        char ch1 = str.charAt(0);        System.out.println(ch1); // 输出：h        char ch2 = str.charAt(9);        System.out.println(ch2); // 输出：l        char ch3 = str.charAt(12); // 抛出字符串索引越界异常*/</span>        <span class="token comment">/*String str = "hello world";        System.out.println(str.length());*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="String类转换的方法"><a href="#String类转换的方法" class="headerlink" title="String类转换的方法"></a>String类转换的方法</h4><ol><li><p>字符串转数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span class="token comment">//将一个字符串分割为子字符串，并返回字符串数组</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">//将此字符串转换为新的字符数组。</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">//得到一个操作系统默认的编码格式的字节数组</span><span class="token comment">//注意：在UTF-8编码中，中文汉字占用3个字节，英文字母占用1个字节。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串大小写转换</p><ul><li><p>明确：字符串大小写转换，针对“英文字母”有效，针对“中文汉字”无效。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回一个新的字符串，该字符串中所有英文字符转换为大写字母。</span><span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回一个新的字符串，该字符串中所有英文字符转换为小写字母。</span><span class="token comment">//注意：执行注册或登录操作的时候，就需要使用字符型大小写转换来校对验证码。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>忽略字符串前后空格</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//忽略字符串前后端的空格，中间的空格不用忽略</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字符串的截取操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">)</span>            <span class="token comment">//从beginIndex开始截取字符串，到字符串末尾结束。</span><span class="token comment">// 注意：此处beginIndex的取值范围在[0, 字符串长度-1]之间。</span>    <span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> beginIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token comment">//从beginIndex开始截取字符串，到字符索引endIndex-1结束。</span>    <span class="token comment">//注意：beginIndex的取值范围在[0, 字符串长度-1]之间，endIndex的取值范围在[0, 字符串长度]之间，并且endIndex必须大于beginIndex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串的替换操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过用newChar字符替换字符串中出现的所有oldChar字符，并返回替换后的新字符串。</span><span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span> <span class="token keyword">char</span> newChar<span class="token punctuation">)</span>    <span class="token comment">//将与字面目标序列匹配的字符串的每个子字符串替换为指定的字面替换序列。</span><span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> target<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> replacement<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串拼接的操作</p><ul><li>明确：我们可以使用“+”连接符来实现字符串的评价操作，也可以使用String类提供的“String concat(String str)”方法来实现。</li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：完成字符串的拼接操作</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：helloworld</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：helloworld</span>        <span class="token comment">/*// 需求：把字符串中的“CD”替换为“成都”        String str = "hello CD hello CD";        String replaceStr = str.replace("CD", "成都");        System.out.println(replaceStr); // 输出：hello 成都 hello 成都*/</span>        <span class="token comment">/*// 需求：把字符串中的'C'替换为'成'        String str = "hello CD hello CD";        String replaceStr = str.replace('C', '成');        System.out.println(replaceStr); // 输出：hello 成D hello 成D*/</span>        <span class="token comment">/*// 需求：截取字符串索引为[1, 8]之间的字符串        String str = "hello world";        String subStr = str.substring(1, 9);        System.out.println(subStr); // 输出：ello wor*/</span>        <span class="token comment">/*// 需求：从索引为2的位置开始截取字符串，一直截取到字符串的末尾        String str = "hello world";        String subStr = str.substring(2);        System.out.println(subStr); // 输出：llo world*/</span>        <span class="token comment">/*// 需求：忽略字符串前后端的空格，中间的空格不用忽略        String str = "   hello   world   ";        String trimStr = str.trim();        System.out.println("aa" + trimStr + "aa"); // 输出：aahello   worldaa*/</span>        <span class="token comment">/*// 需求：把小写字母转化为大写字母        String str = "hello";        String upperCaseStr = str.toUpperCase();        System.out.println(upperCaseStr); // 输出：HELLO        // 需求：把大写字母转化为小写字母        String lowerCaseStr = upperCaseStr.toLowerCase();        System.out.println(lowerCaseStr); // 输出：hello*/</span>        <span class="token comment">/*// 需求：把字符串转化为字节数组        String str = "你好";        byte[] bytes = str.getBytes();        System.out.println(Arrays.toString(bytes)); // 输出：[-28, -67, -96, -27, -91, -67]*/</span>        <span class="token comment">/*// 需求：把字符串转化为字节数组        String str = "abcd";        byte[] bytes = str.getBytes();        System.out.println(Arrays.toString(bytes)); // 输出：[97, 98, 99, 100]*/</span>        <span class="token comment">/*// 需求：把字符串转化为char类型的数组        String str = "hello";        char[] chars = str.toCharArray();        System.out.println(Arrays.toString(chars));*/</span>        <span class="token comment">/*// 需求：根据空格来分割字符串，分割的子串组成一个字符串类型的数组        String str = "hello xixi world haha";        String[] arr = str.split(" ");        System.out.println(Arrays.toString(arr));*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="String类的其他方法"><a href="#String类的其他方法" class="headerlink" title="String类的其他方法"></a>String类的其他方法</h4><ol><li><p>isEmpty方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//作用：判断字符串是否为空，也就是判断底层的char类型数组空间长度是否为0</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>equals方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span>    <span class="token comment">//判断字符串内容是否相同，区分字母大小写。</span><span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token comment">//判断字符串内容是否相同，忽略字母大小写。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>valueOf方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span>类提供了<span class="token function">valueOf</span><span class="token punctuation">(</span>xxx x<span class="token punctuation">)</span>    <span class="token comment">//这个静态方法，该方法用于将其他的数据类型转化为字符串。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*String str1 = "hEllo";        String str2 = "hello";        System.out.println(str1.equalsIgnoreCase(str2)); // 输出：true*/</span>        <span class="token comment">/*String str1 = "hello";        String str2 = "hello";        System.out.println(str1.equalsIgnoreCase(str2)); // 输出：true*/</span>        <span class="token comment">/*String str1 = "hEllo";        String str2 = "hello";        System.out.println(str1.equals(str2)); // 输出：false*/</span>        <span class="token comment">/*String str1 = "hello";        String str2 = "hello";        System.out.println(str1.equals(str2)); // 输出：true*/</span>        <span class="token comment">/*// 需求：判断str字符串是否为空        String str = "hello";        boolean isEmpty = str.isEmpty();        System.out.println(isEmpty); // 输出：true*/</span>        <span class="token comment">/*// 需求：判断str字符串是否为空        String str = "";        boolean isEmpty = str.isEmpty();        System.out.println(isEmpty); // 输出：true*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="StringBuffer类的概述"><a href="#StringBuffer类的概述" class="headerlink" title="StringBuffer类的概述"></a>StringBuffer类的概述</h4><ul><li>StringBuffer类继承于AbstractStringBuilder抽象类，StringBuffer类底层维护者一个char类型的数组，并且该char类型的数组没有使用final修饰，也就意味着该char类型的数组可以自动扩容，也就是该char类型数组存储的元素可以改变，因此我们就称StringBuffer类为“可变的Unicode编码序列”，简称“可变字符串”。并且，StringBuffer类采用了final修饰，也就意味着StringBuffer不能被继承。</li></ul><hr><h4 id="String类和StringBuffer类特点"><a href="#String类和StringBuffer类特点" class="headerlink" title="String类和StringBuffer类特点"></a>String类和StringBuffer类特点</h4><ol><li><p>相同点：</p><ul><li>a)底层都维护者一个char类型的数组，也就是存储的都是字符，因此都属于“字符串”。</li><li>b)这个两个类都采用了final修饰，也就意味着String和StringBuffer都不能被继承。</li></ul></li><li><p>不同点：</p><ul><li><p>String类底层的char类型数组使用了final修饰，因此String类存储的字符内容不可改变，我们就称之为“不可变字符串”。</p><p>–&gt; 通过String类提供的方法来操作字符串中的内容时，都不是直接基于char类型数组做的操作，那么都会返回一个新的字符串。</p></li><li><p>StringBuffer类底层的char类型数组没有使用final修饰，因此StringBuffer类存储的字符内容可以改变，我们就称之为“可变字符串”。</p><p>–&gt; 通过StringBuffer类提供方法来操作字符串中的内容，都是直接基于char类型数组做的操作，因此就可以无需返回新的字符串。</p></li></ul></li></ol><hr><h4 id="StringBuffer类的构造方法"><a href="#StringBuffer类的构造方法" class="headerlink" title="StringBuffer类的构造方法"></a>StringBuffer类的构造方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//构造一个没有字符的字符串缓冲区，初始容量为16个字符（有用）。</span><span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> seq<span class="token punctuation">)</span><span class="token comment">//构造一个包含与指定的相同字符的字符串缓冲区CharSequence 。</span><span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>    <span class="token comment">//构造一个没有字符的字符串缓冲区和指定的初始容量。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：实例化StringBuffer对象，并且可变字符串中没有指定设置内容，而且底层的char类型数组空间长度为：形参的值</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：</span>        <span class="token comment">/*// 需求：实例化StringBuffer对象，并且可变字符串内容可以自定义设置，而且底层的char类型数组空间长度为：形参长度 + 16        StringBuffer sb = new StringBuffer("hello");        System.out.println(sb); // 输出：hello*/</span>        <span class="token comment">/*// 需求：实例化StringBuffer对象，并且可变字符串中没有指定设置内容，而且底层的char类型数组空间长度为：16        StringBuffer sb = new StringBuffer();        System.out.println(sb); // 输出：*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="StringBuffer类的方法"><a href="#StringBuffer类的方法" class="headerlink" title="StringBuffer类的方法"></a>StringBuffer类的方法</h4><p>明确：如果StringBuffer类提供方法的返回值类型为StringBuffer或AbstractStringBuilder，则该返回值就是“当前方法的调用者对象”。</p><ol><li><p>添加的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//作用：在可变字符串末尾添加内容。</span><span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">// 作用：在可变字符串索引为offset位置插入字符串内容。</span> <span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>  <span class="token comment">//注意：此处offset的取值范围在[0, 可变字符串长度]之间，超出范围则就会抛出“字符串索引越界异常”。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>替换的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//作用：把可变字符串索引为index的字符替换为ch即可。</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">//  注意：此处index的取值范围在[0, 可变字符串长度 - 1]之间，超出范围则就会抛出“字符串索引越界异常”。</span> <span class="token comment">//作用：把可变字符串索引为[start, end)之间的元素替换为str即可。</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">//注意：此处start的取值范围[0, 可变字符串长度 - 1]之间，end的取值范围在[0, 可变字符串长度]之间，并且end必须大于start。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//作用：删除可变字符串中索引为index的字符。</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">// 注意：此处index的取值范围在[0, 可变字符串长度 - 1]之间，超出范围则就会抛出“字符串索引越界异常”。</span><span class="token comment">//作用：删除索引为[start, end)范围之间的元素。</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">//注意：此处start的取值范围[0, 可变字符串长度 - 1]之间，end的取值范围在[0, 可变字符串长度]之间，并且end必须大于start。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查找的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>                    <span class="token comment">//返回 char在指定索引在这个序列值。</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>                <span class="token comment">//返回指定子字符串第一次出现的字符串内的索引。</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span>    <span class="token comment">//返回指定子串的第一次出现的字符串中的索引，从指定的索引开始。</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>            <span class="token comment">//返回指定子字符串最右边出现的字符串内的索引。</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">)</span><span class="token comment">//返回指定子字符串最后一次出现的字符串中的索引，从指定的索引开始。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>反转的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 把可变字符串中的内容进行反转操作<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>操作字符串长度的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 作用：获得可变字符串的长度</span> <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">// 作用：修改可变字符串的长度。</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> newLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">//注意：如果“设置的长度”大于“可变字符串的长度”，则默认做“扩容操作”。</span><span class="token comment">//如果“设置的长度”小于“可变字符串的长度”，则默认做“剪切操作”。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串截取的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span>        <span class="token comment">//返回一个新的 String ，其中包含此字符序列中当前包含的字符的子序列。</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token comment">//返回一个新的 String ，其中包含此序列中当前包含的字符的子序列。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>转化为String类的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 作用：把StringBuffer对象转化为String类型。</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：hello</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello");        sb.setLength(3);        System.out.println(sb); // 输出：hel*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello");        sb.setLength(10);        System.out.println("aa" + sb + "aa"); // 输出：aahello     aa*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello world");        int length = sb.length();        System.out.println(length); // 输出：11*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("abc");        sb.reverse();        System.out.println(sb); // 输出：cba*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello world");        sb.delete(2, 10);        System.out.println(sb);  // 输出：hed*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello world");        sb.deleteCharAt(1);        System.out.println(sb); // 输出：hllo world*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello CD hello");        sb.replace(6, 8, "成都市");        System.out.println(sb); // 输出：hello 成都市 hello*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello CD");        sb.setCharAt(6, '成');        System.out.println(sb); // 输出：hello 成D*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello");        sb.insert(3, true);        sb.insert(9, 123);        System.out.println(sb); // 输出：heltruelo123*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello");        StringBuffer stringBuffer = sb.append(123);        System.out.println(stringBuffer == sb); // 输出：true*/</span>        <span class="token comment">/*StringBuffer sb = new StringBuffer("hello");        sb.append(123);        sb.append(true);        System.out.println(sb); // 输出：hello123true*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="StringBuilder类的概述"><a href="#StringBuilder类的概述" class="headerlink" title="StringBuilder类的概述"></a>StringBuilder类的概述</h4><ul><li>StringBuilder类继承于AbstractStringBuilder抽象类，StringBuilder类底层维护者一个char类型的数组，并且该char类型的数组没有使用final修饰，也就意味着该char类型的数组可以自动扩容，也就是StringBuilder类存储的字符内容可以改变，因此我们就称呼StringBuilder类为“可变的Unicode编码序列”，简称“可变字符串”。并且，StringBuilder类采用final修饰，也就意味着StringBuilder不能被继承。</li></ul><hr><h4 id="StringBuffer类和StringBuilder类的特点"><a href="#StringBuffer类和StringBuilder类的特点" class="headerlink" title="StringBuffer类和StringBuilder类的特点"></a>StringBuffer类和StringBuilder类的特点</h4><ol><li>相同点<ul><li>a)底层都包含char类型的数组，并且该char类型的数组都没使用final修饰，因此都称之为“可变字符串”。</li><li>b)这两个类都采用了final关键字来修饰，也就意味着StringBuffer类和StringBuilder类都不能被继承。</li><li>c)都继承于AbstractStringBuilder抽象类，并且这两个类拥有的方法都相同，因此使用方法属于类似的。</li></ul></li><li>不同点<ul><li>StringBuffer：线程安全的，会做线程同步检查，因此效率较低（不常用）。</li><li>StringBuilder：线程不安全的，不会做线程同步检查，因此效率较高（常用）。</li></ul></li></ol><hr><h4 id="使用“-”连接符完成字符串拼接操作的底层分析（重点）"><a href="#使用“-”连接符完成字符串拼接操作的底层分析（重点）" class="headerlink" title="使用“+”连接符完成字符串拼接操作的底层分析（重点）"></a>使用“+”连接符完成字符串拼接操作的底层分析（重点）</h4><ol><li><p>情况一：两个字符串都是常量时，使用“+”来完成拼接操作</p><ul><li><p>底层：因为常量保存的内容不可改变，也就是编译时期就能确定常量的值，因此为了提高字符串的拼接效率，所以就在编译时期就完成了拼接操作。</p></li><li><p>eg1:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span> 编译之后：<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>eg2:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">String</span> STR1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> <span class="token keyword">final</span> <span class="token class-name">String</span> STR2 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span> <span class="token class-name">String</span> str <span class="token operator">=</span> STR1 <span class="token operator">+</span> STR2<span class="token punctuation">;</span> <span class="token comment">//编译之后：String str = "helloworld";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>情况二：其中一个为字符串变量时，使用“+”来完成拼接操作</p><ul><li><p>底层：因为编译时期无法确定变量的值，因此其中一个为字符串变量的拼接操作，那么肯定不是在编译时期完成，而是在运行时期来完成的，并且实现步骤如下。</p></li><li><p><strong>eg1:【重点】</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">例如：分析“<span class="token class-name">String</span> hw <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">"world"</span>”代码的底层实现过程 <span class="token operator">*</span>      第一步：创建一个<span class="token class-name">StringBuilder</span>对象，用于字符串的拼接操作。 <span class="token operator">*</span>         <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>      第二步：调用sb对象的<span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，用于拼接str字符串。 <span class="token operator">*</span>         <span class="token operator">--</span><span class="token operator">></span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>      第三步：调用sb对象的<span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，用于拼接<span class="token string">"world"</span>。 <span class="token operator">*</span>         <span class="token operator">--</span><span class="token operator">></span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>      第四步：调用sb对象的<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，然后再去做赋值操作 <span class="token operator">*</span>         <span class="token operator">--</span><span class="token operator">></span> <span class="token class-name">String</span> hw <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>eg2:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> hw <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 情况一：两个字符串都是常量时，使用“+”来完成拼接操作     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> STR1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> STR2 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> STR1 <span class="token operator">+</span> STR2<span class="token punctuation">;</span>        <span class="token comment">// 以上三行代码，在编译之后的结果就是：String str = "helloworld";</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 情况一：两个字符串都是常量时，使用“+”来完成拼接操作     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span> <span class="token comment">// 编译之后：String str = "helloworld";</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h4 id="三种字符串的拼接效率（重点）"><a href="#三种字符串的拼接效率（重点）" class="headerlink" title="三种字符串的拼接效率（重点）"></a>三种字符串的拼接效率（重点）</h4><ol><li><p>System.currentTimeMillis()方法的概述？</p><ul><li>作用：获得“当前时间”距离1970年1月1日凌晨的毫秒数。</li><li>–&gt; 公式：1秒 &#x3D; 1000毫秒</li><li>使用：计算完成某个功能所需要的耗时，则就可以使用该方法来实现。</li><li>–&gt; 耗时：结束时间 - 开始时间</li></ul></li><li><p>三种字符串的拼接效率？</p><ul><li><p><strong>StringBuilder的拼接效率最高，StringBuffer的拼接效率次之，String的拼接效率最低。</strong></p></li><li><p>注意：<strong>如果需要大量执行字符串的拼接操作，则建议使用StringBuilder类来完成拼接操作。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">60000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String类拼接的耗时："</span> <span class="token operator">+</span> <span class="token function">stringAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuffer类拼接的耗时："</span> <span class="token operator">+</span> <span class="token function">stringBufferAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuilder类拼接的耗时："</span> <span class="token operator">+</span> <span class="token function">stringBuilderAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">stringBuilderAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.定义一个变量，用于保存开始时间距离1970年1月1日凌晨的毫秒数</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.通过普通for循环，完成StringBuilder类的COUNT次拼接操作</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3.定义一个变量，用于保存结束时间距离1970年1月1日凌晨的毫秒数</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.返回StringBuilder拼接的耗时</span>        <span class="token keyword">return</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">stringBufferAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.定义一个变量，用于保存开始时间距离1970年1月1日凌晨的毫秒数</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.通过普通for循环，完成StringBuffer类的COUNT次拼接操作</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3.定义一个变量，用于保存结束时间距离1970年1月1日凌晨的毫秒数</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.返回StringBuffer拼接的耗时</span>        <span class="token keyword">return</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">stringAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.定义一个变量，用于保存开始时间距离1970年1月1日凌晨的毫秒数</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.通过普通for循环，完成String类的COUNT次拼接操作</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            str <span class="token operator">+=</span> i<span class="token punctuation">;</span> <span class="token comment">// 使用StringBuilder来完成的拼接</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3.定义一个变量，用于保存结束时间距离1970年1月1日凌晨的毫秒数</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.返回String拼接的耗时</span>        <span class="token keyword">return</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：计算完成1+2+3+...+999999+1000000功能的耗时</span>        <span class="token comment">// 1.定义一个变量，用于保存开始时间距离1970年1月1日凌晨的毫秒数</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.完成1+2+3+...+9999999+10000000这个功能</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3.定义一个变量，用于保存结束时间距离1970年1月1日凌晨的毫秒数</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.计算完成该功能所需要的耗时</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><hr><h4 id="链式调用语法（了解）"><a href="#链式调用语法（了解）" class="headerlink" title="链式调用语法（了解）"></a>链式调用语法（了解）</h4><p>理解：每个成员方法体中都返回this，也就是每个成员方法体中都返回该方法的调用者对象。</p><ol><li><p>问题：在目前已经学习的类中，哪些类支持链式调用语法呢？？？</p><ul><li><p>答案：StringBuilder和StringBuffer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">// 需求：让学生完成吃饭、睡觉和打豆豆的操作</span>        <span class="token comment">// 方式一：不使用链式调用语法来实现</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 方式二：使用链式调用语法来完成</span>        <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打豆豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr></li></ol><h3 id="DAY18"><a href="#DAY18" class="headerlink" title="DAY18"></a>DAY18</h3><h4 id="时间处理类概述"><a href="#时间处理类概述" class="headerlink" title="时间处理类概述"></a>时间处理类概述</h4><ul><li>在计算机世界，我们把1970年1月1日凌晨定为基准时间，每个度量单位是毫秒(1秒的千分之一)。</li></ul><ol><li><p>Date类的概述</p><ul><li>java.util.Date我们称之为“时间类”，在程序中我们通过Date对象来保存时间。Date类在JDK1.0版本就诞生，到目前为止Date类中的很多方法都被启用啦，因为Calendar类的出现替代了Date类的很多功能。</li></ul></li><li><p>Date类的构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//作用：获得保存“当前时间”的Date对象。</span><span class="token keyword">public</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">//作用：获得保存“指定时间”的Date对象。</span><span class="token keyword">public</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">long</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">//注意：传入的long类型参数，则表示的就是“指定时间”距离1970年1月1日凌晨的毫秒数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Date类的成员方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">Date</span> when<span class="token punctuation">)</span>：<span class="token comment">//测试此日期是否在指定日期之前</span><span class="token keyword">boolean</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">Date</span> when<span class="token punctuation">)</span>：<span class="token comment">//测试此日期是否在指定日期之后。</span><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>：<span class="token comment">//比较两个日期的相等性。</span><span class="token comment">//--------------以上三个方法很少使用，以下两个方法可能使用----------------</span><span class="token keyword">long</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//返回当前时间距离1970年1月1日凌晨的毫秒数。</span><span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">)</span>：<span class="token comment">//使用给定的毫秒时间值设置现有的Date对象。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：修改Date对象保存的时间，该方法的参数为“设置时间距离1970年1月1日凌晨的毫秒数”</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 明确：把date对象保存时间设置为两天之后</span>        date<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*// 需求：获得date对象保存时间距离1970年1月1日凌晨的毫秒数。        Date date = new Date(System.currentTimeMillis() + 2 * 24 * 60 * 60 * 1000);        long time = date.getTime();        System.out.println(time);*/</span>        <span class="token comment">/*Date date1 = new Date();        Date date2 = new Date(System.currentTimeMillis() + 2 * 24 * 60 * 60 * 1000);        // 需求：判断date1保存时间是否在date2保存时间之前        // System.out.println(date1.before(date2)); // 输出：true        // 需求：判断date1保存时间是否在date2保存时间之后        // System.out.println(date1.after(date2)); // 输出：false        // 需求：判断date1保存时间和date2保存时间是否相等        // System.out.println(date1.equals(date2)); // 输出：false*/</span>        <span class="token comment">/*// 需求：获得保存“指定时间”的Date对象。        Date date = new Date(System.currentTimeMillis() + 2 * 24 * 60 * 60 * 1000);        System.out.println(date);*/</span>        <span class="token comment">/*// 需求：获得保存“当前时间”的Date对象。        Date date = new Date();        System.out.println(date);*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="SimpleDateFormat类的引入"><a href="#SimpleDateFormat类的引入" class="headerlink" title="SimpleDateFormat类的引入"></a>SimpleDateFormat类的引入</h4><ul><li><p>需求：在程序中使用“Date对象”来保存时间，而生活中使用“字符串”来保存时间，如何实现“Date对象”保存时间和“字符串”保存时间之间相互转换呢？</p><p>–&gt;解决：使用SimpleDateFormat类来实现。</p></li></ul><ol><li><p>SimpleDateFormat类的概述</p><ul><li><strong>java.text.SimpleDateFormat类属于DateFormat抽象类的实现类</strong>，<strong>开发中我们使用SimpleDateFormat类来实现“Date对象”保存时间和“字符串”保存时间之间相互转换，该类在开发中很常用！</strong></li></ul></li><li><p>时间转换的指定格式规则</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">当出现 y 时，会将 y 替换成年。<span class="token comment">//当出现 M 时，会将 M 替换成月。</span>当出现 d 时，会将 d 替换成日。当出现 h 时，会将 h 替换成时<span class="token punctuation">(</span><span class="token number">12</span>小时制<span class="token punctuation">)</span>。当出现 <span class="token class-name">H</span> 时，会将 <span class="token class-name">H</span> 替换成时<span class="token punctuation">(</span><span class="token number">24</span>小时制<span class="token punctuation">)</span>。当出现 m 时，会将 m 替换成分。当出现 s 时，会将 s 替换成秒。<span class="token comment">//当出现 S 时，会将 S 替换成毫秒。</span><span class="token comment">//当出现D时，获得当前时间是今年的第几天。</span>当出现w时，获得当前时间是今年的第几周。<span class="token comment">//当出现W时，获得当前时间是本月的第几周。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>SimpleDateFormat类的构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//作用：实例化SimpleDateFormat对象，并且还能设置指定的格式规则</span> <span class="token keyword">public</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>SimpleDateFormat类的成员方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//作用：把Date对象保存时间转化为字符串保存时间。</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">// 作用：把字符串保存时间转化为Date对象保存时间。</span><span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">// 注意：当“字符串保存时间”的格式和“指定的时间格式”不匹配，则就会抛出ParseException异常。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：获得Date对象保存时间是本月的第几周。</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"W"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*// 需求：获得Date对象保存时间是今年的第几周        Date date = new Date();        SimpleDateFormat sdf = new SimpleDateFormat("w");        String format = sdf.format(date);        System.out.println(format);*/</span>        <span class="token comment">/*// 需求：获得Date对象保存时间是今年的第几天        Date date = new Date();        SimpleDateFormat sdf = new SimpleDateFormat("D");        String format = sdf.format(date);        System.out.println(format);*/</span>        <span class="token comment">/*// 需求：把字符串保存时间转化为Date对象保存时间，并且字符串时间的格式为“2022年7月30日 13时14分15秒”        // 需求：把字符串保存时间转化为Date对象保存时间，并且字符串时间的格式为“2022-7-30 13:14:15”        // 1.定义一个字符串，用于保存指定的时间        // String time = "2022年7月30日 13时14分15秒";        String time = "2022-7-30 13:14:15";        // 2.实例化SimpleDateFormat对象，并设置好格式规则        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        // 3.把字符串保存时间转化为Date对象保存时间        Date date = sdf.parse(time);        System.out.println(date);*/</span>        <span class="token comment">/*// 需求：把Date对象保存时间转化为字符串时间，并且字符串时间的格式为“2022年7月30日 13时14分15秒”        // 需求：把Date对象保存时间转化为字符串时间，并且字符串时间的格式为“2022-7-30 13:14:15”        // 1.获得保存“指定时间”的Date对象        Date date = new Date(System.currentTimeMillis() + 5 * 60 * 60 * 1000);        // 2.实例化SimpleDateFormat对象，并设置好格式规则        // SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH时mm分ss秒 SSS毫秒");        // 3.把Date对象保存时间转化为字符串保存时间        String format = sdf.format(date);        System.out.println(format);*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="Calendar类的概述"><a href="#Calendar类的概述" class="headerlink" title="Calendar类的概述"></a>Calendar类的概述</h4><ul><li>java.util.Calendar我们称之为“日历类”，通过Calendar我们可能表示年、月、日、时、分和秒的一个具体时间，并且Calendar类还提供了日期相关的计算功能，正是因为Calendar类的出现，所以替代了Date类的很多方法。</li></ul><hr><h4 id="Calendar类的实例化"><a href="#Calendar类的实例化" class="headerlink" title="Calendar类的实例化"></a>Calendar类的实例化</h4><ul><li>因为Calendar类是一个抽象类，因此我们就无法直接实例化Calendar对象，而是调用Calendar类的“Calendar getInstance()”静态方法，来获得一个保存“当前时间”的Calendar对象，也就是返回了一个Calendar类的实现类（GregorianCalendar）对象。</li></ul><hr><h4 id="Calendar类提供的字段"><a href="#Calendar类提供的字段" class="headerlink" title="Calendar类提供的字段"></a>Calendar类提供的字段</h4><p>明确：<strong>在Calendar类中提供的字段，默认全部是int类型的“全局静态常量”，也就是这些字段默认采用了“public static final”来修饰。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR <span class="token comment">//获取年份</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH <span class="token comment">//获取月份，取值范围在[0, 11]之间，0表示1月，1表示2月，...，11表示12月</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH <span class="token comment">//获取本月的第几天（日）</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_YEAR <span class="token comment">//获取本年的第几天</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>HOUR_OF_DAY <span class="token comment">//小时，24小时制</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>HOUR <span class="token comment">//小时，12小时制</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MINUTE <span class="token comment">//获取分钟</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>SECOND <span class="token comment">//获取秒</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MILLISECOND <span class="token comment">//获取毫秒</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK <span class="token comment">//获取星期几，取值范围在[1, 7]之间，1表示星期日，2表示星期一，...，7表示星期六</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Calendar类提供的方法"><a href="#Calendar类提供的方法" class="headerlink" title="Calendar类提供的方法"></a>Calendar类提供的方法</h4><ol><li><p>a)获取的方法（了解）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>  <span class="token comment">//根据字段获得数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>b)设置的方法（了解）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">//根据字段来设置数据</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>  <span class="token comment">//设置年、月和日的数据</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">int</span> hourOfDay<span class="token punctuation">,</span> <span class="token keyword">int</span> minute<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">//设置年、月、日、时和分的数据</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">int</span> hourOfDay<span class="token punctuation">,</span> <span class="token keyword">int</span> minute<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span> <span class="token comment">//设置年、月、日、时、分和秒的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>c)计算的方法（掌握）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>   <span class="token comment">//根据字段来“增加”或“减少”数据</span><span class="token comment">//如果amount值为【正数】，则做的是【“添加”】数据的操作；如果amount的值为【负数】，则做的是【“减少”】数据的操作。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>d)转换的方法（重点）</strong></p><ul><li><p>明确：<strong>开发中，我们经常涉及Date对象保存时间和Calendar对象保存时间之间的相互转换，也就是很常用转换相关的方法。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//作用：把Date对象保存时间转化为Calendar对象保存，也就是设置Calendar对象保存时间</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span class="token comment">//作用：把Calendar对象保存时间转化为Date对象保存时间，也就是获得Calendar对象保存时间</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Date</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：把Calendar对象保存时间转化为字符串保存时间。</span>        <span class="token comment">// 分析：Calendar对象 --> Date对象 --> 字符串时间</span>        <span class="token comment">// 1.获得保存“当前时间”的Calendar对象</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.把Calendar对象保存时间转化为Date对象保存时间，也就是获得Calendar对象保存时间</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.实例化SimpleDateFormat对象，并设置格式规则</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.把date对象保存时间转化为字符串时间</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：把字符串保存时间转化为Calendar对象来保存该时间。</span>        <span class="token comment">// 分析：字符串时间 --> Date对象 --> Calendar对象</span>        <span class="token comment">// 1.定义一个字符串，用于保存某个时间</span>        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">"2022年5月20日 13时14分15秒"</span><span class="token punctuation">;</span>        <span class="token comment">// 2.实例化SimpleDateFormat对象，并设置格式规则</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.把字符串时间转化为Date对象来保存</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4.获得保存当前时间的Calendar对象</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5.把Date对象保存时间转化为Calendar对象保存，也就是设置Calendar对象保存时间</span>        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获得“当前时间”的Calendar对象</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 需求：在当前时间的基础之上添加5年</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 需求：在当前时间的基础之上减少3月</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获得“当前时间”的Calendar对象</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据字段来设置数据</span>        <span class="token comment">/*calendar.set(Calendar.YEAR, 2020);        calendar.set(Calendar.HOUR_OF_DAY, 17);*/</span>        <span class="token comment">// 设置年、月、日、时、分和秒的数据</span>        calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获得“当前时间”的Calendar对象</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据字段获得数据</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年："</span> <span class="token operator">+</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注意：MONTH的取值范围在[0, 11]之间，0代表1月，1代表2月，依次类推</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日："</span> <span class="token operator">+</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"时（12小时）："</span> <span class="token operator">+</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>HOUR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"时（24小时）："</span> <span class="token operator">+</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>HOUR_OF_DAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分："</span> <span class="token operator">+</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MINUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秒："</span> <span class="token operator">+</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"毫秒："</span> <span class="token operator">+</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MILLISECOND<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注意：DAY_OF_WEEK的取值范围在[1, 7]之间，1代表星期日，2代表星期一，3代表星期二</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期几："</span> <span class="token operator">+</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="枚举（enum）"><a href="#枚举（enum）" class="headerlink" title="枚举（enum）"></a>枚举（enum）</h4><ol><li><p>枚举的引入</p><ul><li>需求：有一个学生类，学生类中有姓名、年龄和性别等属性。</li><li>实现：定义一个Student类，然后在Student类中定义name、age和sex等成员变量。</li><li>问题：如果把sex成员变量设置为“char”或“String”类型，则给性别赋值的时候除了能设置“男”和“女”之外，还能设置别的数据。</li><li>解决：使用“枚举”来解决，也就是把sex成员变量设置为枚举类型。</li></ul></li><li><p>枚举的语法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> <span class="token keyword">enum</span> 枚举名 <span class="token punctuation">&#123;</span>枚举值<span class="token number">1</span><span class="token punctuation">,</span> 枚举值<span class="token number">2</span><span class="token punctuation">,</span> 枚举值<span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用语法：枚举名.枚举值</span><span class="token comment">// 在switch选择结构中，我们使用“枚举值”的时候必须省略“枚举名”，而其余的场合使用“枚举值”则必须通过“枚举名”来操作。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>枚举的底层</p><ul><li>对Sex枚举进行反编译，我们发现<strong>Sex枚举本质上就是使用final修饰的类，并且显示的继承于java.lang.Enum抽象类</strong></li><li>Sex枚举中的所有枚举值，<strong>默认都是Sex类型的全局静态常量</strong>，也就是所有的枚举值默认使用了“public static final”来修饰。</li><li><strong>对Sex枚举进行反编译，发现Sex枚举中还提供了values()的全局静态方法，调用该方法就能返回枚举中的所有枚举值（数组来存储）。</strong></li></ul></li><li><p>Sex枚举反编译后的结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Sex</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Enum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sex</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span> <span class="token operator">*</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Sex</span> MAN<span class="token punctuation">;</span> <span class="token operator">*</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Sex</span> WOMAN<span class="token punctuation">;</span> <span class="token operator">*</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Sex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Sex</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>       <span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token operator">*</span>   <span class="token punctuation">&#125;</span> <span class="token operator">*</span><span class="token operator">/</span>     <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Sex</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">Sex</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"卧龙"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token class-name">Sex</span><span class="token punctuation">.</span>WOMAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需求：随机获得一个季节，然后输出该季节的特点。</span>        <span class="token comment">// 1.通过values()方法，来获得所有的季节枚举</span>        <span class="token class-name">Season</span><span class="token punctuation">[</span><span class="token punctuation">]</span> seasons <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.通过Math提供的方法，随机获得[0, 3]之间的整数</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.通过index获得数组元素，也就是获得一个季节</span>        <span class="token class-name">Season</span> season <span class="token operator">=</span> seasons<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 4.判断season取值（季节），从而输出该季节的特点</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>season<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> 春<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春意盎然"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> 夏<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> 秋<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> 冬<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冬雪皑皑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 季节的枚举 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">&#123;</span>    春<span class="token punctuation">,</span> 夏<span class="token punctuation">,</span> 秋<span class="token punctuation">,</span> 冬<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 性别的枚举 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Sex</span> <span class="token punctuation">&#123;</span>    MAN<span class="token punctuation">,</span> WOMAN<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 学生类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 成员变量</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Sex</span> sex<span class="token punctuation">;</span>    <span class="token comment">// 构造方法</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">Sex</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// setter和getter方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Sex</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">Sex</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">System</span>  <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token comment">//System类包含一些有用的类字段和方法，它不能被实例化。所以该类中的字段和方法一定是静态的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><p><strong>常用方法：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> srcPos<span class="token punctuation">,</span> <span class="token class-name">Object</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token comment">//返回以毫秒为单位的当前时间。</span><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回最准确的可用系统计时器的当前值，以毫微秒为单位。</span><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//终止当前正在运行的 Java 虚拟机。参数用作状态码；根据惯例，非 0 的状态码表示异常终止。</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token comment">// 返回一个不能修改的当前系统环境的字符串映射视图。</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取指定键指示的系统属性。</span><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token comment">//运行垃圾回收器。</span><span class="token comment">// 调用 gc 方法暗示着 Java 虚拟机做了一些努力来回收未用对象，以便能够快速地重用这些对象当前占用的内存。</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        test01();</span><span class="token comment">//        test02();</span><span class="token comment">//        test03();</span><span class="token comment">//        test04();</span>        <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        * stu 在栈内存中        * new Student 在堆中        *        */</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * 什么时候对象变成垃圾？        *   对象引用为null 就会变成垃圾        *        *  对象变成垃圾，不一定马上就会被回收，需要垃圾回收器空闲的时候进行回收。        *        *  当垃圾回收器确定不存在对该对象的更多引用时，对象的垃圾回收器会调用finalize()方法 。        */</span>        stu <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 催促一下垃圾回收回收垃圾，但是依然不敢保证立马回收</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> systemRoot <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"SystemRoot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取操作系统的名称</span>        <span class="token class-name">String</span> property <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取操作系统的架构</span>        <span class="token class-name">String</span> osArch <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.arch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作系统的架构："</span> <span class="token operator">+</span> osArch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取JVM的名称和版本</span>        <span class="token class-name">String</span> vmName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.vm.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> vmVersion <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.vm.version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JVM名称："</span> <span class="token operator">+</span> vmName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JVM版本："</span> <span class="token operator">+</span> vmVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取用户的当前工作目录</span>        <span class="token class-name">String</span> userDir <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前工作目录："</span> <span class="token operator">+</span> userDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        * java程序是运行在jvm中的，一个java程序一个JVM实例        * JVM退出，那么程序就终止了。        */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i---"</span><span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 数组拷贝     *     * 在Java中有两处地方的命名是不符合标识符命名规范的，其中一处就是arraycopy()     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums  <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 需要将nums中数据拷贝到array中</span><span class="token comment">//        for (int i = 0; i &lt; array.length; i++) &#123;</span><span class="token comment">//            array[i] = nums[i];</span><span class="token comment">//        &#125;</span>        <span class="token comment">// 【ctrl + p 查看方法的形参】</span>        <span class="token comment">/*        * 第一个参数src: 源数组        * 第二个参数srcPos： 源数组的位置，也就是从源数组的哪个位置开始拷贝数据        * 第三个参数dest: 目的地数组        * 第四个参数destPos: 目的地数组的位置,也就是将拷贝的数据从哪里开始存储        * 第五个参数length: 表示复制多少个数据        * 注意： length一定小于目的地数组的长度        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>array<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student被回收了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="UUID类"><a href="#UUID类" class="headerlink" title="UUID类"></a>UUID类</h4><ol><li><p>表示通用唯一标识符（UUID）的类，UUID表示一个128位的值，也就是说UUID的值全球唯一。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取类型 4（伪随机生成的）UUID 的静态工厂。 使用加密的强伪随机数生成器生成该 UUID。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UUID</span> <span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UUIDDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UUID</span> uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 它由一组32位数的16进制数字所构成。</span>        <span class="token comment">/*        * 开发中有时候需要唯一的id，此时可以使用UUID        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0016775d-662a-4418-89af-1236414b5ca0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FilenameFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * java是面向对象的语言。万事万物皆对象 * 生活中文件或文件夹也是一种物体的，所以文件或文件夹在java中也有对象表示。 * 这个对象就是File的对象 * * File类： *   文件和目录（文件夹）路径名的抽象表示形式。 * *   File 类的实例是不可变的；也就是说，一旦创建，File 对象表示的抽象路径名将永不改变。 * * 构造方法摘要： *      File(File parent, String child) *           根据 parent 抽象路径名和 child 路径名字符串创建一个新 File 实例。 *      File(String pathname) *           通过将给定路径名字符串转换为抽象路径名来创建一个新 File 实例。 *      File(String parent, String child) *           根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例。 * * *  常用方法： *  boolean exists() *           测试此抽象路径名表示的文件或目录是否存在。 *  boolean createNewFile() *           创建一个新的空文件 * *  boolean isDirectory() *           测试此抽象路径名表示的文件是否是一个目录。 *  boolean isFile() *           测试此抽象路径名表示的文件是否是一个标准文件。 * *  boolean mkdir() *           创建此抽象路径名指定的目录。 *  boolean mkdirs() *           创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。 * *  boolean canRead() *           测试应用程序是否可以读取此抽象路径名表示的文件。 *  boolean canWrite() *           测试应用程序是否可以修改此抽象路径名表示的文件。 *  boolean isHidden() *           测试此抽象路径名指定的文件是否是一个隐藏文件。 * *  boolean delete() *           删除此抽象路径名表示的文件或目录。 *  void deleteOnExit() *           在虚拟机终止时，请求删除此抽象路径名表示的文件或目录。 * *  String getName() *           返回由此抽象路径名表示的文件或目录的名称。 *  String getParent() *           返回此抽象路径名父目录的路径名字符串；如果此路径名没有指定父目录，则返回 null。 *  File getParentFile() *           返回此抽象路径名父目录的抽象路径名；如果此路径名没有指定父目录，则返回 null。 * *  String getPath() *           获取文件或文件夹的路径（相对路径） *           如果new File传入的是绝对路径，获取到的也是绝对路径 *  File getAbsoluteFile() *           返回此抽象路径名的绝对路径名形式。 *  String getAbsolutePath() *           返回此抽象路径名的绝对路径名字符串。 * *  long lastModified() *           返回此抽象路径名表示的文件最后一次被修改的时间。 *  long length() *           返回由此抽象路径名表示的文件的长度。 * *  boolean renameTo(File dest) *           剪切拷贝文件并可以重命名文件 * *  String[] list() *           获取文件夹下的所有文件或子文件夹的名字。 *  File[] listFiles() *           获取文件夹下的所有文件或子文件夹。 * * *  String[] list(FilenameFilter filter) *           返回一个字符串数组，这些字符串指定此抽象路径名表示的目录中满足指定过滤器的文件和目录。 *  File[] listFiles(FileFilter filter) *           返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。 *  File[] listFiles(FilenameFilter filter) *           返回抽象路径名数组，这些路径名表示此抽象路径名表示的目录中满足指定过滤器的文件和目录。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">//      test01();</span><span class="token comment">//      test02();</span><span class="token comment">//      test03();</span><span class="token comment">//      test04();</span><span class="token comment">//        test05();</span><span class="token comment">//        test06();</span><span class="token comment">//        test07();</span>        <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 过滤器 FilenameFilter     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         *  过滤出txt文件         */</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file1 <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 过滤器 FileFilter     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        *  过滤出txt文件        */</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            * 这个就是过滤方法            * accept() 返回true表示满足条件，也就是可以接受            */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取文件名称</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file1 <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * listFiles() 返回的是文件夹下的文件或子文件夹对应的File对象        */</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file1 <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * list() 返回的是文件夹下的文件或子文件夹对应的名字         */</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://aa.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  剪切拷贝文件并可以重命名文件</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 绝对路径： 使用路径本身就能定位到资源     *    File类中绝对路径就是以系统盘符或者是根路径开头的路径     *    比如： D://a.txt     * 相对路径: 路径本身无法定位资源，还需要使用参照路径     *    File类中相对路径就是不是以系统盘符或者是根路径开头的路径     *    比如： a.txt     *     *    参照路径就是：File所在类的工程路径     *    该类的路径是 D:\course\JavaProjects\01_JavaSE\     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 相对路径</span>        <span class="token comment">// 该文件的绝对路径=参照路径+相对路径  ===》 D:\course\JavaProjects\01_JavaSE\day18\a.txt</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"day18/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取相对路径</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取绝对路径</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * 返回文件的内容长度（单位字节）        */</span>        <span class="token keyword">long</span> length <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 文件最后修改时间，返回的是毫秒值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a/b/c/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取文件或文件夹的名字</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c</span>        <span class="token comment">// 获取文件或文件夹的父路径名称</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// D:\a\b</span>        <span class="token comment">/*        * 注意： 通过以上两个代码我们得出结论：        *  File的路径 = getParent() + getName()        *        * 所有创建对象的时候有了以下的构造函数：        *  File(String parent, String child)        *  File(File parent, String child)        */</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// canRead() 测试文件是否可读</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * canWrite() 测试文件是否可写        * 返回false,就表示文件或文件夹不能写数据        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除文件或文件夹</span>        <span class="token keyword">boolean</span> delete <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * deleteOnExit()表示虚拟机退出的时候删除指定的文件或文件夹        */</span>        file01<span class="token punctuation">.</span><span class="token function">deleteOnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 退出虚拟机</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 模拟一个延时</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 循环1次睡眠1s</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建对象</span>        <span class="token comment">/*         * 根据传入的参数创建一个File对象。         * 此时File对象就表示参数中的文件或者目录         */</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://xx/yy/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断指定的文件或目录是否存在</span>        <span class="token keyword">boolean</span> exists <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exists<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 如果是文件就创建文件</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 创建文件</span>                file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 创建文件夹</span>                <span class="token comment">/*                 * mkdir() 只能创建一级文件夹                 * mkdirs() 创建多级文件夹                 */</span>                file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Math： 数学工具类，提供了关于数学操作的一些方法和属性 * Math类全部是静态的方法和字段 * * 字段： * static double PI *           比任何其他值都更接近 pi（即圆的周长与直径之比）的 double 值。 * *方法摘要： * static double abs(double a) *           返回 double 值的绝对值。 * static float abs(float a) *           返回 float 值的绝对值。 * static int abs(int a) *           返回 int 值的绝对值。 * static long abs(long a) *           返回 long 值的绝对值。 * static double ceil(double a) *           ceil是天花板的意思。所以ceil表示向上取整 * static double floor(double a) *          floor是地板的意思。所以floor表示向下取整 * * static double max(double a, double b) *           返回两个 double 值中较大的一个。 * static float max(float a, float b) *           返回两个 float 值中较大的一个。 * static int max(int a, int b) *           返回两个 int 值中较大的一个。 * static long max(long a, long b) *           返回两个 long 值中较大的一个。 * * static double min(double a, double b) *           返回两个 double 值中较小的一个。 * static float min(float a, float b) *           返回两个 float 值中较小的一个。 * static int min(int a, int b) *           返回两个 int 值中较小的一个。 * static long min(long a, long b) *           返回两个 long 值中较小的一个 * * static double pow(double a, double b) *           返回第一个参数的第二个参数次幂的值。 * * static double random() *           返回带正号的 double 值，该值大于等于 0.0 且小于 1.0。 * * static long round(double a) *           返回最接近参数的 long。(四舍五入) * static int round(float a) *           返回最接近参数的 int。(四舍五入) * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 圆周率，是一个常量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绝对值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 立方根</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * ceil表示向上取整，如果参数就是整数，返回数据本身        * 只有参数是浮点数才会向上取整        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200.0</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">200.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 201.0</span>        <span class="token comment">/*        * floor表示向下取整，如果参数就是整数，返回数据本身        * 只有参数是浮点数才会向下取整        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200.0</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">200.99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 200.0</span>        <span class="token comment">// max 和 min</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>        <span class="token comment">// 求出 10 3 5的最大值</span><span class="token comment">//        int max = Math.max(10, 3);</span><span class="token comment">//        System.out.println(Math.max(max,5));</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>        <span class="token comment">// 计算3的2次方</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9.0</span>        <span class="token comment">// 获取1-10的随机数</span>        <span class="token comment">// [0,1)  --> [0,10)  --->  [1,11)</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * round() 四舍五入        *  =====> (long)Math.floor(a + 0.5d)        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.45</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.55</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -4</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p><strong>就是方法体中直接或间接地调用自身。</strong></p><p>使用递归：</p><ol><li>必须创建方法；</li><li>防止死递归 – 有结束条件（出口 &#x2F; 递归头）；<ul><li>死递归会造成栈溢出错误：StackOverflowError</li></ul></li><li>构造方法不能使用递归。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这个不是递归</span><span class="token comment">//        int max = Math.max(Math.max(3, 2), 1);</span><span class="token comment">//        System.out.println(max);</span><span class="token comment">//        m01();</span>        <span class="token function">m02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 死递归，会栈溢出---》StackOverflowError     */</span><span class="token comment">//    public static void m01()&#123;</span><span class="token comment">//        System.out.println("hello");</span><span class="token comment">//        m01();</span><span class="token comment">//    &#125;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">m02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>递归的思想：将一个大的问题拆分成几个小问题，小问题解决了，大问题也就的到解决了。</strong></p><p><strong>注意：可以使用循环的一定可以使用递归，反之不一定。</strong></p><p>递归和循环的选择：</p><ul><li><strong>如果循环嵌套层次过多才能解决问题，可以使用递归。</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*  需求： 求阶乘：    5！= 5 * 4 * 3 * 2 * 1   -- 大问题    5！= 5 * 4!  ---- 小问题，由求5的阶乘变成了求4的阶乘    4！= 4 * 3!; ---- 小问题，由求4的阶乘变成了求3的阶乘    3！= 3 * 2!; ---- 小问题，由求3的阶乘变成了求2的阶乘    2！= 2 * 1!; ---- 小问题，由求2的阶乘变成了求1的阶乘    1！= 1;      ---- 小问题，由求1的阶乘    以上是将大问题查分成多个小问题，小问题的结果需要汇总回来，最终大问题得到解决。   */</span><span class="token comment">/** * 阶乘 *  需求： n!; */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactorialDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">factorial01</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">factorial02</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 使用递归求阶乘     * 1. 递： 将大问题分成小问题     *     n! = n * (n-1)!     * 2. 归： 汇总小问题的结果     * 3. 必须有结束条件     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">factorial02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 负数没有阶乘</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"负数没有阶乘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 必须有结束条件</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">/*        * n * factorial02(n-1)  --> 递： 将大问题分成小问题        *        * return     归： 汇总小问题的结果        *  递归中有return返回结果，这种属于明显的汇总结果 --> 明显的结束条件        *  有时候使用的递归有return返回结果，这种属于不明显的汇总结果--> 不明显的结束条件        */</span>         <span class="token keyword">return</span>  n <span class="token operator">*</span> <span class="token function">factorial02</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 使用循环计算阶乘     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">factorial01</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">*=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eg1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 不死神兔： *    假如有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子， * 假如兔子都不死，请问第n个月后的兔子有多少对？ * *    1  1  2  3  5  8  13 21  34 ...   斐波拉契数列 * *  月份越大，对数越多  ---> 月份往上是无边界的 *  分解： *    从第三个数开始，将数分解成前两个数据之和 *    从第三个数据开始，后面的数据是前面两个数据之和，前面的数据又可以用更前面的两个数据之和得到 *    所以数据可以一致往前分解,直到什么时候停止分解？ *         就是n=1或者n=2 * * 使用递归： * 1. 定义方法 * 2. 分解 * 3. 结束条件 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getRabbitNum</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getRabbitNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"没有这个月份"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">getRabbitNum</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getRabbitNum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eg2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token comment">/** * 遍历盘符下所有的目录和文件 * * 分析： *  1. 获取目录下的所有内容 *  2. 判断目录下中的内容 *     是文件： 直接输出 *     是文件夹： 回到1 * * 所以以上的步骤是重复的代码，所以可以使用递归 * * 使用递归： * 1. 创建方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        printFile(file);</span>        <span class="token function">printFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 1. 获取目录下的所有内容</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file1 <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//  2. 判断目录下中的内容</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 是文件： 直接输出</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//  是文件夹： 回到1</span>                <span class="token function">printFile</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 分析：     *    1. 输出file     *    2. 如果file是文件夹，就获取文件夹中的所有内容     *        回到1     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span><span class="token keyword">int</span> level<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file1 <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">printFile</span><span class="token punctuation">(</span>file1<span class="token punctuation">,</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>eg3：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token comment">/** * 删除多级文件夹 * * 注意： 删除文件夹，只能删除空文件夹 * 所以删除多级文件夹必须从里向外删除 * * 分析： *  因为参数接受的是File,File表示文件或文件夹，所以 *  要判断File的类型 *  1. 判断是文件还是文件夹 *  2. 是文件直接删除 *  3. 是文件夹，获取文件夹下的所有内容 *     回到1 *     文件删除完后删除文件夹 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteFloderDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deleteFloder</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteFloder</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 增加代码的健壮性</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 1. 判断是文件还是文件夹</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 2. 是文件直接删除</span>            file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>           <span class="token comment">// 3. 是文件夹，获取文件夹下的所有内容</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file1 <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">deleteFloder</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 当以上的for循环执行完成，就表示目录中的所有文件删除，此时目录就是空的，可以删除了</span>            file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="DAY19"><a href="#DAY19" class="headerlink" title="DAY19"></a>DAY19</h3><h4 id="集合-Collection根接口"><a href="#集合-Collection根接口" class="headerlink" title="集合_Collection根接口"></a>集合_Collection根接口</h4><p>集合的继承体系：</p><p><img src="/images/note_images/%E9%9B%86%E5%90%88%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * 集合的引入： * * 电商案例： *   我们现在在jd上购买了一些商品，这些商品数据需要在后台程序中存储。我们应该怎么存储？ *   存储多个数据需要使用容器对象，目前我们学过的容器对象是 数组。 *   那么以上的案例中使用数组存储有没有什么不好的地方呢？ *     不是很好，数组使用前必须设置长度，长度一旦设置后就固定不能改变了，但是在电商案例中我们是不知道 *     用户的到底会购买多少商品的，也就是数组的长度无法确定，怎么办？？ *       我们需要先初始一个数组的长度，然后长度不够后再进行扩容。但是数组扩容比较麻烦，需要重新创建一个新数组， *       然后将旧数组的值赋值到新数组，最后往新数组中添加新的数据。 * *   java是面向对象的语言： *      面向对象： 就是不停的创建对象，使用对象完成功能 * *   所以面对以上出现的问题时候，我们要看看有没有现成的对象可以帮助我们完成数据存储和自动扩容的功能，如果有就直接使用； *   没有才直接创建。 * *   当然java已经好了这样的类： 集合 * *   java中的集合在java.util包中 * * * Collection接口： * 学习集合，掌握增删查改的方法 + 其它方法 * * 方法摘要 * 增： *  boolean add(Object e) *           确保此 collection 包含指定的元素（可选操作）。 *  boolean addAll(Collection  c) *           将指定 collection 中的所有元素都添加到此 collection 中（可选操作）。 * * 删： * void clear() *           移除此 collection 中的所有元素（可选操作）。 * boolean remove(Object o) *           从此 collection 中移除指定元素的单个实例，如果存在的话（可选操作）。 * boolean removeAll(Collection&lt;?> c) *          移除此 collection 中那些也包含在指定 collection 中的所有元素（可选操作）。 * * * 查： *  boolean contains(Object o) *           如果此 collection 包含指定的元素，则返回 true。 *  boolean containsAll(Collection&lt;?> c) *           如果此 collection 包含指定 collection 中的所有元素，则返回 true。 *  Iterator&lt;E> iterator() *           返回在此 collection 的元素上进行迭代的迭代器。 * * 其它方法： * boolean isEmpty() *        如果此 collection 不包含元素，则返回 true。 *  boolean retainAll(Collection&lt;?> c) *           仅保留此 collection 中那些也包含在指定 collection 的元素（可选操作）。 *  int size() *           返回此 collection 中的元素数。 *  Object[] toArray() *           返回包含此 collection 中所有元素的数组。 * * Arrays类： *   static &lt;T> List&lt;T> asList(T... a) *           返回一个受指定数组支持的固定大小的列表。 *           该方法得到的集合不能做元素的增加和删除 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//      test01();</span><span class="token comment">//      test02();</span><span class="token comment">//      test03();</span>      <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        collection.clear();</span>        <span class="token comment">/*        * boolean isEmpty(): 判断集合是否为空(没有任何元素)        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * boolean retainAll(Collection&lt;?> c): 求两个集合的交集,将交集的结果存储在此collection        *        * 返回值：        *   此collection元素发生变化就是true; 否则就是false        */</span>        <span class="token class-name">Collection</span> collection1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求交集前collection："</span> <span class="token operator">+</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求交集前collection1："</span> <span class="token operator">+</span> collection1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>collection1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求交集后collection："</span> <span class="token operator">+</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"求交集后collection1："</span> <span class="token operator">+</span> collection1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * int size()： 返回此 collection 中的元素数        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------toArray----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * Object[] toArray()        *           返回包含此 collection 中所有元素的数组。        */</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> collection1<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------Arrays类的asList----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * Arrays.asList 得到的集合不能做元素的增加和删除        */</span>        <span class="token class-name">List</span> ints <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// java.lang.UnsupportedOperationException</span><span class="token comment">//        ints.add(100);</span><span class="token comment">//        ints.remove(2);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        * contains(Object o)： 查询指定元素是否在集合中        *        * 如何判断元素是否存在，contains底层也是调用对象的eqauls()方法判断内容        */</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * containsAll(Collection&lt;?> c)        *           如果此 collection 包含指定 collection 中的所有元素，则返回 true。        *        * containsAll底层的实现逻辑：        * 1. 遍历参数的元素        * 2. 调用contains()        */</span>        <span class="token class-name">Collection</span> collection1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>collection1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * remove(Object o)        *           从此 collection 中移除指定元素的单个实例，如果存在的话        *          也就说如果存在多个相同的元素，只能删除一个        *        *  集合中存储的是对象，删除元素的时候是如何判断元素相同的？        *     使用equals()判断,所以自定义的对象作为元素，建议覆写equals()        *  对象的判断有两种方式：        *  1. ==  比较的是地址值        *  2. equals() 默认比较是地址值，但是可以覆写方法变成比较内容        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除前："</span> <span class="token operator">+</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        collection.remove(2);</span><span class="token comment">//        collection.remove(new Integer(2));</span>        collection<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除后："</span> <span class="token operator">+</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------removeAll-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * removeAll(Collection c)        *          移除此 collection 中那些也包含在指定 collection 中的所有元素。        *        * 注意： remove(Object e) 删除指定元素，只会删除一个        * removeAll(Collection c) 删除集合中包含在参数集合中的所有元素。这里删除的匹配的所有元素。        *        */</span>        <span class="token class-name">Collection</span> collection1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除前："</span> <span class="token operator">+</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>collection1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除后："</span> <span class="token operator">+</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------clear---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * clear(): 移除此 collection 中的所有元素        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清空前："</span> <span class="token operator">+</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清空后："</span> <span class="token operator">+</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 增</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建对象</span>        <span class="token comment">/*         * 现在代码有警告，也就是代码使用不规范，这是因为没有指定泛型         * 暂时不用管这个警告         */</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 让对象干活</span>        <span class="token comment">// 增加数据  -- 往集合中添加数据</span>        <span class="token comment">/*         * 1. 集合中不能添加基本数据类型，这里的10已经发生自动装箱了         * 2. add(Object e) 是将元素添加到集合的尾部         */</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         *  addAll(Collection  c)         *     将指定 collection 中的所有元素都添加到此collection 中         */</span>        <span class="token class-name">Collection</span> collection01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将collection01中的所有元素添加到collection中</span><span class="token comment">//        collection.addAll(collection01); // [10, java, 200, 300]</span>        <span class="token comment">// 以下的代码是将collection01整体作为一个元素添加到collection</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>collection01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [10, java,[200, 300]]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Student类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="iterator迭代器接口"><a href="#iterator迭代器接口" class="headerlink" title="iterator迭代器接口"></a>iterator迭代器接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token comment">/** * Iterator&lt;E> iterator() *          返回在此 collection 的元素上进行迭代的迭代器。 * * Iterator迭代器接口： *   对 collection 进行迭代的迭代器。 * * 方法摘要 *  boolean hasNext() *           如果仍有元素可以迭代，则返回 true。 *  E next() *           返回迭代的下一个元素。 *  void remove() *           从迭代器指向的 collection 中移除迭代器返回的最后一个元素（可选操作）。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取集合的迭代器</span>        <span class="token comment">/*        * 以下的代码是多态        * 左边是Iterator接口的引用        * 右边一定是Iterator接口的实现类对象        * 说明集合子类的iterator() 实现了Iterator接口，并实现了Iterator接口的方法        */</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 迭代器删除元素</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------foreach----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        *  集合中的foreach底层代码还是迭代器        *        *  foreach是java的一种语法糖，简化了迭代器的代码        */</span>        <span class="token class-name">Collection</span> collection1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> collection1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用迭代器的好处：</strong></p><p><img src="/images/note_images/%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A5%BD%E5%A4%84.png"></p><hr><h4 id="list接口"><a href="#list接口" class="headerlink" title="list接口"></a>list接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * List接口 *   List接口继承Collection接口，所以Collection接口的方法List接口都有 * * 所以我们要学习List接口特有的方法。 * *  List集合的特点： *  1、元素可以重复 *  2、元素有序 *  3、可以使用索引操作元素 * * 方法摘要 * * 增： *  void add(int index, E element) *           在列表的指定位置插入指定元素（可选操作）。 *  boolean addAll(int index, Collection&lt;? extends E> c) *           将指定 collection 中的所有元素都插入到列表中的指定位置（可选操作）。 * * 查： *  E get(int index) *           返回列表中指定位置的元素。 *  int indexOf(Object o) *           返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。 *  int lastIndexOf(Object o) *           返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。 *  ListIterator&lt;E> listIterator() *           返回此列表元素的列表迭代器（按适当顺序）。 *  ListIterator&lt;E> listIterator(int index) *           返回列表中元素的列表迭代器（按适当顺序），从列表的指定位置开始。 * * 删： *  E remove(int index) *           移除列表中指定位置的元素（可选操作）。 *  boolean remove(Object o) *           从此列表中移除第一次出现的指定元素（如果存在）（可选操作）。 * 改： *  E set(int index, E element) *           用指定元素替换列表中指定位置的元素（可选操作）。 * * 其它方法： *  List&lt;E> subList(int fromIndex, int toIndex) *           返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        test01();</span><span class="token comment">//        test02();</span><span class="token comment">//        test03();</span><span class="token comment">//        test04();</span>        <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 其它方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * List&lt;E> subList(int fromIndex, int toIndex)        *           返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。        */</span>        <span class="token class-name">List</span> list1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [88,199]</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 改</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * Object set(int index, E element)        *           用指定元素替换列表中指定位置的元素。        *           返回旧元素（被替换的元素）        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改前："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被替换的元素:"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改后："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * 下来完成： List元素冒泡排序        */</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除指定索引位置的元素，返回被删除的元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除前："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被删除的元素："</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除后："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除前："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除元素2</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除后："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * Object get(int index) 返回列表中指定位置的元素。        * 要求： index &lt; size  否则抛出IndexOutOfBoundsException        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用普通for循环遍历list</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------indexOf-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        *  int indexOf(Object o)        *           返回此列表中第一次出现的指定元素的索引；如果元素不存在，则返回 -1。        * int lastIndexOf(Object o)        *           返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 增</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * add(int index, E element): 在指定索引位置添加元素        *   要求：index &lt;= size  否则抛出IndexOutOfBoundsException        */</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [100,88,99]</span>        <span class="token class-name">List</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  [100,3,5,88,99]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="List元素冒泡排序"><a href="#List元素冒泡排序" class="headerlink" title="List元素冒泡排序"></a>List元素冒泡排序</h4><hr><h4 id="listIterator迭代器接口"><a href="#listIterator迭代器接口" class="headerlink" title="listIterator迭代器接口"></a>listIterator迭代器接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ListIterator</span><span class="token punctuation">;</span><span class="token comment">/** *  ListIterator&lt;E> listIterator() *           返回此列表元素的列表迭代器（按适当顺序）。 *  ListIterator&lt;E> listIterator(int index) *           返回列表中元素的列表迭代器（按适当顺序），从列表的指定位置开始。 * *  ListIterator接口： *     public interface ListIterator&lt;E>  extends Iterator&lt;E> *    列表迭代器，允许程序员按任一方向遍历列表、迭代期间修改列表，并获得迭代器在列表中的当前位置。 * * 方法摘要： *  void add(E e) *           将指定的元素插入列表（可选操作）。 *  boolean hasNext() *           以正向遍历列表时，如果列表迭代器有多个元素，则返回 true（换句话说，如果 next 返回一个元素而不是抛出异常，则返回 true）。 *  boolean hasPrevious() *           如果以逆向遍历列表，列表迭代器有多个元素，则返回 true。 *  E next() *           返回列表中的下一个元素。 *  E previous() *           返回列表中的前一个元素。 *  void remove() *           从列表中移除由 next 或 previous 返回的最后一个元素（可选操作）。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        test01();</span>        <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//                it.add(99);</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="研究迭代器的注意细节【ConcurrentModificationException-并发修改异常】"><a href="#研究迭代器的注意细节【ConcurrentModificationException-并发修改异常】" class="headerlink" title="研究迭代器的注意细节【ConcurrentModificationException 并发修改异常】"></a>研究迭代器的注意细节【ConcurrentModificationException 并发修改异常】</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ListIterator</span><span class="token punctuation">;</span><span class="token comment">/** * 研究迭代器的注意细节： * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        test01();</span>        <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//此时迭代器指向的是第一个元素</span>                it<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//被添加到迭代器之前(离头近的地方) 即用next()是访问不到的,要用previous才能访问的到</span>                <span class="token comment">//输出结果：[99,1,2,3,4,5]</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">/*             * java.util.ConcurrentModificationException 并发修改异常             * 这个异常大家需要记住异常原因。但是重点是你们要看懂我是如何去查找异常原因的。             * 出现该异常的原因：             *   【next()方法】会调用checkCoModifaction()方法检测modCount和expectedModCount的值是否一样，             * 如果值不一样就会抛出ConcurrentModificationException 并发修改异常。             *             * 集合中元素添加和删除modCount的值都会++，但是expectedModCount只会在创建迭代器的时间初始化一次，值为modCount的值；             * 以下的代码在迭代的过程中使用集合添加了元素，modCount的变化了；但是expectedModCount还是原来的值，所以两个值不相等，抛出异常             *             * 所以：             *  使用迭代器遍历元素的时候，不能使用集合添加和删除元素；但是可以使用迭代器添加和删除元素             *  使用foreach遍历元素的时候，不能使用集合添加和删除元素。[因为foreach也是迭代器]             */</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//                list.add(99);</span>                it<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E5%B9%B6%E5%8F%91%E4%BF%AE%E6%94%B9%E5%BC%82%E5%B8%B8.png"></p><hr><h4 id="Arraylist接口"><a href="#Arraylist接口" class="headerlink" title="Arraylist接口"></a>Arraylist接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * 数据接口： 就是数据存储的方式 * * ArrayList类特点： * 1. List接口的实现类 * 2. 底层的数据结构是：动态数组 * 数组的特点： *     a. 数组在内存是一段地址连续的空间 *     b. 长度固定，改变长度需要新建数组 * 3. 增加和删除数据效率低，查询和修改的效率高 * 4. 线程不安全，安全性低，效率高 * * * 构造方法摘要 * ArrayList() *           构造一个初始容量为 10 的空列表。 * ArrayList(Collection c) *           构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。 *           可以将其它集合转成List * ArrayList(int initialCapacity) *           构造一个具有指定初始容量的空列表。 * * * ArrayList类没有独有的方法需要掌握，都是使用List和Collection中的方法。 * * ArrayList的扩容机制： *    int newCapacity = oldCapacity + (oldCapacity >> 1); *    新容量 = 旧容量的1.5倍 * * 以上扩容机制的弊端： *    每次扩容的是旧容量的1.5倍，可能会造成空间的浪费 *    比如： *       旧容量=10，存储11个元素，扩容=15，有4个浪费 * * * ArrayList也不能无限扩容，最大容量= Integer.MAX_VALUE - 8 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//  构造一个初始容量为 10 的空列表。</span>        <span class="token comment">//  也就是ArrayList底层数组的长度是10</span>        <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * size()是集合中元素的个数；不是底层数组的长度        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当元素个数超过底层数组的长度，此时ArrayList会自动扩容</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="DAY20"><a href="#DAY20" class="headerlink" title="DAY20"></a>DAY20</h3><h4 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token comment">/** * * LinkedList类： *  1. List接口的实现类；同时还实现了Deque（双端队列）接口 *  2. 底层数据结构是： 双向链表 *  3. 增加和删除效率高，查询和修改效率低 *  4. 线程不安全，安全性低，效率高 * *  注意： LinkedList集合需要扩容么？ 不需要扩容 * *   之前在ArrayList中讲过，ArrayList的弊端，可能会浪费空间。 *     就是增加的元素只比旧容量多几个数据，此时就会浪费空间，这种情况下怎么处理呢？ *     1. 如果可以事先预估元素的多少，那么可以使用 new ArrayList(自定义的容量) *     2. 如果不能预估元素的多少，可以使用LinkedList来解决空间浪费 * *  今天我们只需要掌握 List接口和Collection接口中的方法 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LinkedList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------foreach-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历list  -- foreach</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------迭代器-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历list  -- 迭代器</span>        <span class="token class-name">Iterator</span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------使用索引-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历list  -- 迭代器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="数据结构之链表"><a href="#数据结构之链表" class="headerlink" title="数据结构之链表"></a>数据结构之链表</h4><ol><li><strong>链表是由节点链接而成的</strong></li><li><strong>链表在内存中不是一段连续的内存空间，添加一个节点就在内存中新开一个空间存储Node节点</strong></li></ol><p><img src="/images/note_images/%E9%93%BE%E8%A1%A8.png"></p><hr><h4 id="Vector类"><a href="#Vector类" class="headerlink" title="Vector类"></a>Vector类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Vector</span><span class="token punctuation">;</span><span class="token comment">/** * Vector类： *    向量类 *  1. List接口的实现类 *  2. 底层数据结构：动态数组 *  3. 增加和删除效率低；查询和修改效率高 *  4. 线程安全的，安全性高，效率低 *  在开发中需要线程安全的集合时，我们基本上也不会使用Vector,而是使用其它方式将集合变成线程安全的。 *  目前在开发中Vector用的越来越少了，就是因为其效率不高。 * * 构造方法摘要 * Vector() *           构造一个空向量，使其内部数据数组的大小为 10，其标准容量增量为零。 * Vector(Collection  c) *           构造一个包含指定 collection 中的元素的向量，这些元素按其 collection 的迭代器返回元素的顺序排列。 * Vector(int initialCapacity) *           使用指定的初始容量和等于零的容量增量构造一个空向量。 * Vector(int initialCapacity, int capacityIncrement) *           使用指定的初始容量和容量增量构造一个空的向量。 * * capacityIncrement就是容量的增量 * * Vector的扩容机制： *   int newCapacity = oldCapacity + ((capacityIncrement > 0) ? capacityIncrement : oldCapacity); *   1. 如果容量的增量capacityIncrement不大于0，新容量 = oldCapacity的2倍 *   2. 如果容量的增量capacityIncrement>0 ，新容量 = oldCapacity + capacityIncrement * * *  也不能无限制的扩容，最大限制是Integer.MAX_VALUE - 8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 构造一个空向量，使其内部数据数组的大小为 10，其标准容量增量为零。</span>        <span class="token class-name">Vector</span> vector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="泛型——genericity"><a href="#泛型——genericity" class="headerlink" title="泛型——genericity"></a>泛型——genericity</h4><ul><li><strong>注意： 只有引用数据类型才能作为泛型。</strong></li><li><strong>泛型的作用：约束集合中元素的数据类型，将元素类型的检测从运行时提升到编译时。</strong></li><li><strong>当成添加的元素不满足泛型约束的类型，代码编译报错。</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token comment">/** * 泛型（genericity）： *  泛型： 又叫参数化类型，就是将引用数据类型作为参数了。所以泛型也有形参和实参。 *  泛型的形参：仅仅表示这是一个泛型，没有具体的数据类型 *         可以用任意的标识符表示，一般使用T E K V *  泛型的实参：就是一种具体的引用数据类型，作用是给泛型的形参赋值 * * *  泛型的语法格式：&lt;泛型形参> *  泛型类：class 类名&lt;泛型>&#123;&#125; * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将集合中的元素转成大写</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            * 泛型的引入：            *            * 因为集合中元素的类型是Object类型，所以将Object转成String            * 但是集合中元素除了String外，还有其它的数据类型，所以此时代码在            * 运行的时候抛出类转换异常：ClassCastException            * 这样就降低了代码的健壮性。            *            * 因为ClassCastException是运行时异常，也就是说我们的代码要运行起来之后，我们才能发现问题。            * 那么为了提高代码的健壮性，我们能不能将问题在代码编译的时候就暴露出来，编译时出现问题，代码是            * 编译不通过，我们立马就可以发现问题，这样就不用等到代码写完了都开始运行了才出现问题。            *            *            * 所以java提供了泛型机制，泛型就可以约束元素的数据类型了。            *            */</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>            <span class="token class-name">String</span> upperCase <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>upperCase<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="子类继承泛型类"><a href="#子类继承泛型类" class="headerlink" title="子类继承泛型类"></a>子类继承泛型类</h4><ol><li><p><strong>可以指定泛型父类中泛型的具体类型 – 不推荐</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArryList</span> <span class="token keyword">extends</span> <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方式有弊端：<strong>子类的元素类型固定死了，不灵活。</strong></p></li><li><p><strong>子类也是泛型类 – 推荐</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArryList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>泛型类中的泛型什么时候有具体的数据类型？也就是这个泛型形参什么时候有泛型实参？</strong></p><ul><li><p>创建该类对象的时候；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        * 这里就是创建MyList泛型类的对象，所以此时可以指定泛型的实参        * MyList&lt;Integer> 中的Integer就是一种具体的数据类型，是泛型的实参        * 所以此时MyList中元素就只能是Integer类型了        */</span>        <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 钻石语法</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加String类型的元素，代码编译就会报错</span><span class="token comment">//        list.add("java");</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子类继承泛型类的时候 – 但是不推荐</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArryList</span> <span class="token keyword">extends</span> <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>    <span class="token comment">//这种方法有弊端：就是子类的元素类型固定死了，不灵活</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>语法：</strong></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//泛型类：class 类名&lt;泛型形参>&#123;&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">E</span> e<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e=== "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/*  MyList&lt;E> 这里的E就是泛型的形参  就意味着MyList中可以是任意的引用数据类型    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><ul><li><strong>注意： interface CustomList<String> 这里的String只是一个泛型形参的名字，和T,E是一样，不是String类。</String></strong></li></ul><ol><li><p><strong>泛型接口中的泛型形参什么时候有具体的数据类型?</strong></p><ul><li><p>实现类实现泛型接口的时候，可以写泛型实参  – 不推荐</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomList</span> <span class="token keyword">implements</span> <span class="token class-name">CustomList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>    <span class="token comment">//弊端： 实现类中元素的类型固定死了，不灵活</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>实现类是泛型类，创建实现类对象的时候指定具体的数据类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">CustomList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">MyCustomList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 泛型接口： *   interface 接口名&lt;泛型形参>      */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> add <span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomListDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyCustomList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCustomList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hava"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 匿名内部类</span>        <span class="token keyword">new</span> <span class="token class-name">CustomList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><ol><li><p><strong>泛型方法：就是方法的定义上一定有 &lt;泛型的形参&gt; 的方法才是泛型方法。</strong></p></li><li><p><strong>泛型在定义的时候都是形参，给泛型赋值的时候就是实参。</strong></p></li><li><p><strong>泛型方法的语法格式：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 <span class="token operator">&lt;</span>泛型<span class="token operator">></span> 返回值类型  方法名（参数列表）<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>泛型方法中泛型什么时候有具体的数据类型？</strong></p><ul><li>调用方法的时候通过实参的数据类型来决定具体的数据类型</li></ul></li><li><p><strong>注意：静态方法使用泛型，那么该方法必须是泛型方法。</strong></p></li><li><p>eg：</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Demo01</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> demo01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo01</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里传入String,所以泛型方法中的T就是String</span>        demo01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里传入Integer,所以泛型方法中的T就是Integer</span>        demo01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * div中的泛型受方法中泛型的约束，和泛型类中的泛型无关        */</span>        demo01<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo01<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t== "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**    *  泛型方法中的泛型名称和泛型类或泛型接口中的泛型名称同名，使用就近原则     *  也就是泛型泛型方法中用的是方法中定义的泛型    */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"div---e== "</span> <span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**    *  这不是泛型方法，所以E就是泛型类中的泛型    */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"multi---e== "</span> <span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 静态方法使用泛型，那么该方法必须是泛型方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e= "</span><span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h4><ol><li><p>泛型通配符 ?</p><ul><li><strong>&lt;?&gt; 这里的？就是泛型通配符</strong></li></ul></li><li><p><strong>泛型通配符?：表示所有的泛型实参，就是说？可以表示泛型所有的具体类型</strong></p></li><li><p><strong><E> 这里的E表示的是泛型的形参</E></strong></p></li><li><p><strong>泛型通配符主要配合泛型的限定来使用</strong></p></li><li><p><strong>注意： 如果创建泛型类对象的时候，泛型的实参使用的是？，那么只能调用没有使用泛型类中泛型的方法</strong></p><ul><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里的？表示所有的实参,不是具体的某一个，而是全部</span>        <span class="token class-name">MySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * capture of ?  类型捕获，因为？不是具体的某一个，而是全部的具体类型        * 所以使用add(E e )的时候 e的类型是无法捕获的，所以不能传入具体的值。        * 所以此时add方法无法调用        * 注意： 如果创建泛型类对象的时候，泛型的实参使用的是？，那么只能调用没有使用泛型类中泛型的方法        */</span><span class="token comment">//        set.add(100);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e== "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>泛型的限定：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">上限：  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> 表示？只能是<span class="token class-name">T</span>类及其子类下限：  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> 表示？只能是<span class="token class-name">T</span>类及其父类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>泛型限定的演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Fu</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Zi</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 演示泛型的限定： * * 泛型的限定： *  上限： *     &lt;? extends T> 表示？只能是T类及其子类 *  下限： *     &lt;? super T> 表示？只能是T类及其父类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Demo02</span> demo02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo02<span class="token punctuation">.</span><span class="token function">method01</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list01<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo02<span class="token punctuation">.</span><span class="token function">method02</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        demo02<span class="token punctuation">.</span><span class="token function">method02</span><span class="token punctuation">(</span>list01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fu</span><span class="token punctuation">></span></span> list02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list02<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Zi</span><span class="token punctuation">></span></span> list03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list03<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Zi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list04 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list04<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 上限</span><span class="token comment">//        demo02.method03(list); // error</span>        demo02<span class="token punctuation">.</span><span class="token function">method03</span><span class="token punctuation">(</span>list02<span class="token punctuation">)</span><span class="token punctuation">;</span>        demo02<span class="token punctuation">.</span><span class="token function">method03</span><span class="token punctuation">(</span>list03<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        demo02.method03(list04);// error</span>        <span class="token comment">// 下限</span><span class="token comment">//        demo02.method04(list);// error</span>        demo02<span class="token punctuation">.</span><span class="token function">method04</span><span class="token punctuation">(</span>list02<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        demo02.method04(list03);// error</span>        demo02<span class="token punctuation">.</span><span class="token function">method04</span><span class="token punctuation">(</span>list04<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 上限     * list参数只能接受元素类型是Fu及其子类的     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method03</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Fu</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Fu</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 下限     * list参数只能接受元素类型是Fu及其父类的     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method04</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Fu</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="泛型擦除——Generic-erasure"><a href="#泛型擦除——Generic-erasure" class="headerlink" title="泛型擦除——Generic erasure"></a>泛型擦除——Generic erasure</h4><ol><li><p><strong>源代码中使用的泛型，在经过编译后，代码中就看不到泛型，也就是所谓的泛型擦除</strong></p></li><li><p><strong>泛型擦除不是泛型丢失了，而是在编译后的字节码文件中使用单独的标识来存储泛型了。</strong></p></li><li><p><strong>java代码编译前会代码进行校验，代码能够通过校验说明，代码语法是没有问题的，所以编译的时候可以擦除泛型。</strong></p><ul><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>以上代码可以校验通过，说明集合中的元素一定是符合泛型的类型的，所以此时编译擦除泛型不受影响<span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>eg：</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token comment">/** * 泛型擦除（Generic erasure）： * *   为什么会出现泛型擦除,主要是为了编译器的兼容性。 *     在jdk5之前是没有泛型的，jdk5之后出现了泛型，为了编译器的兼容性，在编译代码的时候就 *     将泛型擦除了，这样就和之前没有泛型的时候编译一样了。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="自定义的ArrayList"><a href="#自定义的ArrayList" class="headerlink" title="自定义的ArrayList"></a>自定义的ArrayList</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * 自定义的ArrayList * - 底层使用数组 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * ArrayList底层的数据结构，用来存储元素     */</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>    <span class="token comment">/**     * 用来保存元素的数量     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment">// 默认的数组容量</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAUALT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>DEFAUALT_CAPACITY<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 指定数组的初始容量     */</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * size是数组中已经存在的数据         * 所以我们只需要判断下一个元素的空间是否足够即可         */</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * size是从0开始的，数组的索引也是从0开始的         * 所以往集合的末尾添加数据就可以使用size作为索引         */</span>        elements<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">checkIndexRangeForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 添加数据到指定位置，数组中原有的数据需要移动位置，那么数据需要移动呢？         *   从索引index到size -1 的数据都需要往后移动         *         *   移动数据应该从最后一个开始移动，所以循环条件如下         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            elements<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        elements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 以下的循环是为了GC         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/**         * 只需要size=0, 集合中的元素就获取不到了         */</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkIndexRange</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elements<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkIndexRange</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> old <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elements<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 删除指定位置的元素，就是将指定位置后面的元素向前移动一位，就可以         * 就需要删除的元素覆盖         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            elements<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        elements<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> old<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 大家下来后自己完成     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkIndexRange</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> old <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elements<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        elements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> old<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 扩容方法     * @param minCapacity 需要的最小容量     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">/**         * 当需要的最小容量大于旧容量时，就需要扩容         */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minCapacity <span class="token operator">></span> oldCapacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 新容量</span>            <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建新数组</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 将旧数组中的值复制到新数组中</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                newElements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">/*            * 我们新建的数组，但是在ArrayList中操作的数组是成员变量elements            * 这个数组，所以需要将新数组赋值给elements            */</span>            elements <span class="token operator">=</span> newElements<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 检查索引的范围     * @param index 索引     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkIndexRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"index："</span><span class="token operator">+</span> index<span class="token operator">+</span><span class="token string">",size:"</span><span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 检查add方法索引的范围     * @param index 索引     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkIndexRangeForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"index："</span><span class="token operator">+</span> index<span class="token operator">+</span><span class="token string">",size:"</span><span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 遍历数组的元素时，只获取存入的元素，所以范围是size         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span> <span class="token operator">+</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        list.add(5,100);</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10,8,100,2,33]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="自定义的LinkedList"><a href="#自定义的LinkedList" class="headerlink" title="自定义的LinkedList"></a>自定义的LinkedList</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义LinkedList * - 底层是双向链表 * * 注意： 编写链表的实现一定要主要边界的检查 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 元素的个数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment">// 头节点</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> first<span class="token punctuation">;</span>    <span class="token comment">// 尾节点</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> last<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkIndexRangeForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 往末尾添加</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">// 获取原来末尾的旧节点</span>           <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> oldLast <span class="token operator">=</span> last<span class="token punctuation">;</span>           <span class="token comment">// 创建添加元素的节点</span>           <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>oldLast<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>oldLast <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// index = size = 0</span>                first <span class="token operator">=</span> last <span class="token operator">=</span> node<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               oldLast<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           last <span class="token operator">=</span> node<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>           <span class="token comment">// 查找到index索引处原来的节点</span>           <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> oldNode <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev <span class="token operator">=</span> oldNode<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>           <span class="token comment">// 创建添加元素的节点</span>           <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>element<span class="token punctuation">,</span>prev<span class="token punctuation">,</span>oldNode<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               first <span class="token operator">=</span> node<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>               prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           oldNode<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        first <span class="token operator">=</span> last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkIndexRange</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>element <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span>  i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span>  i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 自己下来完成</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkIndexRange</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> old <span class="token operator">=</span> node<span class="token punctuation">.</span>element<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> old<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 检查索引的范围     * @param index 索引     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkIndexRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"index："</span><span class="token operator">+</span> index<span class="token operator">+</span><span class="token string">",size:"</span><span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 检查add方法索引的范围     * @param index 索引     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkIndexRangeForAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"index："</span><span class="token operator">+</span> index<span class="token operator">+</span><span class="token string">",size:"</span><span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token operator">+</span> node<span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查找指定位置的节点     * @param index 指定位置     * @return 返回Node     */</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> node<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token comment">/**             * 循环表示向下查找几次             */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token comment">/**             * 循环表示向前查找几次             */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 双向链表的节点     * @param &lt;E> 节点中元素的数据类型     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token comment">// 节点中的数据</span>        <span class="token keyword">private</span> <span class="token class-name">E</span> element<span class="token punctuation">;</span>        <span class="token comment">// 前一个节点的地址</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>        <span class="token comment">// 下一个节点的地址</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="自定义的list接口"><a href="#自定义的list接口" class="headerlink" title="自定义的list接口"></a>自定义的list接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义的List接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 向列表的尾部添加指定的元素     * @param e 添加的元素     * @return true     */</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     *  在列表的指定位置插入指定元素     * @param index 指定位置     * @param element 指定元素     */</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     *  从列表中移除所有元素     */</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 如果列表包含指定的元素，则返回 true。     * @param o 指定的元素     * @return true-包含，false-不包含     */</span>    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 返回列表中指定位置的元素     * @param index 指定位置     * @return 返回的元素     */</span>    <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。     * @param o 指定元素     * @return 返回的索引,不存在就是-1     */</span>    <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 如果列表不包含元素，则返回 true。     * @return 有元素就是false；没有元素就true     */</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 移除列表中指定位置的元素     * @param index 指定位置     * @return 被删除的元素     */</span>    <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 从此列表中移除第一次出现的指定元素     * @param o 指定元素     * @return true     */</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 用指定元素替换列表中指定位置的元素     * @param index 指定位置     * @param element 指定元素     * @return 被替换的元素     */</span>    <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 返回列表中的元素数。     * @return 元素的数量     */</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="队列——Queue：先进先出（FIFO）"><a href="#队列——Queue：先进先出（FIFO）" class="headerlink" title="队列——Queue：先进先出（FIFO）"></a>队列——Queue：先进先出（FIFO）</h4><ol><li><p><strong>队列结构可以使用数组或链表来实现</strong></p></li><li><p><strong>双端队列：deque 是 “double ended queue (双端队列) “ 的缩写。</strong></p></li><li><p><strong>双端队列中入口也是出口，出口也是入口。</strong></p></li><li><p><strong>java中LinkedList就是Deque的实现类。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><hr><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ol><li><p>特点：后进先出（LIFO），先进后出（FILO）– First In Last Out</p></li><li><p>栈结构可以使用数组或链表来实现。</p><ul><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 入栈，在头部添加元素     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 出栈，返回头部元素，并且从栈中删除     * @return 返回头部元素     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * peek 瞟一眼，只会查看栈头部元素，不会删除     * @return 返回头部元素     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>p8</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h3 id="DAY21"><a href="#DAY21" class="headerlink" title="DAY21"></a>DAY21</h3><h4 id="Set接口——HashSet类"><a href="#Set接口——HashSet类" class="headerlink" title="Set接口——HashSet类"></a>Set接口——HashSet类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token comment">/** * Set接口 *   是Collection接口的子接口 *   特点： 元素不能重复；元素是否有序和实现类有关 * * HashSet类： *   HashSet是Set接口的实现类。 *   特点： *   1. 元素不能重复 *   2. 元素无序的，特别是它不保证该顺序恒久不变 *   3. 底层的数据结构是HashMap&lt;K，V>,HashMap的底层是哈希表 *      HashSet中的元素作为了HashMap的key *   4. 线程不安全，安全性低，效率高 * *   哈希表：散列表（Hash table，也叫哈希表），是根据关键码值(Key)而直接进行访问的数据结构。 *   也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。 * *   哈希表是一个数组 * *   哈希表中的数据会产生哈希冲突（碰撞）。 *   哈希冲突（碰撞）： *     1. 不同的key，hashCode值一样；hashCode值一样在哈希表中的索引就一样，这就是哈希冲突。 *     2. 不同的key，hashCode值不一样，也可能计算出来的索引值一样，这就是哈希冲突。 * *   所以我们要尽可能的减少hash冲突。所以我们在覆写hashCode函数的时候，都要做到尽可能的减少hashCode值一样。 * *   哈希表增删查改效率都高。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(set1);</span>        <span class="token comment">/*        * hashCode()值是int类型        *        * Integer的hashCode值就是数据本身        * Long的hashCode计算公式： (int)(value ^ (value >>> 32));        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">3.14f</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 1314 = 1 * 10 ^ 3 + 3 * 10 ^ 2 + 1 * 10 ^ 1 + 4 * 10 ^ 0         * java = j * n ^ 3 + a * n ^ 2 + v * n ^ 1 + a * n ^ 0         * n 在计算机中使用31         * java = j * 31 ^ 3 + a * 31 ^ 2 + v * 31 ^ 1 + a * 31 ^ 0         *      = （j * 31 ^ 2 + a * 31 + v ）* 31 + a         *      = ((j * 31  +  a  ) * 31 + v) * 31 + a         */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自定义对象的hashCode,需要我们自己重写hashCode()</span>        <span class="token comment">/*        *  &amp; 运算        * 需求：怎么将int数组得到0-9的值        * 1. 模运算        * 2. &amp;运算,还能保证结果是正数        *        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">21</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">210</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">223</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        *  9  ---    00001001        *                                  11111111        *      &amp;  0000000 0000000 00000000 00001001        *        */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E5%93%88%E5%B8%8C%E8%A1%A8.png"></p><hr><h4 id="HashSet是如何去重的？"><a href="#HashSet是如何去重的？" class="headerlink" title="HashSet是如何去重的？"></a>HashSet是如何去重的？</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token comment">/** * HashSet是如何去重的？ *  根据元素的hashCode值计算出对应的索引 *         索引值不同：也就意味着数据在hash表的不同位置上，此时直接存储 *         索引值相同：说明数据要在相同的位置上存储，此时需要调用equals()判断该位置上是否已经存在相同内容的元素 *              equals结果为true: 覆盖数据 *              equals结果为false: 直接存储 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="研究：自定义对象如何根据内容去重？"><a href="#研究：自定义对象如何根据内容去重？" class="headerlink" title="研究：自定义对象如何根据内容去重？"></a>研究：自定义对象如何根据内容去重？</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token comment">/** *  研究：自定义对象如何根据内容去重 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetDemo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * HashSet的去重原理：         *   根据hashCode计算索引位置         *        索引不同： 直接存储         *        索引相同：调用equals判断内容         *                 内容相同：覆盖内容         *                 内容不同：直接存储         *         *  以下代码会先根据元素Student对象的hashCode()计算索引         *  对象的hashCode()如果没有覆写，结果是对象的地址值转换得到，现在元素全部是new         *  的，所以地址值一定不一样，所以hashCode值一定不一样         *         *  hashCode值不一样，索引有可能会一样，此时会调用equals函数。         *  对象的equals函数如果没有覆写，默认比较的是地址值。所以内容不同，直接存储         *         *         *  HashSet中自定义对象如何根据内容去重？         *    覆写hashCode()和eqausls()         *         *         */</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashSet</span><span class="token punctuation">;</span><span class="token comment">/** * LinkedHashSet类是HashSet的子类 *   底层是 链表+哈希表 *   特点： 元素唯一且有序;线程不安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashSetDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> integer <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="覆写HashCode的原则"><a href="#覆写HashCode的原则" class="headerlink" title="覆写HashCode的原则"></a>覆写HashCode的原则</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 覆写hashCode的原则：尽可能降低hash冲突 * * 降低hash冲突就会减少equals的比较次数 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 对象的hashCode值根据内容得到     */</span>    <span class="token keyword">return</span> age <span class="token operator">*</span> <span class="token number">31</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="TreeSet类"><a href="#TreeSet类" class="headerlink" title="TreeSet类"></a>TreeSet类</h4><ol><li><p>TreeSet类：</p><ul><li>TreeSet类是Set接口的实现类</li><li>TreeSet元素不重复</li><li>TreeSet底层数据结构是TreeMap;TreeMap的底层是红黑树</li><li>红黑树是一种自平衡的二叉树，左右子树的高度不能高过2。</li><li>TeeSet的作用：是对元素进行排序。</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeSet</span><span class="token punctuation">;</span><span class="token comment">/** * http://www.cs.usfca.edu/~galles/visualization/Algorithms.html */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSetDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 自然顺序进行排序</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 自然顺序进行排序。</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         *  java中的包装类和String都已经实现了自然排序接口Comparable         */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="TreeSet排序的方式有两种"><a href="#TreeSet排序的方式有两种" class="headerlink" title="TreeSet排序的方式有两种"></a>TreeSet排序的方式有两种</h4><ol><li><p><strong>使用自然排序接口（Comparable）实现排序</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/*   自然排序接口Comparable&lt;T>： *     int compareTo(T o) 比较方法 *       返回值 *            0：表示相等 *          负数：表示小于 *          正数： 表示大小 */</span><span class="token comment">/* *  自然排序的弊端： *   1. 自然排序和元素类耦合在一起，排序规则变化就需要修改元素类的源码 *   这违背了面向对象的开发原则：OCP原则 *   OCP原则： 对扩展开放；对修改关闭 *   *   2. 由于代码耦合，所以当出现多种排序要求的时候，Comparable接口就不好处理的。 *      所以Comparable排序只适合做只有一种排序要求的情况。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>使用比较器排序接口（Comparator）实现排序</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*比较器排序Comparator: *  Comparator&lt;T>接口： *      int compare(T o1, T o2) : 比较方法 *      返回值 *           0：表示相等 *         负数：表示小于 *         正数： 表示大小 *    Comparator&lt;T>接口的比较方法中有两个对象，这两个对象就是需要比较的对象。 *    既然两个对象在参数中已经有了，所以不需要用元素类实现Comparator接口，所以 *    Comparator接口做到了和元素类的解耦。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>比较器排序的优点：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   1. 和需要比较的元素类是解耦的*   2. 满足OCP原则*   3. 可以做多种排序需求；一种排序需求就创建一个对应的Comparator的实现类（策略设计模式）*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>使用哪一种排序具体取决于使用的构造方法。</strong></p></li></ol><hr><h4 id="TreeSet存储自定义对象——按照员工的年龄升序【自然排序】"><a href="#TreeSet存储自定义对象——按照员工的年龄升序【自然排序】" class="headerlink" title="TreeSet存储自定义对象——按照员工的年龄升序【自然排序】"></a>TreeSet存储自定义对象——按照员工的年龄升序【自然排序】</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeSet</span><span class="token punctuation">;</span><span class="token comment">/** * 实现自然排序 */</span><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Worker&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 比较方法     * 比较对象一个是this,一个是参数     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*         * 编写比较规则，注意主要条件和辅助条件         * 主要条件就是需求中给出来的条件，这里就是 按照员工的年龄升序         * 辅助条件需要自己找，怎么找？         *   辅助条件的作用是用来区分不同的对象，所以找能够区分不同对象的字段所谓辅助条件         * 这里id应该就是唯一的，所以可以用来做辅助条件。         *         * 注意： 如果一个字段不能区分唯一性，可以使用多个字段来区分         *         * 所以编写比较规则的时候，先比较主要条件，当主要条件的结果是0的时候，再次比较辅助条件。         *         */</span>        <span class="token comment">// 先比较主要条件</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> o<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token comment">// 当主要条件的结果是0的时候，再次比较辅助条件。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">-</span> o<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * TreeSet存储自定义对象 * * 需求： 按照员工的年龄升序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSetDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * java.lang.ClassCastException: com.powernode.p2.Worker cannot be cast to java.lang.Comparable         * 出现类转换异常的原因：         *   TreeSet的作用是对元素进行排序，这里使用的是TreeSet无参构造，也就是使用自然排序Comparable接口排序，         * 但是Worker没有实现Comparable接口，所以抛出以上的错误。         *         * 元素没有实现Comparable接口，也就是没有告诉TreeSet，元素按照什么规则排序。         * 所以我们需要实现Comparable接口，覆写比较方法，实现比较规则         *         *         */</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">"韩梅梅"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Worker</span> worker <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="使用比较器排序接口-Comparator-实现排序"><a href="#使用比较器排序接口-Comparator-实现排序" class="headerlink" title="使用比较器排序接口(Comparator)实现排序"></a>使用比较器排序接口(Comparator)实现排序</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token comment">/** * 演示：使用比较器排序接口(Comparator)实现排序 * 需求：  1 按照年龄升序  -- 创建ComparatorForAsc比较器 *        2 按照年龄降序 -- 创建ComparatorForDesc比较器 */</span><span class="token comment">/** * 年龄升序的比较器 */</span><span class="token keyword">class</span> <span class="token class-name">ComparatorForAsc</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> o1<span class="token punctuation">,</span> <span class="token class-name">Cat</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 主要条件： 年龄升序</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 辅助条件： 判断name是否相同</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 按照年龄降序的比较器 */</span><span class="token keyword">class</span> <span class="token class-name">ComparatorForDesc</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> o1<span class="token punctuation">,</span> <span class="token class-name">Cat</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 主要条件： 年龄升序</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 辅助条件： 判断name是否相同</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Cat&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSetDemo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过构造函数使用比较器排序接口</span><span class="token comment">//        TreeSet&lt;Cat> set = new TreeSet&lt;>(new ComparatorForAsc());</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComparatorForDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"黑猫警长"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"波斯猫"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"狸花猫"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span> cat <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token comment">/** * HashMap类 * 1. HashMap是Map接口的实现类 * 2. 底层是哈希表的数据结构 * 3. 线程不安全的，安全性低，效率高 * 4. 允许使用 null 值和 null 键 * * java中的hash表是一个元素是链表的数组。 * 问题1：hash表中的数组初始容量是多少？ *     hash表中的数组初始容量是 16 *     hash表的容量必须是2的幂次方（MUST be a power of two.）。为什么？ *       因为jdk中HashMap计算hash表的索引是使用的 &amp;(len-1)。如果不是2的幂次方，就会出现空间的浪费。 * * 问题2：hash表中的数组怎么扩容？ *        newCap = oldCap &lt;&lt; 1 *        新容量 = 旧容量的2倍 *        容量必须满足：&lt;= 2的30次方 * * 问题3： 什么时候会扩容？ *         HashMap中有一个默认的负载因子是0.75；负载因子的作用是Map集合的一个阈值。 *         也就说当Map中的元素达到 容量*0.75的时候就会扩容了 *         比如： 16 * 0.75 = 12的时候就会扩容了。 *         负载因子是一个时间和空间上的都相对比较好的值。 *         负载因子太小，浪费空间 *         负载因子太大，会增加哈希冲突的风险，操作数据的效率会受影响 * */</span><span class="token comment">/** * 实现自然排序 */</span><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Worker&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 比较方法     * 比较对象一个是this,一个是参数     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*         * 编写比较规则，注意主要条件和辅助条件         * 主要条件就是需求中给出来的条件，这里就是 按照员工的年龄升序         * 辅助条件需要自己找，怎么找？         *   辅助条件的作用是用来区分不同的对象，所以找能够区分不同对象的字段所谓辅助条件         * 这里id应该就是唯一的，所以可以用来做辅助条件。         *         * 注意： 如果一个字段不能区分唯一性，可以使用多个字段来区分         *         * 所以编写比较规则的时候，先比较主要条件，当主要条件的结果是0的时候，再次比较辅助条件。         *         */</span>        <span class="token comment">// 先比较主要条件</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> o<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token comment">// 当主要条件的结果是0的时候，再次比较辅助条件。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">-</span> o<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Worker</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"第一名"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"zhansgan"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"第二名"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Worker</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Worker</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Hashtable和HashMap比较"><a href="#Hashtable和HashMap比较" class="headerlink" title="Hashtable和HashMap比较"></a>Hashtable和HashMap比较</h4><ol><li>两者的数据结构都是哈希表</li><li>HashMap可以使用null作为键或值，Hashtable不能</li><li>HashMap线程不安全，效率高；Hashtable线程安全，效率低。</li></ol><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Hashtable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashtableDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Hashtable不能使用null作为键或值</span>        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="LinkedHashMap——底层是链表-哈希表"><a href="#LinkedHashMap——底层是链表-哈希表" class="headerlink" title="LinkedHashMap——底层是链表+哈希表"></a>LinkedHashMap——底层是链表+哈希表</h4><ul><li><p><strong>保证key的有序性和唯一性</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMapDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token comment">/** * Map接口 * 1. Map接口中的数据是KV格式 * 2. Map中Key是唯一的；Value可以重复 *     说明Map接口中的数据结构只对Key有效。 * * * 方法摘要 * 增： *   V put(K key, V value) *            将指定的值与此映射中的指定键关联（可选操作）。 *   void putAll(Map&lt;? extends K,? extends V> m) *            从指定映射中将所有映射关系复制到此映射中（可选操作）。 * 删： *    V remove(Object key) *            如果存在一个键的映射关系，则将其从此映射中移除（可选操作）。 *    void clear() *            从此映射中移除所有映射关系（可选操作）。 * 查： *   boolean containsKey(Object key) *       如果此映射包含指定键的映射关系，则返回 true。 *   boolean containsValue(Object value) *           如果此映射将一个或多个键映射到指定值，则返回 true。 *   Set&lt;Map.Entry&lt;K,V>> entrySet() *           返回此映射中包含的映射关系的 Set 视图。 *   V get(Object key) *            返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 null。 *   Set&lt;K> keySet() *             返回此映射中包含的键的 Set 视图 *  Collection&lt;V> values() *            返回此映射中包含的值的 Collection 视图。 * * 改： *   V put(K key, V value) *             将指定的值与此映射中的指定键关联（可选操作） *   V replace(K key, V value) *             将指定的值与此映射中的指定键关联 * 其它方法： *  boolean isEmpty() *           如果此映射未包含键-值映射关系，则返回 true。 *  int size() *           返回此映射中的键-值映射关系数。 * * * * 嵌套接口： *    static interface Map.Entry&lt;K,V> *                           映射项（键-值对）。 * Entry接口： *    映射项（键-值对）。 * 方法摘要 ： *  K getKey() *           返回与此项对应的键。 *  V getValue() *           返回与此项对应的值。 *  V setValue(V value) *           用指定的值替换与此项对应的值（可选操作）。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        test01();</span><span class="token comment">//        test02();</span><span class="token comment">//        test03();</span><span class="token comment">//        test04();</span>        <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 其它方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 改</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将key为2的数据修改成php</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 底层是put</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// containsKey(Object key)： 查询key是否存在</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// containsValue(Object value)： 查询value是否存在</span>        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * V get(Object key): 根据指定的key获取value        */</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------keySet----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * Set&lt;K> keySet(): 获取所有的key        */</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span><span class="token string">"-->"</span><span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*        * Collection&lt;V> values(): 获取所有的values        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------values----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------entrySet------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * Entry叫做映射项，就是kv键值对，map中将kv键值对封装成了Entry对象        *      所以获取到Entry对象就可以拿到k和v        * Set&lt;Map.Entry&lt;K,V>> entrySet()： 获取所有的Entry对象        *        */</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//            System.out.println(entry);</span><span class="token comment">//            System.out.println(entry.getKey() + "--->" + entry.getValue());</span>            <span class="token class-name">Integer</span> key <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                entry<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"测试数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除前："</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> v <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除的元素是："</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除后："</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空数据</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 增</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回被覆盖的值</span>         s <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  key相同就会覆盖原来的值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// java</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;1=c++&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/Map%E6%8E%A5%E5%8F%A3.png"></p><hr><h4 id="Collections类——集合的工具类"><a href="#Collections类——集合的工具类" class="headerlink" title="Collections类——集合的工具类"></a>Collections类——集合的工具类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token comment">/** * Collections类： 集合的工具类 * * 常用方法： *  static &lt;T> boolean addAll(Collection&lt;? super T> c, T... elements) *           将所有指定元素添加到指定 collection 中。 * *  static &lt;T> int binarySearch(List&lt;? extends Comparable&lt;? super T>> list, T key) *           使用二分搜索法搜索指定列表，以获得指定对象。 * *  static &lt;T> void fill(List&lt;? super T> list, T obj) *           使用指定元素替换指定列表中的所有元素。 * *  static void reverse(List&lt;?> list) *           反转指定列表中元素的顺序。 * *  static void shuffle(List&lt;?> list) : 洗牌，就是将集合中的元素打乱 * *  static &lt;T extends Comparable&lt;? super T>> void sort(List&lt;T> list) *           根据元素的自然顺序 对指定列表按升序进行排序。 * * static &lt;T> void sort(List&lt;T> list, Comparator&lt;? super T> c) *           根据指定比较器产生的顺序对指定列表进行排序。 * * static void swap(List&lt;?> list, int i, int j) *           在指定列表的指定位置处交换元素。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionsDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// addAll(Collection&lt;? super T> c, T... elements)</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// binarySearch(List&lt;? extends Comparable&lt;? super T>> list, T key)</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// fill(List&lt;? super T> list, T obj)</span><span class="token comment">//        Collections.fill(list,100);</span><span class="token comment">//        System.out.println(list);</span>        <span class="token comment">// reverse(List&lt;?> list)</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// shuffle(List&lt;?> list)</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将list的元素降序</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// swap(List&lt;?> list, int i, int j)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交换前："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交换后："</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="TreeMap类"><a href="#TreeMap类" class="headerlink" title="TreeMap类"></a>TreeMap类</h4><ol><li><p>TreeMap是Map接口的实现类</p></li><li><p>TreeMap底层是红黑树</p></li><li><p>红黑树的数据结构是约束key的</p></li><li><p>TreeMap的作用：可以对Map中的Key排序</p></li><li><p><strong>排序方式两种：</strong></p><ul><li>自然比较排序（Comparable接口）</li><li>比较器排序（Comparator接口）</li></ul><p><strong>注意：使用什么排序，具体取决于使用的构造方法。</strong></p></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeMap</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Dog&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 按照年龄升序     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> o<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeeMapDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 自然比较排序: 对key排序</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 自然比较排序（Comparable接口）         * 使用无参构造的TreeMap，那么Key值必须实现Comparable接口         */</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"阿黄"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"土狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"土狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"来福"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"土狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * 比较器排序（Comparator接口）        * 按照年龄降序        */</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> o1<span class="token punctuation">,</span> <span class="token class-name">Dog</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> age <span class="token operator">=</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> age<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"阿黄"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"土狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"土狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"来福"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"土狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><img src="/images/note_images/%E7%BA%A2%E9%BB%91%E6%A0%91.png"></p><hr><h4 id="IO流的引入"><a href="#IO流的引入" class="headerlink" title="IO流的引入"></a>IO流的引入</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 1. IO的引入： *   目前我们的数据都在内存中存储的。程序一旦退出，数据就丢失了。所以我们需要将数据能持久化存储。 *   数据要持久化存储就需要将数据以文件的方式保存到硬盘上，这样数据才能持久化存储。 *   要将数据写入文件中；或者从文件中读取数据，就需要使用IO流。 * *   我们平常使用的文件复制就需要使用IO流，复制过程就是文件数据的读写过程。 *   如果文件复制是网络之间的，那么这就是下载。 * * 2. IO流： *    IO: Input和Output  输入和输出 *    流（Stream）: 数据流。连续不断的数据。 * * *  3. IO流的分类 *   根据流向的不同分为： *     输入流：读数据，将数据读取到程序中 *     输出流：写数据，将程序中的数据写到文件 * *    根据操作数据的不同分为： *      字节流：按照字节为单位读写数据 *      字符流：按照字符为单位读写数据 * *   基于以上的分类，就可以得到java中的四大基本抽象流： *    字节输入流（InputStream）: 按照字节为单位读数据 *    字节输出流（OutputStream）: 按照字节为单位写数据 *    字符输入流（Reader):按照字符为单位读数据 *    字符输出流（Writer):按照字符为单位写数据 * * *    刚学IO流大家会觉得有难度，这个难度并不是api很难；而是IO流的种类太多，大家不知道 *    该选择哪个流来使用。 *    怎么办？ 所以要求大家学习IO流的时候，一定要自己总结。（推荐使用思维导图来总结），把每一种 *    流的功能和特点总结对比。这样你才能根据功能和特点结合实际业务需求进行选择。 * * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IODemo</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/IO%E6%B5%81%E7%9A%84%E6%96%B9%E5%90%91.png"></p><p><img src="/images/note_images/java%E4%B8%ADIO%E7%9A%84%E8%AF%BB%E5%86%99.png"></p><hr><h3 id="DAY22"><a href="#DAY22" class="headerlink" title="DAY22"></a>DAY22</h3><h4 id="OutputStream-字节输出流【FileOutputStream文件字节输出流】"><a href="#OutputStream-字节输出流【FileOutputStream文件字节输出流】" class="headerlink" title="OutputStream 字节输出流【FileOutputStream文件字节输出流】"></a>OutputStream 字节输出流【FileOutputStream文件字节输出流】</h4><ul><li>表示输出字节流的所有类的超类。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * 方法摘要 *  void close() *           关闭此输出流并释放与此流有关的所有系统资源。 *  void write(byte[] b) *           将 b.length 个字节从指定的 byte 数组写入此输出流。 *  void write(byte[] b, int off, int len) *           将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。 *  void write(int b) *           将指定的字节写入此输出流。 * * * FileOutputStream类 - 文件字节输出流 *  1. OutputStream的子类 *  2. 作用： 写数据到文件中（以字节为单位） * * 构造方法摘要 * FileOutputStream(File file) *           创建一个向指定 File 对象表示的文件中写入数据的文件输出流。 * FileOutputStream(File file, boolean append) *           创建一个向指定 File 对象表示的文件中写入数据的文件输出流。 * FileOutputStream(String name) *           创建一个向具有指定名称的文件中写入数据的输出文件流。 * FileOutputStream(String name, boolean append) *           创建一个向具有指定 name 的文件中写入数据的输出文件流。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1. 创建对象</span>            <span class="token comment">/*             *   创建FileOutputStream对象的时候             *         append为false: 无论文件是否已经存在，都会根据指定的文件路径创建文件。             *         append为true:  如果文件存在，就在文件中追加；如果文件不存在，会根据指定的文件路径创建文件。             *   然后将输出流就可以操作该文件             *             * 注意细节：             *  1. FileOutputStream构造中传入的是文件路径，不能传入目录路径             *  2. 如果传入的文件路径中，目录不存在会抛出FileNotFoundException             */</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2. 让对象干活  -- 写数据</span>            <span class="token comment">// 单字节写数据</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * 字节流是不会乱码的，这里的数据写入后，记事本打开后乱码了            * 是因为我们自己将中文的一个字节写入，而不是完整写入，造成的乱码            * 这是我们的问题，不是字节流的问题。            */</span><span class="token comment">//            fos.write(-27);</span><span class="token comment">//            fos.write('a');</span>            <span class="token comment">// 需求： 往文件中写入97这两个数字</span><span class="token comment">//            fos.write(57);</span><span class="token comment">//            fos.write(55);</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 3. 释放系统资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="FileOutputStream流，按照字节数组写数据"><a href="#FileOutputStream流，按照字节数组写数据" class="headerlink" title="FileOutputStream流，按照字节数组写数据"></a>FileOutputStream流，按照字节数组写数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * FileOutputStream流，按照字节数组写数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1. 创建对象</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D://b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2. 让对象干活 -- 写数据</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"welcome to chengdu"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 按照字节数组写数据  -- 写入字节数组的所有数据</span><span class="token comment">//            fos.write(bytes);</span>            <span class="token comment">// 按照字节数组写数据  -- 写入字节数组的一部分数据</span>            <span class="token comment">/*            * write(byte b[], int off, int len)            * 第一个参数：写入的字节数组            * 第二个参数： 偏移量，数组的索引是从0开始的，偏移量也是从0开始的，所以可以理解成索引            *            也就是从哪个索引开始写数据            * 第三个参数： 写入的长度,也就是写多少个字节的数据            */</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// com</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 3. 释放资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 不是必需的</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="InputStream-字节输入流【FileInputStrem-文件字节输入流】"><a href="#InputStream-字节输入流【FileInputStrem-文件字节输入流】" class="headerlink" title="InputStream 字节输入流【FileInputStrem 文件字节输入流】"></a>InputStream 字节输入流【FileInputStrem 文件字节输入流】</h4><ul><li>此抽象类是表示字节输入流的所有类的超类。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * 方法摘要 *  int available() *           返回此输入流下一个方法调用可以不受阻塞地从此输入流读取（或跳过）的估计字节数。 *  void close() *           关闭此输入流并释放与该流关联的所有系统资源。 *  int read() *           从输入流中读取数据的下一个字节。 *           返回值：读取到的数据字节；如果已到达文件末尾，则返回 -1。 *  int read(byte[] b) *           从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。 *           将数据先读取缓冲在字节数组b中。 *           返回：读入缓冲区的字节总数，如果因为已经到达文件末尾而没有更多的数据，则返回 -1。 *  int read(byte[] b, int off, int len) *           将输入流中最多 len 个数据字节读入 byte 数组。 * * FileInputStream文件字节输入流 *  1. 是InputStream的子类 *  2. 作用： 读取文件中的数据（以字节为单位） * *  注意： 输入流和输出流是对应的 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1. 创建对象</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2. 让对象干活 -- 读数据</span>            <span class="token comment">// 单字节读数据,返回的是读取到的是数据字节</span><span class="token comment">//            int b = fis.read();</span><span class="token comment">//            System.out.println(b);</span><span class="token comment">//            b = fis.read();</span><span class="token comment">//            System.out.println(b);</span><span class="token comment">//            b = fis.read();</span><span class="token comment">//            System.out.println(b);</span><span class="token comment">//            b = fis.read();</span><span class="token comment">//            System.out.println(b);</span><span class="token comment">//            b = fis.read();</span><span class="token comment">//            System.out.println(b);</span><span class="token comment">//            b = fis.read();</span><span class="token comment">//            System.out.println(b);</span><span class="token comment">//            while(true)&#123;</span><span class="token comment">//                int b = fis.read();</span><span class="token comment">//                if(b == -1)&#123;</span><span class="token comment">//                    break;</span><span class="token comment">//                &#125;</span><span class="token comment">//                System.out.println((char)b);</span><span class="token comment">//            &#125;</span>            <span class="token keyword">int</span> b<span class="token punctuation">;</span> <span class="token comment">// 用来接受读取到的数据字节</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 3. 释放资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="FileInputStream按照字节数组读数据"><a href="#FileInputStream按照字节数组读数据" class="headerlink" title="FileInputStream按照字节数组读数据"></a>FileInputStream按照字节数组读数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： FileInputStream按照字节数组读数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 按照字节数组读取数据             * int read(byte b[]): 将数据读取缓存在字节数组b中             * 参数：就是我们自己定义的字节数组，用作缓冲区，缓存数据             * 返回值：读取到的字节总数             *             * 缓冲区的大小建议： 1024-8192             * 值推荐写 2的幂次方             */</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// 读取到的字节总数</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="使用文件字节流复制文件"><a href="#使用文件字节流复制文件" class="headerlink" title="使用文件字节流复制文件"></a>使用文件字节流复制文件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * 使用文件字节流复制文件 * 分析： * 1. 创建文件字节输入流 * 2. 创建文件字节输出流 * 3. 读取源文件数据 * 4. 将读取到的数据写入目标文件 * 5. 释放资源 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyFileDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> src <span class="token operator">=</span> <span class="token string">"D:\\video\\116.面向对象基础_匿名对象的概述.avi"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> dest <span class="token operator">=</span> <span class="token string">"E://aa.avi"</span><span class="token punctuation">;</span><span class="token comment">//        copyFileByByte(src,dest);</span>        <span class="token function">copyFileByByteArray</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 按照字节数组复制文件     * @param src 源文件路径     * @param dest 目标文件路径     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFileByByteArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span><span class="token class-name">String</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1. 创建文件字节输入流</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2. 创建文件字节输出流</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3. 读取源文件数据</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//  4. 将读取到的数据写入目标文件</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//  5. 释放资源, 后使用的先关闭</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 单字节方式复制文件     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFileByByte</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span><span class="token class-name">String</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1. 创建文件字节输入流</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2. 创建文件字节输出流</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3. 读取源文件数据</span>            <span class="token keyword">int</span> b<span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//  4. 将读取到的数据写入目标文件</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//  5. 释放资源, 后使用的先关闭</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Writer——字符输出流的抽象类"><a href="#Writer——字符输出流的抽象类" class="headerlink" title="Writer——字符输出流的抽象类"></a>Writer——字符输出流的抽象类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 在计算机中所有的数据都是字节，所以读写数据的时候也是读写的字节数据 * 想要读写字符数据，就需要将字节数据转成字符。 * 所以： *    字符流 = 字节流 + 字符编码; * *  Writer类： *     字符输出流的抽象类。 * 方法摘要 * *  void close() *           关闭此流，但要先刷新它。 *  void flush() *           刷新该流的缓冲。 *  void write(char[] cbuf) *           写入字符数组。 *  void write(char[] cbuf, int off, int len) *           写入字符数组的某一部分。 *  void write(int c) *           写入单个字符。 *  void write(String str) *           写入字符串。 *  void write(String str, int off, int len) *           写入字符串的某一部分。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="OutputStreamWriter-—-转换流【字符流通向字节流的桥梁】"><a href="#OutputStreamWriter-—-转换流【字符流通向字节流的桥梁】" class="headerlink" title="OutputStreamWriter — 转换流【字符流通向字节流的桥梁】"></a>OutputStreamWriter — 转换流【字符流通向字节流的桥梁】</h4><ol><li>是Writer的子类</li><li>作用：按照字符写数据</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 构造方法摘要* OutputStreamWriter(OutputStream out)*           创建使用默认字符编码的 OutputStreamWriter。* OutputStreamWriter(OutputStream out, Charset cs)*           创建使用给定字符集的 OutputStreamWriter。* OutputStreamWriter(OutputStream out, CharsetEncoder enc)*           创建使用给定字符集编码器的 OutputStreamWriter。* OutputStreamWriter(OutputStream out, String charsetName)*           创建使用指定字符集的 OutputStreamWriter。**/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStreamWriter</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OutputStreamWriter</span> writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 字符流 = 字节流 + 字符编码;</span>            writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D://word.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 单个字符写入</span>            <span class="token comment">// 字符输出流的数据写到字符缓冲了</span><span class="token comment">//            writer.write('我');</span>            <span class="token comment">// 按照字符数组写数据</span>            <span class="token comment">// windows上的换行使用\r\n</span><span class="token comment">//            writer.write("我爱北京天安门\r\n".toCharArray());</span>            <span class="token comment">// 直接写字符串</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你说什么呢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将字符缓冲中的数据刷写出去</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符流关闭的时候也会刷写字符缓冲中的数据</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="Reader-——-字符输入流的抽象类"><a href="#Reader-——-字符输入流的抽象类" class="headerlink" title="Reader —— 字符输入流的抽象类"></a>Reader —— 字符输入流的抽象类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 方法摘要 * void close() *           关闭该流并释放与之关联的所有资源。 *  int read() *           读取单个字符。 *  int read(char[] cbuf) *           将字符读入数组。 *  int read(char[] cbuf, int off, int len) *           将字符读入数组的某一部分。 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="InputStreamReader类-–-转换流【字节流通向字符流的桥梁】"><a href="#InputStreamReader类-–-转换流【字节流通向字符流的桥梁】" class="headerlink" title="InputStreamReader类 – 转换流【字节流通向字符流的桥梁】"></a>InputStreamReader类 – 转换流【字节流通向字符流的桥梁】</h4><ol><li>是Reader的子类</li><li>作用：就是按照字符读数据</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span><span class="token comment">/** * 构造方法摘要 * InputStreamReader(InputStream in) *           创建一个使用默认字符集的 InputStreamReader。 * InputStreamReader(InputStream in, Charset cs) *           创建使用给定字符集的 InputStreamReader。 * InputStreamReader(InputStream in, CharsetDecoder dec) *           创建使用给定字符集解码器的 InputStreamReader。 * InputStreamReader(InputStream in, String charsetName) *           创建使用指定字符集的 InputStreamReader。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * 使用InputStreamReader读取数据的时候，编码格式要和文件的编码格式一致             * 否则中文乱码             *             * 这里没有指定字符编码，使用的是当前运行环境的默认编码             */</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 单字符读取</span>            <span class="token comment">/*            int c;            while((c = reader.read()) != -1)&#123;                System.out.print((char)c);            &#125;            */</span>            <span class="token comment">// 字符数组读取</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// 存储读取到的字符总数</span>            <span class="token comment">/*            * 定义字符缓冲，大小推荐： 1024-8192            */</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>reader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="设置字符流的编码格式"><a href="#设置字符流的编码格式" class="headerlink" title="设置字符流的编码格式"></a>设置字符流的编码格式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： 设置字符流的编码格式 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * 使用InputStreamReader读取数据的时候，编码格式要和文件的编码格式一致             * 否则中文乱码             *             * 手动指定字符编码格式             */</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>reader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.png"></p><hr><h4 id="字符流的便捷类："><a href="#字符流的便捷类：" class="headerlink" title="字符流的便捷类："></a>字符流的便捷类：</h4><h5 id="一、FileReader类"><a href="#一、FileReader类" class="headerlink" title="一、FileReader类"></a>一、FileReader类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** FileReader类：*     public class FileReader extends InputStreamReader*     用来读取字符文件的便捷类**构造方法摘要* FileReader(File file)*           在给定从中读取数据的 File 的情况下创建一个新 FileReader。* FileReader(String fileName)*           在给定从中读取数据的文件名的情况下创建一个新 FileReader。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="二、FileWriter类"><a href="#二、FileWriter类" class="headerlink" title="二、FileWriter类"></a>二、FileWriter类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/***FileWriter类：*     public class FileWriter extends OutputStreamWriter*     用来写入字符文件的便捷类** 构造方法摘要* FileWriter(File file)*           根据给定的 File 对象构造一个 FileWriter 对象。* FileWriter(File file, boolean append)*           根据给定的 File 对象构造一个 FileWriter 对象。* FileWriter(String fileName)*           根据给定的文件名构造一个 FileWriter 对象。* FileWriter(String fileName, boolean append)*           根据给定的文件名以及指示是否附加写入数据的 boolean 值来构造 FileWriter 对象。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="三、字符流的便捷类的结论"><a href="#三、字符流的便捷类的结论" class="headerlink" title="三、字符流的便捷类的结论"></a>三、字符流的便捷类的结论</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * 综上得到一个结论： *  便捷类的便捷体现在： *   1. 创建对象的时候不需要传入字节流了。便捷类会自动创建文件字节流 *   2. 创建对象的时候不需要传入字符编码了。便捷类会自动使用默认编码 * *   便捷类的弊端： *     就是不灵活了。无法手动指定其它类型的字节流；也无法指定其它字符编码 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//       test01();</span>       <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * FileReader构造中会自动创建FileInputStream对象，无法更改             * 自动使用默认的字符编码，，无法更改             *             * 所以：FileReader只能用于文件编码和运行环境默认编码格式一样的情况下             */</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D://a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>reader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * FileWriter构造中自动创建了FileOutputStream对象，无法更改             * 自动使用默认的字符编码，无法更改             */</span>            writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D://w.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"来了，老弟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="使用字符流复制文件，直接使用字符数组的方式读写数据"><a href="#使用字符流复制文件，直接使用字符数组的方式读写数据" class="headerlink" title="使用字符流复制文件，直接使用字符数组的方式读写数据"></a>使用字符流复制文件，直接使用字符数组的方式读写数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * 使用字符流复制文件，直接使用字符数组的方式读写数据 * * 结论： *   因为计算中所有的数据都是字节，所以按照字节读取是没有问题的 *   1. 字节流是万能流，什么文件都可以操作 *   2. 字符流不是万能的，什么文件才能使用字符流操作？ *       如果文件使用操作系统的记事本打开后不乱码，就可以使用字符流操作。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyFileByCharDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStreamWriter</span> writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * 字符流拷贝图片，图片会损坏             */</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://mm.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"E://meinv.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>reader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="根据功能的不同流分为"><a href="#根据功能的不同流分为" class="headerlink" title="根据功能的不同流分为"></a>根据功能的不同流分为</h4><h5 id="一、节点流-—-普通流：真正读写数据的流"><a href="#一、节点流-—-普通流：真正读写数据的流" class="headerlink" title="一、节点流 — 普通流：真正读写数据的流"></a>一、节点流 — 普通流：真正读写数据的流</h5><h5 id="二、处理流-—-包装流-x2F-包裹流"><a href="#二、处理流-—-包装流-x2F-包裹流" class="headerlink" title="二、处理流 — 包装流&#x2F;包裹流"></a>二、处理流 — 包装流&#x2F;包裹流</h5><h5 id="三、缓冲流-—-也是一种处理流，增加了缓冲区【BufferedOutputStream-—-字节缓冲输出流】"><a href="#三、缓冲流-—-也是一种处理流，增加了缓冲区【BufferedOutputStream-—-字节缓冲输出流】" class="headerlink" title="三、缓冲流 — 也是一种处理流，增加了缓冲区【BufferedOutputStream — 字节缓冲输出流】"></a>三、缓冲流 — 也是一种处理流，增加了缓冲区【BufferedOutputStream — 字节缓冲输出流】</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * 根据功能的不同流分为： *  节点流（普通流）：真正读写数据的流。 --- 真正干活的 *  处理流（包装流/包裹流）：是对节点流的封装，也就是在节点流的基础上增加新的功能。但是读写数据还是使用节点流。 * *  缓冲流： *    缓冲流是一种处理流，在节点流的基础上增加了功能（增加了缓冲区） * * *  BufferedOutputStream： 字节缓冲输出流 *    该类实现缓冲的输出流。通过设置这种输出流，应用程序就可以将各个字节写入底层输出流中，而不必针对每次字节写入调用底层系统。 * * 构造方法摘要： * BufferedOutputStream(OutputStream out) *           创建一个新的缓冲输出流，以将数据写入指定的底层输出流。 * BufferedOutputStream(OutputStream out, int size) *           创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * 字节缓冲流的构造函数中需要接收一个字节流（节点流）             * 所以缓冲流就会在接收的节点流上包装一个缓冲区             *             * 默认缓冲区的大小是8192字节             */</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D://out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 单字节写数据 -- 数据写入缓冲区了</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  刷写缓冲区中的数据</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">/*                    * 关闭缓冲流，也会刷写缓冲区中的数据                    **/</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>字节缓冲输出流单字节写数据的原理</strong></li></ul><p><img src="/images/note_images/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E8%BE%93%E5%87%BA%E6%B5%81%E5%8D%95%E5%AD%97%E8%8A%82%E5%86%99%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8E%9F%E7%90%86.png"></p><ul><li><strong>节点流和缓冲流的对比</strong></li></ul><p><img src="/images/note_images/%E8%8A%82%E7%82%B9%E6%B5%81%E5%92%8C%E7%BC%93%E5%86%B2%E6%B5%81%E7%9A%84%E5%AF%B9%E6%AF%94.png"></p><hr><h4 id="BufferedOutputStream按照字节数组写数据"><a href="#BufferedOutputStream按照字节数组写数据" class="headerlink" title="BufferedOutputStream按照字节数组写数据"></a>BufferedOutputStream按照字节数组写数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： BufferedOutputStream按照字节数组写数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * 字节缓冲流的构造函数中需要接收一个字节流（节点流）             * 所以缓冲流就会在接收的节点流上包装一个缓冲区             *             * 默认缓冲区的大小是8192字节             */</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D://out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 按照字节数组写数据</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"abcdeabcde"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  刷写缓冲区中的数据</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">/*                     * 关闭缓冲流，也会刷写缓冲区中的数据                     **/</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>字节缓冲输出流字节数组写数据的原理</strong></li></ul><p><img src="/images/note_images/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E8%BE%93%E5%87%BA%E6%B5%81%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E5%86%99%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8E%9F%E7%90%86.png"></p><hr><h4 id="BufferedInputStream-字节缓冲输入流"><a href="#BufferedInputStream-字节缓冲输入流" class="headerlink" title="BufferedInputStream 字节缓冲输入流"></a>BufferedInputStream 字节缓冲输入流</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * BufferedInputStream 字节缓冲输入流 *   BufferedInputStream 为另一个输入流添加一些功能，即缓冲输入以及支持 mark 和 reset 方法的能力。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 单字节读</span>            <span class="token keyword">int</span> b <span class="token punctuation">;</span>            <span class="token comment">/**             * BufferedInputStream单字节读数据的流程：             *  1. 现将数据读取最多8192个字节到缓冲区中             *  2. 然后从缓冲区中一个字节一个字节的获取出来             *             *  所以这里的单字节获取数据是从缓冲区中获取。             */</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>字节缓冲输入流单字节读取数据</strong></p><p><img src="/images/note_images/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E8%BE%93%E5%85%A5%E6%B5%81%E5%8D%95%E5%AD%97%E8%8A%82%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE.png"></p></li></ul><hr><h4 id="BufferedInputStream-按照字节数组读取数据"><a href="#BufferedInputStream-按照字节数组读取数据" class="headerlink" title="BufferedInputStream 按照字节数组读取数据"></a>BufferedInputStream 按照字节数组读取数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * BufferedInputStream 按照字节数据读取 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">/**             * BufferedInputStream按照字节数组读取数据的流程：             * 1. 读取最多8192个字节的数据到缓冲区中             * 2. 从缓冲区中通过数组拷贝的方式将数据拷贝到我们自定的字节数组bs             */</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>字节缓冲输入流字节数组读取数据</strong></li></ul><p><img src="/images/note_images/%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E8%BE%93%E5%85%A5%E6%B5%81%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE.png"></p><hr><h4 id="使用缓冲流的好处"><a href="#使用缓冲流的好处" class="headerlink" title="使用缓冲流的好处"></a>使用缓冲流的好处</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * 使用缓冲流的好处： * 1. 减少对磁盘的操作，提升效率。（节点流也可以做到） * 2. 站在代码的设计角度考虑，使用了装饰设计模式，降低代码的使用难度 * 3. 支持mark和reset方法 -- 了解 * * 缓冲流的底层原理：大家目前了解即可 * 重点是读写数据操作 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyFileDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> src <span class="token operator">=</span> <span class="token string">"D:\\video\\116.面向对象基础_匿名对象的概述.avi"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> dest <span class="token operator">=</span> <span class="token string">"E://aa.avi"</span><span class="token punctuation">;</span>        <span class="token function">copyFileByByteArray</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 耗时：42</span><span class="token comment">//        copyFileByBufferByteArray(src,dest);// 耗时：46</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 字节缓冲流按照字节数组复制文件     * @param src 源文件路径     * @param dest 目标文件路径     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFileByBufferByteArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span><span class="token class-name">String</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//  4. 将读取到的数据写入目标文件</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 节点流按照字节数组复制文件     * @param src 源文件路径     * @param dest 目标文件路径     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFileByByteArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span><span class="token class-name">String</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1. 创建文件字节输入流</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2. 创建文件字节输出流</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3. 读取源文件数据</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//  4. 将读取到的数据写入目标文件</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//  5. 释放资源, 后使用的先关闭</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="BufferedWrite类-—-字符缓冲输出流"><a href="#BufferedWrite类-—-字符缓冲输出流" class="headerlink" title="BufferedWrite类 — 字符缓冲输出流"></a>BufferedWrite类 — 字符缓冲输出流</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * BufferedWriter类 - 字符缓冲输出流 *     将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。 *     该类提供了 newLine() 方法，写入一个行分隔符。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D://abc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 单字符写</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">'嗨'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写入一个换行符</span>            <span class="token comment">// 字符数组写数据</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你来了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 字符串写入</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"那我下班了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 注意： 字符流和缓冲流必须flush</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="BufferedReader类-—-字符缓冲输入流"><a href="#BufferedReader类-—-字符缓冲输入流" class="headerlink" title="BufferedReader类 — 字符缓冲输入流"></a>BufferedReader类 — 字符缓冲输入流</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * BufferedReader类 -- 字符缓冲输入流 *    从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。 *    String readLine(): 读取一个文本行。 *       包含该行内容的字符串，不包含任何行终止符，如果已到达流末尾，则返回 null */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D://abc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 单个字符读取</span>            <span class="token comment">/*            int b;            while((b = reader.read()) != -1)&#123;                System.out.print((char)b);            &#125;            */</span>            <span class="token comment">// 字符数组读取</span>            <span class="token comment">/*            int len;            char[] cs = new char[1024];            while((len = reader.read(cs)) != -1)&#123;                System.out.print(new String(cs,0,len));            &#125;            */</span>            <span class="token comment">// 按行读取</span>            <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>reader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><h5 id="一、PrintStream-—-字节打印流"><a href="#一、PrintStream-—-字节打印流" class="headerlink" title="一、PrintStream — 字节打印流"></a>一、PrintStream — 字节打印流</h5><h5 id="二、PrintWrite-—-字符打印流"><a href="#二、PrintWrite-—-字符打印流" class="headerlink" title="二、PrintWrite — 字符打印流"></a>二、PrintWrite — 字符打印流</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * 打印流： *  打印流只有输出流，没有输入流；也分为字节打印流和字符打印流 *  打印流也是一种包装流 * * 1. PrintStream-字节打印流 * 构造方法摘要 * PrintStream(File file) *           创建具有指定文件且不带自动行刷新的新打印流。 * PrintStream(OutputStream out) *           创建新的打印流。 * PrintStream(OutputStream out, boolean autoFlush) *           创建新的打印流。 * PrintStream(String fileName) *           创建具有指定文件名称且不带自动行刷新的新打印流。 * * * 2. PrintWriter-字符打印流 * 构造方法摘要 * PrintWriter(File file) *           使用指定文件创建不具有自动行刷新的新 PrintWriter。 * PrintWriter(OutputStream out) *           根据现有的 OutputStream 创建不带自动行刷新的新 PrintWriter。 * PrintWriter(OutputStream out, boolean autoFlush) *           通过现有的 OutputStream 创建新的 PrintWriter。 * PrintWriter(String fileName) *           创建具有指定文件名称且不带自动行刷新的新 PrintWriter。 * PrintWriter(Writer out) *           创建不带自动行刷新的新 PrintWriter。 * PrintWriter(Writer out, boolean autoFlush) *           创建新 PrintWriter。 * * 与 PrintStream 类不同，如果启用了自动刷新，则只有在调用 println、printf 或 format 的其中一个方法时才可能完成此操作。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deme01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        test01();</span>        <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// PrintWriter</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果启用了自动刷新，则只有在调用 println、printf 或 format 的其中一个方法时才可能完成此操作</span>            writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D://out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">988</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// PrintStream</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 如果传入的不是字节缓冲输出流，那么autoFlush参数没有意义         */</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            ps  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D://ps.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 往文件中写入数据100</span>            <span class="token comment">/*             *  注意： print打印数据，除了char[]是内容外，其它的所有数组都是地址值             *             */</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'1'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="标准输入-amp-输出流"><a href="#标准输入-amp-输出流" class="headerlink" title="标准输入&amp;输出流"></a>标准输入&amp;输出流</h4><ul><li>计算机中标准输入设备：键盘；</li><li>标准输出设备：屏幕。</li><li>标准输入流作用就是接收键盘输入的数据</li><li>标准输出流作用就是输出数据到屏幕</li></ul><p><strong>System类：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">PrintStream</span> err          <span class="token comment">//“标准”错误输出流。</span><span class="token keyword">static</span> <span class="token class-name">InputStream</span> in          <span class="token comment">//“标准”输入流。</span><span class="token keyword">static</span> <span class="token class-name">PrintStream</span> out          <span class="token comment">//“标准”输出流。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 接收键盘输入的数据</span>        <span class="token comment">/**         * 使用 System.in 接收键盘输入的数据分析：         * 1. System.in是字节流，字节流转中文对我们来说比较麻烦，涉及编码格式。         * 所以字符流操作字符串数据更方便。         *         * 2. 字符流有节点流和缓冲流。字节流读取只能单个字符或字符数组读取；缓冲流可以按行读取         * 所以这里使用缓冲流更方便         */</span>        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="DataOutputStream-—-数据输出流"><a href="#DataOutputStream-—-数据输出流" class="headerlink" title="DataOutputStream — 数据输出流"></a>DataOutputStream — 数据输出流</h4><ul><li><strong>数据流：只有字节流没有字符流。</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * 数据流： 只有字节流没有字符流 * DataOutputStream - 数据输出流 * *     数据输出流允许应用程序以适当方式将基本 Java 数据类型写入输出流中。然后，应用程序可以使用数据输入流将数据读入。 * *     DataOutputStream 就数据转成字节（二进制）写入文件。 * *     序列化： 就是将数据转字节的过程 *     反序列化：将字节转数据的过程 * *  注意： 数据保存和传输是需要序列化的 * * 方法摘要 *  void writeBoolean(boolean v) *           将一个 boolean 值以 1-byte 值形式写入基础输出流。 *  void writeByte(int v) *           将一个 byte 值以 1-byte 值形式写出到基础输出流中。 *  void writeChar(int v) *           将一个 char 值以 2-byte 值形式写入基础输出流中，先写入高字节。 *  void writeDouble(double v) *           使用 Double 类中的 doubleToLongBits 方法将 double 参数转换为一个 long 值，然后将该 long 值以 8-byte 值形式写入基础输出流中，先写入高字节。 *  void writeFloat(float v) *           使用 Float 类中的 floatToIntBits 方法将 float 参数转换为一个 int 值，然后将该 int 值以 4-byte 值形式写入基础输出流中，先写入高字节。 *  void writeInt(int v) *           将一个 int 值以 4-byte 值形式写入基础输出流中，先写入高字节。 *  void writeLong(long v) *           将一个 long 值以 8-byte 值形式写入基础输出流中，先写入高字节。 *  void writeShort(int v) *           将一个 short 值以 2-byte 值形式写入基础输出流中，先写入高字节。 *  void writeUTF(String str) *           以与机器无关方式使用 UTF-8 修改版编码将一个字符串写入基础输出流。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D://data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * writeInt 将int数据按照每一个字节写入，int会写入四个字节             */</span>            dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span><span class="token number">3.14f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">13.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"你好啊"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="DataInputStream-—-数据输入流"><a href="#DataInputStream-—-数据输入流" class="headerlink" title="DataInputStream — 数据输入流"></a>DataInputStream — 数据输入流</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * DataIntputStream - 数据输入流 *    数据输入流允许应用程序以与机器无关方式（因为数据是字节）从底层输入流中读取基本 Java 数据类型。 *    应用程序可以使用数据输出流写入稍后由数据输入流读取的数据。 * * 方法摘要 * *  boolean readBoolean() *           参见 DataInput 的 readBoolean 方法的常规协定。 *  byte readByte() *           参见 DataInput 的 readByte 方法的常规协定。 *  char readChar() *           参见 DataInput 的 readChar 方法的常规协定。 *  double readDouble() *           参见 DataInput 的 readDouble 方法的常规协定。 *  float readFloat() *           参见 DataInput 的 readFloat 方法的常规协定。 *  int readInt() *           参见 DataInput 的 readInt 方法的常规协定。 *  long readLong() *           参见 DataInput 的 readLong 方法的常规协定。 *  short readShort() *           参见 DataInput 的 readShort 方法的常规协定。 *  String readUTF() *           参见 DataInput 的 readUTF 方法的常规协定。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * 注意： 读数据和写数据的顺序必须一致。否则数据就是错的             */</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="DAY23"><a href="#DAY23" class="headerlink" title="DAY23"></a>DAY23</h3><h4 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h4><ul><li><p>对象流只有字节流，没有字符流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span><span class="token punctuation">;</span><span class="token comment">/** * 对象流 *   对象流只有字节流，没有字符流 * * 1. ObjectOutputStream类：-- 对象序列化流 *   ObjectOutputStream 将 Java 对象的基本数据类型和图形写入 OutputStream。 *   可以使用 ObjectInputStream 读取（重构）对象。 *   通过在流中使用文件可以实现对象的持久存储。 *   如果流是网络套接字流，则可以在另一台主机上或另一个进程中重构对象。 * *  之前我们学习的数据流只能序列化基本数据类型和String。但是java中操作基本上是对象，所以需要将对象存储或传输。 *  对象持久存储和传输也是需要序列化的，对象要序列化就需要使用对象序列化流-ObjectOutputStream * *  void writeObject(Object obj) *           将指定的对象写入 ObjectOutputStream。 * *  ObjectOutputStream类只能将支持 java.io.Serializable 接口的对象写入流中。 *  每个 serializable 对象的类都被编码，编码内容包括类名和类签名、对象的字段值和数组值，以及从初始对象中引用的其他所有对象的字段。 * *  序列化：数据转字节存储或传输的过程 *  反序列化：将传输或存储的字节转数据的过程 * *  2. ObjectInputStream类：-- 对象反序列化流 *      ObjectInputStream 对以前使用 ObjectOutputStream 写入的基本数据和对象进行反序列化。 * *      Object readObject() *           从 ObjectInputStream 读取对象 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Student</span> student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D://student.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 将student对象持久化存储 -- 序列化</span>            <span class="token comment">/*            * java.io.NotSerializableException: com.powernode.p1.Student            * 对象序列化必须实现序列化Serializable接口，否则抛出没有序列化的异常：NotSerializableException            *            */</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>oos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="ObjectInputStream类-—-对象反序列化流"><a href="#ObjectInputStream类-—-对象反序列化流" class="headerlink" title="ObjectInputStream类 — 对象反序列化流"></a>ObjectInputStream类 — 对象反序列化流</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： ObjectInputStream类：-- 对象反序列化流 * * 无效的类异常： * java.io.InvalidClassException: com.powernode.p1.Student; local class incompatible: * stream classdesc serialVersionUID = 6018961234229396208, local class serialVersionUID = -4306986026975680102 *  原因： 因为本地类序列化过后，修改了字段的修饰符，所以反序列化流中的UID和本地类的UID不一致，所以认为这不是同一个类，也就是类不兼容了。所以出错 *  解决方法：就是把serialVersionUID固定。无论类中的成员变量如何修改，serialVersionUID值都不发生变化就可以。 *  如何把serialVersionUID固定，就是在需要序列化的类中显式的添加一个serialVersionUID字段。 * * * 结论： *   1. 对象序列化和反序列化的serialVersionUID必须一样 *   2. 实现Serializable接口的类，推荐显式的指定serialVersionUID字段的值 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://student.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 对象反序列化</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> obj1 <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ois <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Serializable接口"><a href="#Serializable接口" class="headerlink" title="Serializable接口"></a>Serializable接口</h4><ol><li>Serializable接口只有接口的定义，没有任何的成员。这样的接口叫做标记接口。<ul><li>作用：仅仅用作标记</li></ul></li><li>Student类实现了Serializable接口，你就可以理解成Student类有了序列化的标记。其实是对象流在序列化的时候会判断类是不是属于Serializable类型，如果不是就会抛出java.io.NotSerializableException</li><li>如果类中某个字段不想被序列化，如何处理？<ul><li>序列化的目的是持久存储或传输。那么如果一个字段不能被持久化，那么这个字段就不能序列化了。所以java提供了一个关键字：transient，表示短暂的，瞬间的。</li><li>被transient关键字修饰的字段，就是瞬态字段，不能被序列化。静态字段属于类，不属于对象，所以静态字段也不能序列化。</li></ul></li><li>eg：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">6018961234229396208L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="内存流（字节数组流）"><a href="#内存流（字节数组流）" class="headerlink" title="内存流（字节数组流）"></a>内存流（字节数组流）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** *  内存流（字节数组流） *   ByteArrayOutputStream -- 熟悉 *   ByteArrayInputStream -- 了解 * *  前面我们学习的流的源和目的地是： 文件 *  内存流的源和目的地是：内存 * *   ByteArrayOutputStream：字节数组输出流 *      输出流是将程序的数据写到目的地，所以： *      ByteArrayOutputStream的作用：将数据写入内存中 *      ByteArrayInputStream的作用： 读取内存中写入的数据 * * ByteArrayOutputStream类： *      此类实现了一个输出流，其中的数据被写入一个 byte 数组。缓冲区会随着数据的不断写入而自动增长。 *      可使用 toByteArray() 和 toString() 获取数据。 * *      扩容最大限制：Integer.MAX_VALUE - 8 ； 最大2G的数据 * *      关闭 ByteArrayOutputStream 无效。此类中的方法在关闭此流后仍可被调用，而不会产生任何 IOException。 * * 构造方法摘要 * ByteArrayOutputStream() *           创建一个新的 byte 数组输出流。 * ByteArrayOutputStream(int size) *           创建一个新的 byte 数组输出流，它具有指定大小的缓冲区容量（以字节为单位）。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ByteArrayOutputStream写数据的目的地是内存，所以没有路径一说</span>        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 写数据到内存中</span>            baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"我爱你，中国"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 使用 toByteArray() 和 toString() 获取数据。</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="eg：将图片数据读取后存储到内存中，图片读取完成后获取出内存中的数据"><a href="#eg：将图片数据读取后存储到内存中，图片读取完成后获取出内存中的数据" class="headerlink" title="eg：将图片数据读取后存储到内存中，图片读取完成后获取出内存中的数据"></a>eg：将图片数据读取后存储到内存中，图片读取完成后获取出内存中的数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * 需求： 就是将图片数据读取后存储到内存中，图片读取完成后获取出内存中的数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D://img.jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 读数据</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 将读取的数据写入内存 -- 使用内存流写入</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 图片读取完成后获取出内存中的数据</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgBytes <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>imgBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="复制多级文件夹"><a href="#复制多级文件夹" class="headerlink" title="复制多级文件夹"></a>复制多级文件夹</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * 复制多级文件夹 * 步骤： * 1. 判断是文件还是文件夹 *     文件： 直接复制 *     文件夹： *        a. 创建文件夹 *        b. 获取并遍历文件夹下的内容 *        c. 回到1 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyFloderDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D://a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E://"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copyFloder</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 复制多级文件夹     * @param src 源文件夹     * @param dest 目标文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFloder</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span> <span class="token class-name">File</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 增加代码的健壮性</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>src <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> dest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>src<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>dest<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">// 1. 判断是文件还是文件夹</span>        <span class="token comment">// src = D://a.txt   dest = E://</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//  文件： 直接复制</span>            <span class="token comment">// 要求目标文件的路径 = E://a.txt，所以需要重写创建File</span>            <span class="token comment">// 获取源文件的名称</span>            <span class="token class-name">String</span> fileName <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// newFile = E://a.txt</span>            <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">copyFile</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span>newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">// 文件夹</span>            <span class="token comment">// src = D://a/   dest = E://</span>            <span class="token comment">// a. 创建文件夹</span>            <span class="token comment">// 获取源文件夹的名字</span>            <span class="token class-name">String</span> floderName <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// newFloder = E://a/</span>            <span class="token class-name">File</span> newFloder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>floderName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建文件夹</span>            newFloder<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// b. 获取并遍历文件夹下的内容</span>            <span class="token comment">// src = D://a/    files就是D://a/下的内容</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// file = D://a/a.txt  -- 复制到  E://a/</span>                <span class="token function">copyFloder</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>newFloder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 复制文件     * @param src 源文件     * @param dest 目标文件     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span><span class="token class-name">File</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token comment">/** * Properties类 *  1. Properties类是属于集合，叫做属性集 *  2. Properties类是Hashtable的子类，所以存储的数据也是kv格式 *  3. Properties类中的key和value只能是String类型 *  4. Properties 类是一个持久的属性集，Properties可保存在流中或从流中加载。 * * 构造方法摘要 * Properties() *           创建一个无默认值的空属性列表。 * * * 常用方法： * 1. 操作属性： *  String getProperty(String key) *           用指定的键在此属性列表中搜索属性。 *  String getProperty(String key, String defaultValue) *           用指定的键在属性列表中搜索属性。 *  Object setProperty(String key, String value) *           调用 Hashtable 的方法 put。 * * 2. 持久化方法，将数据保存到文件中 *  void store(OutputStream out, String comments) *           以适合使用 load(InputStream) 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素对）写入输出流。 *  void store(Writer writer, String comments) *           以适合使用 load(Reader) 方法的格式，将此 Properties 表中的属性列表（键和元素对）写入输出字符。 * *  3. 读取持久化的数据 *   void load(InputStream inStream) *           从输入流中读取属性列表（键和元素对）。 *   void load(Reader reader) *           按简单的面向行的格式从输入字符流中读取属性列表（键和元素对）。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建属性集对象</span>        <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置属性</span>        prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * 将属性集持久化:(Writer writer, String comments)        *  第二个参数是 文件的注释信息        *  properties文件的注释格式是：  # 注释文字        *        *  属性集有字节的文件格式，扩展名是 .properties        * 数据格式是  key=value        *        */</span>        prop<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"day23/user.properties"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"用户的信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 读取properties文件的数据</span>        <span class="token class-name">Properties</span> prop01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将文件数据加到到Properties属性集中</span>        prop01<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"day23/user.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取属性,如果属性不存在就返回null</span><span class="token comment">//        String name = prop01.getProperty("name");</span>        <span class="token comment">/*        * getProperty(String key, String defaultValue)        *  如果属性存在就返回对应的值；如果属性不存在就返回默认值defaultValue        */</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> prop01<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span><span class="token string">"不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="自己封装一个IO的工具类"><a href="#自己封装一个IO的工具类" class="headerlink" title="自己封装一个IO的工具类"></a>自己封装一个IO的工具类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * 自己封装一个IO的工具类 * 1. 文件复制的方法 * 2. 文件夹复制的方法 * 3. 关闭资源的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">IOUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 复制多级文件夹     * @param src 源文件夹     * @param dest 目标文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFloder</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span> <span class="token class-name">File</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 增加代码的健壮性</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>src <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> dest <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>src<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>dest<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 1. 判断是文件还是文件夹</span>        <span class="token comment">// src = D://a.txt   dest = E://</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//  文件： 直接复制</span>            <span class="token comment">// 要求目标文件的路径 = E://a.txt，所以需要重写创建File</span>            <span class="token comment">// 获取源文件的名称</span>            <span class="token class-name">String</span> fileName <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// newFile = E://a.txt</span>            <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">copyFile</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span>newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">// 文件夹</span>            <span class="token comment">// src = D://a/   dest = E://</span>            <span class="token comment">// a. 创建文件夹</span>            <span class="token comment">// 获取源文件夹的名字</span>            <span class="token class-name">String</span> floderName <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// newFloder = E://a/</span>            <span class="token class-name">File</span> newFloder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>floderName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建文件夹</span>            newFloder<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// b. 获取并遍历文件夹下的内容</span>            <span class="token comment">// src = D://a/    files就是D://a/下的内容</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// file = D://a/a.txt  -- 复制到  E://a/</span>                <span class="token function">copyFloder</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span>newFloder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 复制文件     * @param src 源文件     * @param dest 目标文件     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> src<span class="token punctuation">,</span><span class="token class-name">File</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token function">close</span><span class="token punctuation">(</span>bos<span class="token punctuation">,</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 释放资源     * @param closeables 需要关闭的流     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">AutoCloseable</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> closeables<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>closeables <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AutoCloseable</span> closeable <span class="token operator">:</span> closeables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    closeable<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="线程引入"><a href="#线程引入" class="headerlink" title="线程引入"></a>线程引入</h4><p>学习线程之前需要先掌握几个概念：</p><ol><li><p>程序（Application）：是计算机能识别和执行的指令。是一个静态的概念。</p><ul><li>静态的意思就是：没有运行。</li></ul></li><li><p>进程（Process）：运行中的程序。是一个动态的概念。</p><ul><li>程序运行后就是进程，进程是一个动态的概念；</li><li>一个程序至少要有一个进程；</li><li><strong>程序运行后，需要将程序的指令交给CPU处理；数据需要加载到内存中；</strong></li><li><strong>程序中的指令是谁交给cpu处理的呢？  — 就是线程</strong></li></ul></li><li><p>线程（Thread）：线程就是进程的执行路径，作用就是将程序指令交给cpu执行。</p><ul><li><strong>一个进程至少需要一个线程。线程将指令交给cpu执行，是需要抢占到cpu的时间片才能执行的。</strong></li><li>cpu的一个核心执行一个线程。</li></ul></li><li><p><strong>线程和进程的区别</strong></p><ul><li>进程是运行中的程序，是计算机中分配资源的最小单位。</li><li>线程是进程的执行路径，线程是在进程中的。线程是程序执行的最小单位。</li></ul></li><li><p>多线程</p><ul><li>一个程序有多个执行路径，那么这个程序就是多线程的程序。</li><li>eg：迅雷下载、QQ、LOL、等都是多线程的。</li></ul></li><li><p><strong>串行：多个线程排队执行，效果类似于单线程。</strong></p></li><li><p><strong>并发：多个线程交替执行，会竞争资源。</strong></p></li><li><p><strong>并行：同一时间点多个线程同时执行。一般并行中都带有并发。</strong></p><p><img src="/images/note_images/%E4%B8%B2%E8%A1%8C%EF%BC%8C%E5%B9%B6%E5%8F%91%EF%BC%8C%E5%B9%B6%E8%A1%8C.png"></p></li><li><p><strong>单核cpu是没有并行的</strong></p><ul><li><strong>假设我们现在的计算机是一个单核的cpu，现在运行了多个程序，比如QQ、迅雷、游戏，那么这些程序是同时在执行吗？</strong><ul><li>–&gt; 其实不是同时运行的，他们会抢占cpu的时间片资源，抢到了就执行。但是因为cpu的时间片切换是毫秒级的，这个毫秒值很少，人为是感知不到的，所以感觉是同时执行的。</li><li>–&gt; 微观：不是同时运行的。</li><li>–&gt; 宏观：同时运行的。</li></ul></li></ul></li><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 以下的代码执行顺序是： 现将第一个循环全部执行完成后才执行第二个循环         *         * 现在需要实现  边听音乐边玩游戏。 目前这个需求做不到，要完成这个需求就必须使用多线程的技术。         *         * 线程是： 代码的执行路径         *         * 我们之前所写的所有代码都只有一个执行路径，是单线程的程序。         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在听音乐....."</span><span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在玩游戏............."</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h4 id="创建线程的方式一【继承Thread】"><a href="#创建线程的方式一【继承Thread】" class="headerlink" title="创建线程的方式一【继承Thread】"></a>创建线程的方式一【继承Thread】</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 创建线程： *   java中使用Thread类表示线程。 *   注意： 只有Thread类及其子类才能叫做线程类 * * 创建线程的方式一： *  1. 创建Thread的子类 *  2. 子类重写run()方法 *  3. 创建子类对象并启动 * */</span><span class="token comment">// 1. 创建Thread的子类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 2. 子类重写run()方法</span>    <span class="token comment">/**     * run()方法是线程启动后，系统自动调用的方法。不是程序员调用的。     * run()方法就是线程启动后，执行的方法，所以将需要交给线程执行的代码编写在这个方法中     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 线程执行的代码</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在听音乐....."</span><span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * java程序的main()是主线程运行的，主线程就是main线程。     * main线程是系统自动创建。     *     *  如果在线程A中启动了线程B,线程B叫做线程A的子线程     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 3. 创建子类对象并启动</span>        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动线程，线程启动后会执行run()方法</span>        <span class="token comment">// 主线程执行的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在玩游戏............."</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%89%A7%E8%A1%8C%E8%B7%AF%E5%BE%84.png"></p><hr><h4 id="创建线程的方式二【创建Runnable接口的实现类】"><a href="#创建线程的方式二【创建Runnable接口的实现类】" class="headerlink" title="创建线程的方式二【创建Runnable接口的实现类】"></a>创建线程的方式二【创建Runnable接口的实现类】</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 创建线程的方式二： *  1. 创建 Runnable 接口的实现类 *  2. 实现类重写 run() 方法 *  3. 创建Thread时将实现类对象作为参数传递，启动Thread * * *  创建线程的方式一和方式二比较： *  1. 方式一使用继承Thread的方式 *     a. 如果类已经继承了其它类，就不能使用方式一，受java单继承的限制 *     b. 方法使用Thread的方法 * *  2. 方式二使用实现Runnable的方式 *     a. 不受java单继承的限制 *     b. 使用Thread的方法相对会麻烦一些 * * *  创建线程的方式三稍后再讲 */</span><span class="token comment">// 1. 创建 Runnable 接口的实现类</span><span class="token comment">/** * Runnable的实现类不是线程类。 * Runnable的实现类是线程的任务类，也就说Runnable中编写的是线程执行的代码 */</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 2. 实现类重写 run() 方法</span>    <span class="token comment">/**     * run()是线程执行的方法，也就是说run()方法编写线程执行的代码     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在听歌曲....."</span><span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 3. 创建Thread时将实现类对象作为参数传递，启动Thread</span>        <span class="token class-name">MyRunnable</span> myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Thread类： * * 1.构造方法摘要 * Thread() *           分配新的 Thread 对象。 * Thread(Runnable target) *           分配新的 Thread 对象。 * Thread(Runnable target, String name) *           分配新的 Thread 对象。 * Thread(String name) *           分配新的 Thread 对象。 * * 2. 常用方法： *   void start() *           使该线程开始执行；Java 虚拟机调用该线程的 run 方法。 *           多次启动一个线程是非法的。特别是当线程已经结束执行后，不能再重新启动。 * *   String getName() *           返回该线程的名称。 * *   void setName(String name) *           改变线程名称，使之与参数 name 相同。 *   设置线程的名称有两种方式：一种通过构造函数；一种通过setName() * *   static Thread currentThread() *           返回对当前正在执行的线程对象的引用。 *           整个代码在哪个线程中调用，就会返回哪个线程 * *   long getId() *           返回该线程的标识符。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//       test01();</span>       <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// getName(),getId()</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置线程的名称有两种方式：一种通过构造函数；一种通过setName()</span>       <span class="token comment">/* Thread t1 = new Thread("线程1")&#123;            @Override            public void run() &#123;                for (int i = 0; i &lt; 10; i++) &#123;                    System.out.println(getName()+"---" + i);                &#125;            &#125;        &#125;;*/</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"---"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取线程的id</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1线程的id= "</span> <span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取主线程的名称</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name== "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"========="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// start()方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程开始执行......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         *  t1.start() 是启动一个新的线程，然后 run()中的代码在新的线程中执行的         *   t1.run() 这是调用了t1对象的成员run()方法,不会启动线程；run()中的代码在主线程执行         */</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        t1.run();</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Thread常用方法"><a href="#Thread常用方法" class="headerlink" title="Thread常用方法"></a>Thread常用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Thread常用方法： *   1. 线程睡眠: *     static void sleep(long millis) *           在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）. * *   2. 加入线程 *      void join() *           等待该线程终止。 *      void join(long millis) *           等待该线程终止的时间最长为 millis 毫秒。 * *      建议： join()放在start()后 * *    3. 后台线程（守护线程） *        void setDaemon(boolean on) *              将该线程标记为守护线程或用户线程。当正在运行的线程都是守护线程时，Java 虚拟机退出。 *              该方法必须在启动线程前调用。 *              创建出来的线程默认就是用户线程，通过setDaemon(true)就可以将用户线程变成守护线程 * *        boolean isDaemon() *           测试该线程是否为守护线程。 * *    4. 礼让线程  -- 开发中基本没有使用，面试中会见到 *        static void yield() *          给调度程序的一个提示，当前线程愿意让出当前的处理器的使用。调度程序可以自由地忽略这个提示。 *          作用： yield是一个启发式的尝试，以改善线程之间的相对进展，否则将过度使用一个中央处理器。 *          使用这种方法是不恰当的。它可能是有用的调试或测试的目的。 * *    5. 线程优先级 *         int getPriority() *                返回线程的优先级 *         void setPriority(int newPriority) *                更改线程的优先级。 * *        注意： 线程默认的优先级是5 *         public final static int MIN_PRIORITY = 1; *         public final static int NORM_PRIORITY = 5; *         public final static int MAX_PRIORITY = 10; * *    在cpu资源充足的情况下，设置优先级没有效果；在资源不足的情况下，优先级高的线程获取到资源的几率大一点。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//       test01();</span><span class="token comment">//       test02();</span><span class="token comment">//       test03();</span><span class="token comment">//       test04();</span><span class="token comment">//       test05();</span>       <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 线程优先级</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==========="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更改线程的优先级</span>        t1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1的优先级："</span><span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2的优先级："</span><span class="token operator">+</span> t2<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 礼让线程</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">/*                        * yield()                        * 1. 表示愿意让出cpu资源，但是调度程序可以自由地忽略这个提示                        * 2. 即使让出cpu资源，也会继续参与抢占，但是可以改善线程之间的相对进展，否则将过度使用一个中央处理器。                        *                        */</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==========="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//  后台线程（守护线程）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        *  t1.setDaemon(true); 将t1线程设置成守护线程。        *  问题： 守护线程守护的是谁？？        *         守护所有的用户线程        *   当程序中只剩下守护线程，jvm就会退出。        *       */</span>        t1<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// main线程是用户线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==========="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//  加入线程</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"==============="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 加入线程</span>    <span class="token comment">/**     * 需求： t1线程执行完后再执行主线程的循环语句     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            * join()方法编写在哪一个线程中，哪一个线程就有阻塞，直到调用join()方法            * 的线程执行完后，这个线程才能继续向下执行            *            * 所以：这里的join()方法编写在main线程中的，所以主线程会阻塞，直到t1线程执行完成后            * 主线程才会继续执行。            *   这里使用join达到了串行的效果。            *            * join() == join(0)            */</span><span class="token comment">//            t1.join();</span>            <span class="token comment">/*            * join(long millis): 等待该线程终止的时间最长为 millis 毫秒。            * t1.join(1)表示的意思是：            * 1. 到了指定的时间，t1还没有执行完成，主线程也不会阻塞了， 会继续向下执行            * 2. t1执行完成了，但是还没有到指定的时间，主线程也不会阻塞了， 会继续向下执行            *            */</span>            t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 主线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"========"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 线程睡眠</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">/**                     * sleep()在哪一个线程中调用，哪一个线程就睡眠                     */</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="线程的内存"><a href="#线程的内存" class="headerlink" title="线程的内存"></a>线程的内存</h4><p><img src="/images/note_images/%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98.png"></p><hr><h3 id="DAY24"><a href="#DAY24" class="headerlink" title="DAY24"></a>DAY24</h3><h4 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 中断线程 *   void interrupt() *           中断线程。 *           如果线程在调用 Object 类的 wait()、wait(long) 或 wait(long, int) 方法， *           或者该类的 join()、join(long)、join(long, int)、sleep(long) 或 sleep(long, int) 方法过程中受阻，则其中断状态将被清除， *           它还将收到一个 InterruptedException。 *     注意： interrupt()只是给线程设置了一个中断标记。不会中断线程。 *     如果需要中断线程，需要程序员获取到中断标记后，自己处理。 * *    static boolean interrupted() *           测试当前线程是否已经中断。 *           测试当前线程是否已经中断。线程的中断状态 由该方法清除。换句话说，如果连续两次调用该方法，则第二次调用将返回 false（在第一次调用已清除了其中断状态之后，且第二次调用检验完中断状态前，当前线程再次中断的情况除外）。 *     boolean isInterrupted() *           测试线程是否已经中断。线程的中断状态 不受该方法的影响。 * * */</span><span class="token comment">/** * 实现自然排序 */</span><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Worker&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 比较方法     * 比较对象一个是this,一个是参数     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*         * 编写比较规则，注意主要条件和辅助条件         * 主要条件就是需求中给出来的条件，这里就是 按照员工的年龄升序         * 辅助条件需要自己找，怎么找？         *   辅助条件的作用是用来区分不同的对象，所以找能够区分不同对象的字段所谓辅助条件         * 这里id应该就是唯一的，所以可以用来做辅助条件。         *         * 注意： 如果一个字段不能区分唯一性，可以使用多个字段来区分         *         * 所以编写比较规则的时候，先比较主要条件，当主要条件的结果是0的时候，再次比较辅助条件。         *         */</span>        <span class="token comment">// 先比较主要条件</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> o<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token comment">// 当主要条件的结果是0的时候，再次比较辅助条件。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">-</span> o<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        test01();</span>        <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//这种采用bool来中断线程的方法不好，建议使用interrupt()</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正在执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 主线程： 停止t1线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 停止t1线程</span>                bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--==========-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// interrupt()  中断线程</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// 判断当前线程是否有中断状态</span>                 <span class="token comment">/*  if(Thread.currentThread().isInterrupted())&#123;                       break;                   &#125;*/</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"正在执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">/*                         *  sleep(),wait()，join()方法会清除中断状态                         */</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">/**                         * 因为中断状态被清除了，所以这里再次设置线程中断的状态                         */</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 主线程： 停止t1线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 停止t1线程</span>                t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅仅是给t1线程设置了一个中断标记</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--==========-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="同步机制【synchronized】"><a href="#同步机制【synchronized】" class="headerlink" title="同步机制【synchronized】"></a>同步机制【synchronized】</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 多线程程序会出现线程安全问题。 * * 线程不安全：多线程执行代码的结果和单线程执行结果不一致。 * * 线程不安全的前提条件： * 1. 必须是多线程 * 2. 多线程必须共享数据 * 3. 多个线程对共享数据进行修改 * * 线程不安全的原因： *     一个线程操作共享数据的时候，共享数据还没有操作完成，就被其它线程抢过去操作共享数据；这就会造成线程不安全。 * * 解决线程不安全的思路： *    线程在操作共享数据代码的时候，不允许其它线程进来操作共享数据。 * * java提供了同步机制synchronized解决线程不安全的问题： * synchronized是java的关键字，表示同步。 * * java的同步机制分为： * 1. 同步代码块 *  synchronized(对象锁)&#123; *      操作共享数据的代码； *  &#125; * * 同步代码块的对象锁是： 任意对象 * 但是要保证： 多个对象是同一个对象锁 * * 2. 同步方法 * 修饰符 synchronized 返回值类型 方法名（参数列表）&#123; *     操作共享数据的代码； * &#125; * 同步方法 *      * 1. 同步方法需要方法结束才能释放锁 *      * 2. 建议 方法中的代码全部是操作共享数据的的，此时才推荐使用同步方法 *      * 3. 同步方法的对象锁是：this * * 3. 同步静态方法 * 修饰符 static synchronized 返回值类型 方法名（参数列表）&#123; *      操作共享数据的代码； *  &#125; * *  同步静态方法的对象锁：字节码对象 （类名.class） * * 被synchronized修饰的代码就具备了原子性。 * 原子性：就是代码是一个整体，线程要么全部执行完成，要么一句都不执行；不能一个线程执行一部分，另一个线程又进来执行一部分。 * * 同步：多个线程执行时，线程是阻塞的，需要得到前一个线程的结果，另一个线程才能执行。 效率低 * 异步：多个线程执行时，非阻塞的，不需要等到前面的结果。效率高 * */</span><span class="token comment">/** * 卖票的线程类 *    该类的功能： 卖10张票 */</span><span class="token keyword">class</span> <span class="token class-name">SaleTicketThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token comment">//一、采用继承Thread的方法</span>    <span class="token comment">// 票的数量--多个对象共享</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticketNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// t1  t2</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 模拟窗口一直开着，只要有票就可以卖</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">/**             * synchronized(对象锁)             *   对象锁： 就是用一个对象来作为锁             *   锁： 就相当于生活中的锁，现在给代码加锁             *   多个线程必须使用同一个锁             */</span>            <span class="token comment">// t1   获取锁  t2 获取锁失败</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 有票才卖票</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ticketNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// t1  输出10  还没有做自减  t2抢到cpu   t1抢到后继续执行 ticketNum = 9</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"卖第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ticketNum<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token comment">// 释放锁   t1 t2 t3可以获取锁</span>            <span class="token comment">// 模拟卖票的延迟</span>            <span class="token comment">/**             * 线程中使用睡眠，线程暂停，直到睡醒继续执行             * 多线程运行结果有问题，不是线程睡眠造成的             */</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TicketDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建三个窗口卖票线程</span>        <span class="token class-name">SaleTicketThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SaleTicketThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SaleTicketThread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SaleTicketThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SaleTicketThread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SaleTicketThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>采用实现Runnable接口的方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 窗口线程的任务类 * 任务： 卖票 */</span><span class="token keyword">class</span> <span class="token class-name">SaleTicketRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span> <span class="token comment">//二、实现Runnable接口的方法</span>    <span class="token comment">// 票的数量--多个对象共享</span>    <span class="token keyword">private</span> <span class="token comment">/*static*/</span> <span class="token keyword">int</span> ticketNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">saleTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            saleTicket01();</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 同步方法     * 1. 同步方法需要方法结束才能释放锁     * 2. 建议 方法中的代码全部是操作共享数据的的，此时才推荐使用同步方法     * 3. 同步方法的对象锁是：this     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">saleTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 有票才卖票</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖第"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ticketNum<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    /**</span><span class="token comment">//     * 同步静态方法的对象锁：字节码对象 （类名.class）</span><span class="token comment">//     */</span><span class="token comment">//    public static synchronized void saleTicket01() &#123;</span><span class="token comment">//        // 有票才卖票</span><span class="token comment">//        if (ticketNum > 0) &#123;</span><span class="token comment">//            System.out.println(Thread.currentThread().getName() + "卖第" + (ticketNum--) + "票");</span><span class="token comment">//        &#125;</span><span class="token comment">//    &#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SaleTicketRunnable</span> runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SaleTicketRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="synchronized特点"><a href="#synchronized特点" class="headerlink" title="synchronized特点"></a>synchronized特点</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * synchronized的特点： * 1. synchronized是一个不公平锁 *   公平锁：按照进入阻塞队列的先后顺序获取锁 *   不公平锁：不管先后顺序，释放锁之后大家一起抢 * * 2. synchronized是一个可重入锁 *     在使用synchronized时，当一个线程得到一个对象锁后（只要该线程还没有释放这个对象锁）， *     再次请求此对象锁时是可以再次得到该对象的锁的。 * *     可重入锁也支持在父子类继承的环境中。当存在父子类继承关系时， *     子类是完全可以通过“可重入锁”调用父类的同步方法。 * * 3. 同步方法重写的要求 *    子类重写父类的同步方法，子类重写的方法可以为非同步方法。 */</span><span class="token comment">/** * 演示：synchronized是一个可重入锁 */</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// t1 获取this锁</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method01-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// 释放this锁</span>    <span class="token comment">// t1 再次获取this锁</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method02-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 释放再次获取的this锁</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 死锁：多个线程相互持有彼此的锁，造成线程全部阻塞。 *   也就是： 当A线程等待B线程释放资源，而同时B又在等待A线程释放资源，这就形成了死锁。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DieLockDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Object</span> obj01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Object</span> obj02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">/*                * t1线程执行，获取obj01                */</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj01<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1开始执行。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">/*                    * obj02被t2获取了还未释放                    */</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj02<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1得到obj02。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">/*                 * t2线程执行，获取obj02                 */</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj02<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2开始执行。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">/*                    * obj01被t1获取了还未释放                    */</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj01<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1得到obj01。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="线程间的通信“等待唤醒机制”"><a href="#线程间的通信“等待唤醒机制”" class="headerlink" title="线程间的通信“等待唤醒机制”"></a>线程间的通信“等待唤醒机制”</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 线程间的通信： *   线程间通信使用“等待唤醒”机制。 * *   等待： wait() *   唤醒： notify()/notifyAll() * * 问题1：  wait()和notify()/notifyAll()方法是操作线程的，为什么没用定义在Thread类中；而是定义在Object类中？ *      因为 wait()和notify()/notifyAll()方法必须是 对象锁调用，而对象锁可以是任意对象。 *      所以当一个方法能够被任意对象调用，那么这个方法一定是Object类的方法。 * * Object类： *  void wait() *           在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。 *  void wait(long timeout) *           在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量前，导致当前线程等待。 *  void notify() *           唤醒在此对象监视器上等待的单个线程。 *  void notifyAll() *           唤醒在此对象监视器上等待的所有线程。 * *  注意： *  1. wait()和notify()/notifyAll()方法必须是对象锁调用 *  2. wait()和notify()/notifyAll()方法只能编写在synchronized代码中 *  3. wait() == wait(0) : 线程阻塞，直到线程被唤醒才能继续往下执行 *  4. wait(long timeout): 线程阻塞，当调用了唤醒后或者到了等待时间，线程会继续往下执行 *  5. wait方法会释放锁; notify()/notifyAll()方法不会释放锁 *  6. 唤醒线程和等待线程必须是同一个对象锁，否则无法唤醒 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1开始执行......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1开始等待......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">/*                         * java.lang.IllegalMonitorStateException 非法监视器（对象锁）状态异常                         * 出现以上异常的原因是：调用wait()方法的对象不是对象锁                         */</span>                        <span class="token comment">// 调用等待方法</span>                        <span class="token comment">/*                        * wait() == wait(0) : 线程阻塞，直到线程被唤醒才能继续往下执行                        * wait()方法会释放锁                        */</span><span class="token comment">//                        obj.wait();</span>                        <span class="token comment">/*                        *  wait(long timeout): 线程阻塞，当调用了唤醒后或者到了等待时间，线程会继续往下执行                        */</span>                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1等待结束......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2开始执行......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>notify()&#x2F;notifyAll()唤醒等待线程演示：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 演示： notify()/notifyAll()唤醒等待线程 * * void notify() *            唤醒在此对象监视器上等待的单个线程。 *            唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的。 *  void notifyAll() *            唤醒在此对象监视器上等待的所有线程。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1开始执行......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1开始等待......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1等待结束......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2开始执行......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2开始等待......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2等待结束......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5s后在主线程中唤醒线程</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">/*            *  唤醒在此对象监视器上等待的单个线程。            *  选择是任意性的。            */</span><span class="token comment">//            obj.notify();</span>            <span class="token comment">// 唤醒在此对象监视器上等待的所有线程。</span>            obj<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr></li></ul><h4 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h4><ul><li><p><strong>生产者线程的任务类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>p5</span><span class="token punctuation">;</span><span class="token comment">/** * 生产者线程的任务类 *   任务： 生产数据--> 存储到缓冲区 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ProductStack</span> stack <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProducerRunnable</span><span class="token punctuation">(</span><span class="token class-name">ProductStack</span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> stack<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 该变量的作用是： 控制两种产品交替生产</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"白色的"</span><span class="token punctuation">,</span><span class="token string">"包子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"黄色的"</span><span class="token punctuation">,</span><span class="token string">"馒头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            bool <span class="token operator">=</span> <span class="token operator">!</span>bool<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>消费者线程的任务类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>p5</span><span class="token punctuation">;</span><span class="token comment">/** * 消费者线程的任务类 *   任务： 从缓冲区中获取数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ProductStack</span> stack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ConsumerRunnable</span><span class="token punctuation">(</span><span class="token class-name">ProductStack</span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> stack<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>生产者与消费者存取数据的缓冲区</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>p5</span><span class="token punctuation">;</span><span class="token comment">/** * 生产者和消费者存取数据的缓冲区 * 缓冲的功能： * 1. 生产者--存储数据 * 2. 消费者--获取数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductStack</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 缓冲区中的数据</span>    <span class="token keyword">private</span> <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isEmpty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 用来标记缓冲区是否有数据</span>    <span class="token comment">/**     * 生产者调用的存储数据的方法     *     * @param color 产品的颜色     * @param name  产品的名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 缓冲区有数据，就等待</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 缓冲区没有数据就生产数据</span>        product<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        product<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"-->"</span><span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 生产数据完数据</span>        isEmpty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 消费者调用的获取数据的方法     * 这里消费数据就使用输出语句模拟一下     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//  缓冲区没有有数据，就等待</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//  缓冲区有数据，就消费</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">+</span><span class="token string">"----->"</span><span class="token operator">+</span>product<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 消费完数据</span>        isEmpty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>生产者与消费者共同操作的数据</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>p5</span><span class="token punctuation">;</span><span class="token comment">/** * 生产者和消费者共同操作的数据 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Product&#123;"</span> <span class="token operator">+</span>                <span class="token string">"color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>生产者与消费者的测试类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>p5</span><span class="token punctuation">;</span><span class="token comment">/** * 生產者和消費者的測試類 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ProductStack</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ProducerRunnable</span> producerRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRunnable</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConsumerRunnable</span> consumerRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsumerRunnable</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建生产者线程</span>        <span class="token class-name">Thread</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producerRunnable<span class="token punctuation">,</span> <span class="token string">"生产者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producerRunnable<span class="token punctuation">,</span> <span class="token string">"生产者2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producerRunnable<span class="token punctuation">,</span> <span class="token string">"生产者3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建消费者线程</span>        <span class="token class-name">Thread</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumerRunnable<span class="token punctuation">,</span> <span class="token string">"消费者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumerRunnable<span class="token punctuation">,</span> <span class="token string">"消费者2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> c3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumerRunnable<span class="token punctuation">,</span> <span class="token string">"消费者3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/images/note_images/%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85.png"></p><hr><h4 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token comment">/** * Lock锁： *    public interface Lock *    Lock 实现提供了比使用 synchronized 方法和语句可获得的更广泛的锁定操作。此实现允许更灵活的结构，可以具有差别很大的属性，可以支持多个相关的 Condition 对象。 * *    1. synchronized是关键字，我们不能修改。 *    2. Lock的接口，接口中就是方法，接口的方法可以重写，还可以接收参数，所以比synchronized更加灵活。 * * 方法摘要 *  void lock() *           获取锁。 *  Condition newCondition() *           返回绑定到此 Lock 实例的新 Condition 实例。 *  void unlock() *           释放锁。 * * 实现类：ReentrantLock *    一个可重入的互斥锁 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。 * * * Condition接口： *   Condition 将 Object 监视器方法（wait、notify 和 notifyAll）分解成截然不同的对象，以便通过将这些对象与任意 Lock 实现组合使用， * 为每个对象提供多个等待 set（wait-set）。其中，Lock 替代了 synchronized 方法和语句的使用，Condition 替代了 Object 监视器方法的使用。 * * 方法摘要 *  void await() *           造成当前线程在接到信号或被中断之前一直处于等待状态。 *  boolean await(long time, TimeUnit unit) *           造成当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。 *  void signal() *           唤醒一个等待线程。 *  void signalAll() *           唤醒所有等待线程。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 无参构造创建的是不公平锁</span>    <span class="token keyword">static</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取锁</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i==="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 释放锁</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Condition接口的等待唤醒机制"><a href="#Condition接口的等待唤醒机制" class="headerlink" title="Condition接口的等待唤醒机制"></a>Condition接口的等待唤醒机制</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： Condition接口的等待唤醒机制 * * 注意： * 1. notify()/notifyAll() 只能在配合synchronized使用 * 2. Condition接口的等待唤醒只能配合Lock使用 * 3. Condition接口的await/signal方法也必须编写在lock()和unlock()之间 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 两个线程使用不同的Condition对象，那么唤醒线程的时候可以通过Condition对象唤醒对应的线程     */</span>    <span class="token keyword">static</span> <span class="token class-name">Condition</span> condition01 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Condition</span> condition02 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1---开始执行------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1---开始等待------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    condition01<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程等待</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1---结束等待------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2---开始执行------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2---开始等待------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    condition02<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程等待</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2---结束等待------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 主线程5s后唤醒t1线程</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 唤醒线程1</span>        condition01<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 唤醒线程2</span>        condition02<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * 单例设计模式： *   java中有23中设计模式，是java前辈总结的解决某类问题的套路。 * *   单例设计模式：用来解决一个类只用一个对象的问题。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        Student s1 = Student.getStudent();</span><span class="token comment">//        Student s2 = Student.getStudent();</span><span class="token comment">//        Student s3 = Student.getStudent();</span><span class="token comment">//</span><span class="token comment">//</span><span class="token comment">//        System.out.println(s1);</span><span class="token comment">//        System.out.println(s2);</span><span class="token comment">//        System.out.println(s3);</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="单例设计模式——饿汉式"><a href="#单例设计模式——饿汉式" class="headerlink" title="单例设计模式——饿汉式"></a>单例设计模式——饿汉式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 需求： 将该类做成单例的；也就是该类只有创建一个对象 * * 单例设计模式---饿汉式 *  线程安全的 * * 1. 构造函数私有 * 2. 创建一个私有的静态的本类对象 * 3. 提供一个静态的公共方法，返回本类对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// final 非必需</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Student</span> STUDENT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> STUDENT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="DAY25"><a href="#DAY25" class="headerlink" title="DAY25"></a>DAY25</h3><h4 id="单例设计模式——懒汉式"><a href="#单例设计模式——懒汉式" class="headerlink" title="单例设计模式——懒汉式"></a>单例设计模式——懒汉式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 单例设计模式（Singleton）-懒汉式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        Student student1 = Student.getStudent();</span><span class="token comment">//        Student student2 = Student.getStudent();</span><span class="token comment">//        Student student3 = Student.getStudent();</span><span class="token comment">//</span><span class="token comment">//        System.out.println(student1);</span><span class="token comment">//        System.out.println(student2);</span><span class="token comment">//        System.out.println(student3);</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="懒汉式双重检测"><a href="#懒汉式双重检测" class="headerlink" title="懒汉式双重检测"></a>懒汉式双重检测</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 需求： 该类设计成一个单例类 * 懒汉式： *    用的时候才创建对象 *  什么时候才叫用呢？ 调用getStudent()方式时 * * 懒汉式有线程安全问题。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    * volatile 解决指令重排    */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 以下的代码有效率问题：     *  就是每个线程进入的时候，无论对象是否已经创建     *  都会获取锁，释放锁     *     *  我们想一下： 什么时候获取锁？     *     对象是null时候，线程获取锁进入，创建线程，释放锁     *     后面的线程如果对象已经创建，应该直接返回对象即可，不需要再次获取锁     *     因为同步代码中的 if(student == null)不会成立，所以没有必要进入锁了。     *     */</span>    <span class="token comment">// t1 - null  t2 -- student</span><span class="token comment">//    public static Student getStudent()&#123;</span><span class="token comment">//        /*</span><span class="token comment">//        * 使用同步代码的目的是为了保证多线程环境下的线程安全</span><span class="token comment">//        */</span><span class="token comment">//        // t1 -- 获取锁  t2 获取锁</span><span class="token comment">//        synchronized (Student.class)&#123;</span><span class="token comment">//            // 单例： 只能new一次</span><span class="token comment">//            /*</span><span class="token comment">//            * 这里的if条件是用来判断对象为null时才创建对象</span><span class="token comment">//            */</span><span class="token comment">//            if(student == null)&#123;</span><span class="token comment">//                student = new Student();</span><span class="token comment">//            &#125;</span><span class="token comment">//        &#125; // t1 - student 释放锁</span><span class="token comment">//        return student;</span><span class="token comment">//    &#125;</span>    <span class="token comment">/**     * 懒汉式的双重检测     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Student</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*        * 外层的if(student == null)作用是减少线程获取锁，提升效率        */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>student <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*             * 使用同步代码的目的是为了保证多线程环境下的线程安全             */</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">/*                 * 单例： 只能new一次                 * 这里的if条件是用来判断对象为null时才创建对象                 */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>student <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="在主线程中汇总两个线程之和"><a href="#在主线程中汇总两个线程之和" class="headerlink" title="在主线程中汇总两个线程之和"></a>在主线程中汇总两个线程之和</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 需求： 线程1计算1-5之和，线程2计算1-3之和，要求在主线程中汇总两个线程之和。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> sum01 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> sum02 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    sum01 <span class="token operator">+=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    sum02 <span class="token operator">+=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 主线程中汇总两个线程之和</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main==汇总的和是："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sum01 <span class="token operator">+</span> sum02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="创建线程方式三：实现Callable接口"><a href="#创建线程方式三：实现Callable接口" class="headerlink" title="创建线程方式三：实现Callable接口"></a>创建线程方式三：实现Callable接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span><span class="token punctuation">;</span><span class="token comment">/** * 创建线程方式三：实现Callable接口 * * 接口Callable&lt;V> *        类型参数：V - call 方法的结果类型 * public interface Callable&lt;V> *        返回结果并且可能抛出异常的任务。实现者定义了一个不带任何参数的叫做 call 的方法。 *        Callable 接口类似于 Runnable，两者线程的任务类。但是 Runnable 不会返回结果，并且无法抛出经过检查的异常。 *  方法摘要 *    V call() *           计算结果，如果无法计算结果，则抛出一个异常。 * * FutureTask&lt;V>类 *     可取消的异步计算。 *     可使用 FutureTask 包装 Callable 或 Runnable 对象。因为 FutureTask 实现了 Runnable，所以可将 FutureTask 提交给线程池执行。 * * 构造方法摘要 * FutureTask(Callable&lt;V> callable) *           创建一个 FutureTask，一旦运行就执行给定的 Callable。 * * V get() *           如有必要，等待计算完成，然后获取其结果。 * *  需求： 线程1计算1-5之和，线程2计算1-3之和，要求在主线程中汇总两个线程之和。 * */</span><span class="token comment">/** * 任务类1：计算1-5之和 */</span><span class="token keyword">class</span> <span class="token class-name">MyCallable01</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 任务类2：计算1-3之和 */</span><span class="token keyword">class</span> <span class="token class-name">MyCallable02</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 线程的任务类对象</span>        <span class="token class-name">MyCallable01</span> myCallable01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyCallable02</span> myCallable02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * 创建两个线程        * new Thread()要么无参，要么传入Runnable对象        * 但是Callable接口跟Runnable接口没有关系，无法直接传入。        * 所以现在我们要想办法将 Callable接口 和 Runnable接口 建立上 关系        */</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>myCallable01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>myCallable02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask02<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 主线程中汇总两个线程之和</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*             * get(): 会阻塞。等待计算结果             */</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main==汇总的和是："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>futureTask01<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> futureTask02<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="演示线程的生命周期"><a href="#演示线程的生命周期" class="headerlink" title="演示线程的生命周期"></a>演示线程的生命周期</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token comment">/** *演示：线程的生命周期 * *public Thread.State getState() *       返回该线程的状态。 * *线程状态。线程可以处于下列状态之一： * * NEW *      至今尚未启动的线程处于这种状态。 * RUNNABLE *      正在 Java 虚拟机中执行的线程处于这种状态。 * BLOCKED *      受阻塞并等待某个监视器锁的线程处于这种状态。 * WAITING *      无限期地等待另一个线程来执行某一特定操作的线程处于这种状态。 * TIMED_WAITING *      等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态。 * TERMINATED *      已退出的线程处于这种状态。 * * 在给定时间点上，一个线程只能处于一种状态。这些状态是虚拟机状态，它们并没有反映所有操作系统线程状态。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">/*                * 使用IO java中线程的状态是RUNNABLE，不会进入阻塞状态                */</span>                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t5<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//                synchronized (this)&#123;</span><span class="token comment">//                    try &#123;</span><span class="token comment">//                        this.wait(5000);</span><span class="token comment">//                    &#125; catch (InterruptedException e) &#123;</span><span class="token comment">//                        e.printStackTrace();</span><span class="token comment">//                    &#125;</span><span class="token comment">//                &#125;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t6<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t7<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1的状态: "</span> <span class="token operator">+</span> t1<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NEW</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2的状态: "</span> <span class="token operator">+</span> t2<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// RUNNABLE</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t3的状态: "</span> <span class="token operator">+</span> t3<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// RUNNABLE</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t4的状态: "</span> <span class="token operator">+</span> t4<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BLOCKED</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t5的状态: "</span> <span class="token operator">+</span> t5<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// WAITING</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t6的状态: "</span> <span class="token operator">+</span> t6<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TIMED_WAITING</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t7的状态: "</span> <span class="token operator">+</span> t7<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TERMINATED</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE.png"></p><hr><h4 id="定时器-Timer类"><a href="#定时器-Timer类" class="headerlink" title="定时器-Timer类"></a>定时器-Timer类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TimerTask</span><span class="token punctuation">;</span><span class="token comment">/** * 定时器-Timer类 *      一种工具，线程用其安排以后在后台线程中执行的任务。可安排任务执行一次，或者定期重复执行。 *      与每个 Timer 对象相对应的是单个后台线程，用于顺序地执行所有计时器任务。 * *方法摘要 *  void cancel() *           终止此计时器，丢弃所有当前已安排的任务 * * * TimerTask 定时器的任务类 *    由 Timer 安排为一次执行或重复执行的任务。 * * 方法摘要 *  boolean cancel() *           取消此计时器任务。 *   void run() *           此计时器任务要执行的操作。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建定时器对象</span>        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 让对象干活  -- 执行任务</span>        <span class="token comment">// 3s后执行任务,任务只执行一次</span><span class="token comment">//        timer.schedule(new MyTimerTask(timer),3000);</span>        <span class="token comment">// 3s后执行任务,后续任务每2s执行一次  -- 周期性任务</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTimerTask01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTimerTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Timer</span> timer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">MyTimerTask</span><span class="token punctuation">(</span><span class="token class-name">Timer</span> timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> timer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 定时器执行的任务代码</span>            <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"mspaint"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 终止计时器</span>            timer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTimerTask01</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 定时器执行的任务代码</span>            <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"mspaint"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ScheduledExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 线程池： *   线程的创建和销毁都是消耗资源的，所以频繁的创建和销毁线程会影响性能。 *   线程池技术就可以将线程保存在“池”中，需要使用线程的时候就或池中获取，用完之后 *   放回到池中，而不是销毁线程。这样就可以做到线程的复用，提升性能。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//       test01();</span><span class="token comment">//       test02();</span><span class="token comment">//       test03();</span>       <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 时间调度线程池     *   指定时间执行任务     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ScheduledExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 缓冲线程池     *    提交任务后如果有空闲的线程就复用，没有将创建     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 固定线程池     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建3个线程</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 创建单一线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用线程池工具类创建单一线程</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行任务</span>        <span class="token comment">// submit()提交任务给线程执行</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭线程池</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png"></p><hr><h4 id="线程设置什么内容，获取到的就是什么内容"><a href="#线程设置什么内容，获取到的就是什么内容" class="headerlink" title="线程设置什么内容，获取到的就是什么内容"></a>线程设置什么内容，获取到的就是什么内容</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Info</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">String</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"设置了："</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 需求： 线程设置什么内容，获取到的就是什么内容 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">m01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 需要使用m01中的info对象</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">/**                     *  现在的代码满足： 线程设置什么内容，获取到的就是什么内容                     *  我们使用了 将Info定义成局部变量的方式完成的。                     *                     *   但是如果现在要求在其他方法中也可以使用这个info对象，那么使用局部变量的方式就不可以了                     *   如果将info设置成全局变量，那么我们的需求: 线程设置什么内容，获取到的就是什么内容 就无法满足.                     *                     *   如果既然满足要求，又要将info设置成全局变量，那么可以使用ThreadLocal来解决                     */</span>                    <span class="token class-name">Info</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 设置数据</span>                    info<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// 获取数据</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"获取到的数据是："</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * ThreadLocal&lt;T>类： *     该类提供了线程局部 (thread-local) 变量。 *     每个线程都有自己的局部变量。 * *方法摘要 *  T get() *       获取当前线程绑定的值 *  protected  T initialValue() *           返回此线程局部变量的当前线程的“初始值”。给当前线程绑定初始值 *  void remove() *          将值和当前线程解绑 *  void set(T value) *           将值和当前线程绑定 * * * ThreadLocal和synchonized对比 * 1. synchonized是用来解决多线程共享数据的线程安全问题 * 2. ThreadLocal是用来对多线程数据进行隔离的。也就是每个线程一份数据。 * * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建ThreadLocal对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Info</span><span class="token punctuation">></span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">m01</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">m02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Info</span> info <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"======"</span><span class="token operator">+</span>info<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>info<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m01</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过ThreadLocal将当前线程和info对象绑定，绑定的后的info对象就是线程的局部变量</span>        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过threadLocal获取对象，设置数据</span>        threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取数据</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"获取到的数据是："</span> <span class="token operator">+</span>  threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span>  threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/ThreadLocal%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.png"></p><hr><h4 id="initialValue-【给当前线程绑定初始值】"><a href="#initialValue-【给当前线程绑定初始值】" class="headerlink" title="initialValue()【给当前线程绑定初始值】"></a>initialValue()【给当前线程绑定初始值】</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 给当前线程绑定初始值</span>    <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">></span></span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token class-name">Cat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// t1</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--->"</span> <span class="token operator">+</span> local<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// t1</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 使用cat</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"======>"</span> <span class="token operator">+</span> local<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="CountDownLatch倒计时锁"><a href="#CountDownLatch倒计时锁" class="headerlink" title="CountDownLatch倒计时锁"></a>CountDownLatch倒计时锁</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token comment">/** * CountDownLatch 倒计时锁 *   等待多线程完成的CountDownLatch，允许一个或多个线程等待其他线程完成操作。 * *  注意： CountDownLatch的计数器不能重置 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 创建了一个CountDownLatch对象，初始计数器是3         */</span>        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始执行....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 计数器-1</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            * 主线程阻塞，直到倒计时为0，线程继续向下执行            */</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程等待。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程结束......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="模拟——主线程下达命令后，3个子线程才开始执行"><a href="#模拟——主线程下达命令后，3个子线程才开始执行" class="headerlink" title="模拟——主线程下达命令后，3个子线程才开始执行"></a>模拟——主线程下达命令后，3个子线程才开始执行</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CountDownLatch</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token comment">/** * 模拟： *     主线程下达命令后，3个子线程才开始执行 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始运行......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 主线程下达命令后，3个子线程才开始执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程下达命令后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="CyclicBarrier-循环栅栏"><a href="#CyclicBarrier-循环栅栏" class="headerlink" title="CyclicBarrier 循环栅栏"></a>CyclicBarrier 循环栅栏</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BrokenBarrierException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CyclicBarrier</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token comment">/** * CyclicBarrier 循环栅栏 *    一个同步辅助类，它允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。 *    比如： 你们家大年三十团员，吃饭的时候需要5个人全部到齐了才能开饭。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        *  参数和线程数据量保持一致        */</span><span class="token comment">//        CyclicBarrier barrier = new CyclicBarrier(5);</span>        <span class="token comment">/*        *  第二个参数就是达到屏障点 执行的任务        */</span>        <span class="token class-name">CyclicBarrier</span> barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你们大家长说： 人到齐了，大家开动！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"到家了。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 阻塞 ，直到五个线程都执行后，代码继续向下</span>                        barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"开始吃饭了。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="Semaphore【信号量】"><a href="#Semaphore【信号量】" class="headerlink" title="Semaphore【信号量】"></a>Semaphore【信号量】</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Semaphore</span><span class="token punctuation">;</span><span class="token comment">/** * Semaphore：信号量 *         Semaphore（信号量）是用来限制同时访问资源的线程数量。 -- 限流 * * 需求： 总人数有10人， 厕所坑位只有3个 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 10人上厕所，但是坑位只有3个，所以需要限流         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获得许可 -- 令牌</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在蹲坑。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"离开厕所。。。。。。。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                        semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回许可 -- 归还令牌</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="反射——Reflect"><a href="#反射——Reflect" class="headerlink" title="反射——Reflect"></a>反射——Reflect</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 反射（Reflect）: * * 反射对初学者来说 也是难点。 *    难点： 不是API难，而是大家学了之后不知道怎么用，在哪里用？ * * 无反射无框架。反射是框架的底层代码。如果在开发中我们不编写公共的工具代码，那么反射可能你就一直是用不到。 * * 反射的主要作用： 写公共代码的 * * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*         * 创建对象   --- 正向获取  --- 静态的获取方式         * 静态的获取方式: 就是这里的代码固定了， Student student = new Student();创建的永远都是Student对象         */</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        * 使用反射获取  -- 反向获取  -- 动态的获取方式        * Class.forName("com.powernode.p6.Student");        * aClass.newInstance();        * 可以获取任意类的Class,然后创建对象        */</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E5%8F%8D%E5%B0%84.png"></p><hr><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 1. Class类： *  Class 类的实例表示正在运行的 Java 应用程序中的类和接口。枚举是一种类，注解是一种接口。 *  每个数组属于被映射为 Class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。 *  基本的 Java 类型（boolean、byte、char、short、int、long、float 和 double）和关键字 void 也表示为 Class 对象。 * *  Class 没有公共构造方法。Class 对象是在加载类时由 Java 虚拟机以及通过调用类加载器中的 defineClass 方法自动构造的。 * * * 获取Class对象 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        * 方式一：Class.forName("全限定类名")  -- 推荐方式： 解耦        * 全限定类名： 包名.类名        */</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p6.Demo02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 方式二：数据类型.class   --- 主要用在参数传递上         */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Demo02</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 方式三：对象.getClass()         */</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         * 方式四：包装类.TYPE         */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="javaBean-–-实体类"><a href="#javaBean-–-实体类" class="headerlink" title="javaBean – 实体类"></a>javaBean – 实体类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * javaBean -- 实体类 * * javaBean: *   java 是咖啡 *   bean 是豆子 * * javaBean就是Java程序的一个可重复使用的组件 *  javaBean的有规范要求的： *  1、成员变量私有化 *  2. 提供无参构造 *  3. 提供setter和getter */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="DAY26"><a href="#DAY26" class="headerlink" title="DAY26"></a>DAY26</h3><h4 id="使用反射获取类信息"><a href="#使用反射获取类信息" class="headerlink" title="使用反射获取类信息"></a>使用反射获取类信息</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Modifier</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： 使用反射获取类信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// aClass 就是Student类的Class对象</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p1.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            System.out.println(aClass.getName());</span><span class="token comment">//            // 获取aClass这个Class对象的类信息</span><span class="token comment">//            Class&lt;? extends Class> aClass1 = aClass.getClass();</span><span class="token comment">//            System.out.println(aClass1);</span>            <span class="token comment">// 获取父类</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> superclass <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>superclass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取接口, getInterfaces()只能获取本类直接实现的接口</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> anInterface <span class="token operator">:</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 获取类的修饰符</span>            <span class="token keyword">int</span> modifiers <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 判断类是不是public修饰的</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="使用反射获取类信息，并创建对象"><a href="#使用反射获取类信息，并创建对象" class="headerlink" title="使用反射获取类信息，并创建对象"></a>使用反射获取类信息，并创建对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 演示： 使用反射获取类信息，并创建对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p1.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 使用aClass调用非私有的无参构造创建对象</span>            <span class="token comment">// 所以newInstance();在jdk9开始被过时了</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="反射：根据字节码对象动态地获取类信息"><a href="#反射：根据字节码对象动态地获取类信息" class="headerlink" title="反射：根据字节码对象动态地获取类信息"></a>反射：根据字节码对象动态地获取类信息</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 反射：根据字节码对象动态的获取类信息 * * Class对象：字节码对象 * * 演示： 使用反射获取类的包信息 * *   反射机制就是将类的各个组成部分(属性，方法，构造器)封装为其它对象。 *       反射将类中的包信息封装成了Package对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取字节码对象 Class对象</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p1.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 为所欲为 -- 获取类的包信息</span>            <span class="token comment">// 反射将类中的包信息封装成了Package对象</span>            <span class="token class-name">Package</span> aPackage <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aPackage<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Student类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"带参构造被调用----name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name====age----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"睡大觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"睡好了"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">"&#125; "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Person类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"和"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"一起散步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="使用反射获取类中的字段（成员变量）"><a href="#使用反射获取类中的字段（成员变量）" class="headerlink" title="使用反射获取类中的字段（成员变量）"></a>使用反射获取类中的字段（成员变量）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>p1<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： 使用反射获取类中的字段（成员变量） * *   反射机制就是将类的各个组成部分(属性，方法，构造器)封装为其它对象。 *       反射将类中的字段封装成Field对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*             * 获取字段             * getField(字段名称): 获取本类或父类中声明的指定的public字段             */</span>            <span class="token class-name">Field</span> ageField <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ageField<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ageField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取字段名称</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ageField<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取修饰符</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ageField<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取返回值类型</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------getFields()-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getFields(): 获取本类或父类中声明的所有public字段            */</span>            <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------getDeclaredField--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * Declared: 已声明过的。            *    1. 只有本类中自己定义的才叫做本类中声明的。            *    2. 只要是本类中定义的都叫做声明，跟访问权限无关。            *   本类中定义的私有字段也是本类声明的。            *            * getDeclaredField(): 获取本类中声明过的指定字段            */</span>            <span class="token class-name">Field</span> nameField <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameField<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameField<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取字段的修饰符</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------getDeclaredFields--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getDeclaredFields(): 获取本类中声明过的所有字段            */</span>            <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> declaredField <span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredField<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="使用反射给字段赋值和取值"><a href="#使用反射给字段赋值和取值" class="headerlink" title="使用反射给字段赋值和取值"></a>使用反射给字段赋值和取值</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： 使用反射给字段赋值和取值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p1.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//  public int age</span>            <span class="token class-name">Field</span> ageField <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 赋值</span>            <span class="token comment">/*            * set(Object obj, Object value): 给字段赋值            * 第一个参数obj：表示给哪一个对象的字段赋值            * 第二个参数value：给字段赋的具体值            */</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ageField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 取值</span>            <span class="token comment">/*            * Object get(Object obj): 获取字段的值            *  参数obj：表示给获取哪一个对象的字段值            */</span>            <span class="token class-name">Object</span> value <span class="token operator">=</span> ageField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------给非公共字段赋值和取值-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Field</span> nameField <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameField<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 赋值</span>            <span class="token comment">/*            * 使用反射给非公共字段赋值或取值都会抛出非法访问异常：java.lang.IllegalAccessException            * 如何解决： 需要设置暴力访问            *    setAccessible(true);设置暴力访问,其实就是取消了访问权限的检测            */</span>            nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 取值</span>            <span class="token class-name">Object</span> nameValue <span class="token operator">=</span> nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="使用反射获取类中的构造信息"><a href="#使用反射获取类中的构造信息" class="headerlink" title="使用反射获取类中的构造信息"></a>使用反射获取类中的构造信息</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： 使用反射获取类中的构造信息 * *   反射机制就是将类的各个组成部分(属性，方法，构造器)封装为其它对象。 *      反射会将类中的构造信息封装成Constructor对象 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            * 全限定类名： FQCN--完整类别名称(Fully Qualified Class Name)            */</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p1.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getConstructor(Class&lt;?>... parameterTypes): 获取本类的public修饰的构造            * 参数：就是构造函数中形参类型的Class对象            *            */</span>            <span class="token comment">// 获取public修饰的无参构造</span>            <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> constructor1 <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getConstructors():  获取本类中所有的public修饰的构造            */</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getDeclaredConstructor(Class&lt;?>... parameterTypes): 根据参数类型获取本类中的构造函数            */</span>            <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> declaredConstructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getDeclaredConstructors(): 获取本类中所有的构造函数            */</span>            <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredConstructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> declaredConstructor1 <span class="token operator">:</span> declaredConstructors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredConstructor1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="使用反射通过构造创建对象"><a href="#使用反射通过构造创建对象" class="headerlink" title="使用反射通过构造创建对象"></a>使用反射通过构造创建对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： 使用反射通过构造创建对象 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p1.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//  public修饰的构造函数创建对象 -- 自己耍</span>            <span class="token comment">// 演示非公共的构造函数创建对象</span>            <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * T newInstance(Object ... initargs): 使用构造创建对象            * 参数：调用构造时传入的实参            * 返回值：创建的对象            */</span>            constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="使用反射获取类中的方法"><a href="#使用反射获取类中的方法" class="headerlink" title="使用反射获取类中的方法"></a>使用反射获取类中的方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： 使用反射获取类中的方法 * *    反射机制就是将类的各个组成部分(属性，方法，构造器)封装为其它对象。 *      反射可以将类中的方法封装成Method对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p1.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getMethod(String name, Class&lt;?>... parameterTypes): 获取本类或父类中的指定的public成员方法            * 第一个参数： 方法名            * 第二个参数： 方法形参类型的Class对象            *            */</span>            <span class="token class-name">Method</span> walkMethod <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"walk"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>walkMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------getMethods------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getMethods():  获取本类或父类中的所有的public成员方法            *            */</span>            <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------getDeclaredMethod------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getDeclaredMethod(String name, Class&lt;?>... parameterTypes): 获取本类中声明过的指定的成员方法            * 第一个参数： 方法名            * 第二个参数： 方法形参类型的Class对象            */</span>            <span class="token class-name">Method</span> eatMethod <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>eatMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------getDeclaredMethods------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*            * getDeclaredMethods(): 获取本类中声明过的所有成员方法            */</span>            <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> declaredMethod <span class="token operator">:</span> declaredMethods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>declaredMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="使用反射调用类中的方法"><a href="#使用反射调用类中的方法" class="headerlink" title="使用反射调用类中的方法"></a>使用反射调用类中的方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token comment">/** * 演示： 使用反射调用类中的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p1.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> sleepMethod <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sleep"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用方法</span>            <span class="token comment">/*            * Object invoke(Object obj, Object... args): 调用方法            * 第一个参数：调用哪一个对象的方法            * 第二个参数：调用方法时参入的实参            * 返回值： 方法的返回值，如果方法是void,返回null            *            */</span>            sleepMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> sleepMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"赵四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="获取静态内部类与非静态内部类"><a href="#获取静态内部类与非静态内部类" class="headerlink" title="获取静态内部类与非静态内部类"></a>获取静态内部类与非静态内部类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Modifier</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        test02();</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 演示静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取外部类的Class</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p5.Outter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取内部类的Class</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass1 <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> modifiers <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">Method</span> method <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>aClass1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 演示非静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取外部类的Class</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p5.Outter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取内部类的Class</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass1 <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> modifiers <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//                    aClass1.getDeclaredConstructor(Outter.class);</span>                    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> declaredConstructor <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                    declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Object</span> obj <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Method</span> method <span class="token operator">=</span> aClass1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Outter类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑起来......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//  Outter$Inner02(Outter this$0)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner02</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"跑起来......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="自己写一个工具类"><a href="#自己写一个工具类" class="headerlink" title="自己写一个工具类"></a>自己写一个工具类</h4><ul><li><p><strong>需求：写一个工具类，不能改变类的任何代码的前提下，可以帮我们创建 任意类 的对象，并执行其中任意无参方法。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>powernode<span class="token punctuation">.</span>p1<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span><span class="token comment">/** * 需求：写一个工具类，不能改变类的任何代码的前提下，可以帮我们创建  任意类的对象，并执行其中任意无参方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*         * 解耦： 降低耦合性         *         * 现在这个代码的存储 编译期耦合         *         * 降低： 将编译器耦合 降低 到运行时耦合         */</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*         *  以下的代码降低了耦合度，编译期没有耦合了         *         *  但是又有新的问题："com.powernode.p1.Student" 写死了。也就是只能创建Student对象         *  这就是开发中的硬编码问题。         *  如何解决硬编码问题：         *            使用配置文件 properties         *         * 配置 优于 编码         * 约定 优于 配置         */</span>        <span class="token class-name">Object</span> obj01 <span class="token operator">=</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"com.powernode.p1.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj01<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解决硬编码后</span>        <span class="token class-name">Object</span> obj02 <span class="token operator">=</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行方法</span>        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>ObjectUtils工具类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token comment">/** * 工具类： *   1. 创建任意类的对象 *   2. 执行其中任意无参方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 该方法的作用是创建任意类的对象     *    任意类，说明类是不固定的，所以目前我们能够想到的是通过参数接收类     *     *  参数：接收任意类,所以参数类型是Class     *     *  Object obj = 对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token class-name">T</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 反射</span>            <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> declaredConstructor <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> fqcn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 反射</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>fqcn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             obj  <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 读取配置文件中的类名创建对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 读取配置文件中的类名</span>            <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"day26/bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> className <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 反射</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Constructor</span> declaredConstructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj  <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 通过配置文件执行指定的无参方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"day26/bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> className <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> methodName <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"methodName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> declaredMethod <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>            declaredMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> declaredMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>bean.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># \u914D\u7F6E\u9700\u8981\u521B\u5EFA\u5BF9\u8C61\u7684\u7C7B</span><span class="token attr-name">className</span><span class="token punctuation">=</span><span class="token attr-value">com.powernode.p1.Student</span><span class="token attr-name">methodName</span><span class="token punctuation">=</span><span class="token attr-value">eat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><hr><h4 id="将任意对象的数据保持成properties文件"><a href="#将任意对象的数据保持成properties文件" class="headerlink" title="将任意对象的数据保持成properties文件"></a>将任意对象的数据保持成properties文件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token comment">/** * 需求： 将任意对象的数据保存成properties文件 * *  Student stu = new Student("zhansgan",22); * *  properties文件: *    name=zhangsan *    age=22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">objectToProperties</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">objectToProperties</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*        * properties文件中需要对象的字段和字段值组成        * 所以我们需要得到对象的字段和值        *   -- 使用反射        */</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 获取字段的名称</span>                <span class="token class-name">String</span> fieldName <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取字段的值</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> value <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 将properties持久化</span>            properties<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"day26/"</span> <span class="token operator">+</span> aClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".properties"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"自动生成的文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Student类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="类加载器：加载字节码文件信息，创建出Class对象"><a href="#类加载器：加载字节码文件信息，创建出Class对象" class="headerlink" title="类加载器：加载字节码文件信息，创建出Class对象"></a>类加载器：加载字节码文件信息，创建出Class对象</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">String</span> sex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/note_images/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png"></p><hr><h4 id="使用泛型调用add"><a href="#使用泛型调用add" class="headerlink" title="使用泛型调用add"></a>使用泛型调用add</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用泛型调用add</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">List</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> addMethod <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            addMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            addMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="注解（Annatation）"><a href="#注解（Annatation）" class="headerlink" title="注解（Annatation）"></a>注解（Annatation）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 1. 注解（Annotation）: * * 注释：解释说明代码的 -- 给程序员看的 * 注解：解释说明代码的 -- 给程序看的 * * 注解也是一个接口。 * * 2. 注解的语法格式 * *  元注解 *  public @interface 注解名&#123; *      属性; *  &#125; * *  3. 注解如何使用呢？ *     在使用注解的地方直接贴上就好 * *      所以注解可以理解成类似标签 * *      注解也叫作元数据。 *      元数据： 描述数据的数据。 * * *  3. 注解的属性 *   注解的本质是接口，注解是jdk1.5出现的，所以注解使用的是1.5时候的接口。 *   1.5的接口只有常量值和抽象方法。也就是注解中的属性要么是常量值；要么是抽象方法来表示。 *   属性的值是可以变化的，所以不能使用常量值表示，所以只能使用抽象方法来表示。 * *   结论： 注解中的属性是抽象方法. * *   方法名就是属性名 *   方法的返回值类型就是 属性的数据类型 * *   注解中属性的数据类型只能是： *     1. 基本数据类型 *     2. String *     3. 枚举 *     4. 注解 *     5. Class *     6. 以上类型的数组 * *  4. 属性的使用细节： *   4.1  属性可以有默认值;如果属性有默认值，那么使用注解的时候，该属性可以不用显式赋值 *   4.2  如果属性的名称叫做value,那么如果使用注解的时候，只单独使用value属性，属性名可以省略不写；但是如果使用多个属性时候，value *   也不能省略 *   4.3  注解中数组使用&#123;&#125;表示；使用注解的时候，如果&#123;&#125;中只有一个值，&#123;&#125;可以省略 *   4.4  使用注解时，多个属性之间使用逗号分割 */</span><span class="token comment">/** @MyAano(name = "zhangsan") 本质就是 接口的实现类并重写方法** class Proxy$1 implements MyAano&#123;*   public String name()&#123;*        return "zhangsan";*    &#125;**   public int age()&#123;*      return 18;*    &#125;*  &#125;**/</span><span class="token comment">//@MyAano(hobbies = "抽烟")</span><span class="token annotation punctuation">@MyAano</span><span class="token punctuation">(</span>hobbies <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"抽烟"</span><span class="token punctuation">,</span><span class="token string">"喝酒"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>MyAano.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 通过反编译后得到： * public interface MyAano extends Annotation&#123; * &#125; * * 所以，注解的本质就是一个接口 */</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAano</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    * 属性：注解中的属性是抽象方法.    *    * 方法名就是属性名    * 方法的返回值类型就是 属性的数据类型    *    */</span>   <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">20</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">hobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * 元注解：就是用来标记注解的注解 * * jdk内置的元注解： * 1. @Target  表示注解可以在哪些地方使用 *    ElementType.PARAMETER   方法中的形参 *    ElementType.TYPE_PARAMETER  泛型的形参 * * 2. @Retention  表示注解可以保留到什么阶段 *    SOURCE: 表示注解只会保留在源码阶段，编译器会丢弃该注解 *    CLASS：表示注解可以保留到字节码文件中，但是运行时没有；这是默认的保留策略。 *    RUNTIME：表示注解可以保留到字节码文件和运行时，所以可以使用反射读取该注解 * *   开发中我们自己定义的注解都要保留到RUNTIME，以便使用反射获取。 * * 3. @Documented  表示注解可以生成到javadoc文档中 * * 4. @Inherited *    Inherited 是继承的意思，但是它并不是说注解本身可以继承， *    而是说如果一个超类被 @Inherited 注解过的注解进行注解的话， *    那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。 * * 5. @Repeatable *    Repeatable 可重复的意思。@Repeatable 是 Java 1.8 才加进来的，所以算是一个新的特性。 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE_PARAMETER<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE_USE<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>LOCAL_VARIABLE<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>PACKAGE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//@Target(&#123;ElementType.TYPE,ElementType.METHOD,ElementType.PARAMETER&#125;)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Check</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Check</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@Check</span> <span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token class-name">Demo02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Check</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Check</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Demo02</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@Check</span> <span class="token class-name">Integer</span><span class="token operator">></span> demo02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo02</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo02<span class="token punctuation">.</span><span class="token function">m01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Check</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="repeatable举例"><a href="#repeatable举例" class="headerlink" title="repeatable举例"></a>repeatable举例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Person</span><span class="token punctuation">(</span>role <span class="token operator">=</span> <span class="token string">"coder"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Person</span><span class="token punctuation">(</span>role <span class="token operator">=</span> <span class="token string">"PM"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Person</span><span class="token punctuation">(</span>role <span class="token operator">=</span> <span class="token string">"artist"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperMan</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>PersonList.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span><span class="token punctuation">;</span><span class="token comment">/** * 该注解用来作为Person注解的容器注解 *  1. 容器注解的属性名必须是value *  2. 容器注解必须和里面的元素注解的Target、Retention保持一致 * */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PersonList</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Person.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">PersonList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h4 id="unrepeatable举例"><a href="#unrepeatable举例" class="headerlink" title="unrepeatable举例"></a>unrepeatable举例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Person</span><span class="token punctuation">(</span>role <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"coder"</span><span class="token punctuation">,</span><span class="token string">"PM"</span><span class="token punctuation">,</span><span class="token string">"artist"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SupperMan</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Person.java</li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="java预置的注解"><a href="#java预置的注解" class="headerlink" title="java预置的注解"></a>java预置的注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * Java 预置的注解 * * 1. @Deprecated  表示过时的 * 2. @SuppressWarnings  抑制警告 * 3. @Override 检测方法重写的 * 4. @FunctionalInterface 表示函数式接口。lambda表达式再讲 * * 函数式接口： 只有一个抽象方法的接口。 * * * 注解的作用： * 1. 编译器检测代码 * 2. 生成文档 * 3. 简化代码 --- 我们编写注解的目的 *  一般用来简化 配置文件 * * *  定义完注解后，必须使用反射为其提供功能，否则注解没有任何作用 * *  注解类似于我们生活中的“章”；今天我去刻一个一个 清华大学的章 盖在我的毕业证上 *  此时这个章是没有功效的。 * *  因为这个章没有教育部门赋予其功能，也就说你在学信网查不到。 * */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法(1) —— 差分数组</title>
      <link href="/2022/04/06/%E7%AE%97%E6%B3%95(1)--%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
      <url>/2022/04/06/%E7%AE%97%E6%B3%95(1)--%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="算法-1-——差分数组"><a href="#算法-1-——差分数组" class="headerlink" title="算法(1) ——差分数组"></a>算法(1) ——差分数组</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        在一个具有多个元素的数组中，我们如果要频繁地去对数组中某个区间的元素进行修改，比如区间的所有元素都加5等等。那么我们最容易想到的就是暴力地去依次遍历加5，可能在遇到数组元素少的情况下，这样比较简单，但是遇到数据量大或是在一些实时的系统中可能就会变得很麻烦。所以，我们在这种情况下就可以使用——差分数组，来解决这个问题。</p><h2 id="差分数组原理："><a href="#差分数组原理：" class="headerlink" title="差分数组原理："></a>差分数组原理：</h2><p>​        差分数组是与前缀和数组所对应的一种逆操作，类似于求导和积分，也就是说，<strong>对差分数组求前缀和，可以得到原数组，同样的，对前缀和数组求差分，也可以得到原数组。</strong></p><p>​        其实差分数组本质上也是一个数组，我们暂且定义原数组为 d，差分数组 f 的大小和原来 d 数组长度一样，而且**f[i] &#x3D; d[i] - d[i-1] (i≠0)**。</p><p>​        它的含义是什么？就是原来数组 i 位置上的元素和 i-1 位置上的元素作差，得到的值就是 f[i] 的值。        </p><p>​        当我们希望对原数组的某一个区间 <strong>[l, r]</strong> 施加一个增量 <strong>x</strong> 时，差分数组d对应的变化是：<strong>d[l]  +＝ｘ;  d[r+1] －＝ x;</strong>  并且这种操作是可以叠加的。</p><p>​        <strong>例如：</strong>有数组d &#x3D; [0,1,2,3,4,5]，对 d[2] 到 d[4] 之间的所有数加上3，变为d &#x3D; [0,1,5,6,7,5]，那么差分数组也就从 f &#x3D; [0,1,1,1,1,1] 变成了 f &#x3D; [0,1,4,1,1,-2,]。</p><h3 id="注意：差分数组元素从下标-1-开始存储"><a href="#注意：差分数组元素从下标-1-开始存储" class="headerlink" title="注意：差分数组元素从下标 1 开始存储"></a>注意：差分数组元素从下标 1 开始存储</h3><p>​        <strong>修改前：</strong></p><table><thead><tr><th align="center">index(下标)</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td align="center">d[i] (原数组)</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td align="center">f[i] (差分数组)</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>​        <strong>修改后：</strong></p><table><thead><tr><th align="center">index(下标)</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td align="center">d[i] (原数组)</td><td>0</td><td>1</td><td>2＋３＝<strong>５</strong></td><td>3＋３＝<strong>６</strong></td><td>4＋３＝<strong>７</strong></td><td>5</td></tr><tr><td align="center">f[i] (差分数组)</td><td>0</td><td>1</td><td>５－１＝<strong>４</strong></td><td>６－５＝<strong>１</strong></td><td>７－６＝<strong>１</strong></td><td>５－７＝<strong>－２</strong></td></tr><tr><td align="center">差分数组前缀和(&#x3D;原数组)</td><td>0</td><td>1+0&#x3D;1</td><td>4+1+0&#x3D;5</td><td>1+4+1+0&#x3D;6</td><td>1+1+4+1+0&#x3D;7</td><td>-2+1+1+4+1+0&#x3D;5</td></tr></tbody></table><p>​        由上面的表格可以知道，我们不用去遍历arr数组的[２，4]范围，然后再分别给每个值加上3，我们此时更改差分数组 f 即可。</p><p>​        显而易见，差分数组 f 在[2，4]范围内的值都不用改变，只需要改变差分数组位置 2 和位置 5 的值即可，即 f[2]&#x3D; f[2 ]+ 3，而 f[5] &#x3D; f[5] - 3，其余不变，为什么呢？因为差分数组的定义——<strong>f[i]&#x3D;d[i]-d[i-1]</strong></p><p>​        <strong>现在，我们如何根据差分数组 f 来推测 d 中某一个位置的值呢？</strong></p><p>​        比如，此时，我们想知道 d[1] 的值，我们不能直接通过 d[1] 得到原来的值，因为在区间修改的操作中我们并没有修改d的值，因此我们必须从前往后遍历递推，由于f[1] &#x3D; d[1] - d[0] (我们定义d[0]为0, f[0]为0)，那么d[1] &#x3D; f[1] + d[0]，又由于f[1] &#x3D; d[1] - d[0] &#x3D; 1，那么d[1]&#x3D;1+f[0]。以此类推，由于f[2]&#x3D;d[2]-d[1]，所以d[2]&#x3D;1+f[1]。</p><h2 id="差分数组的定义"><a href="#差分数组的定义" class="headerlink" title="差分数组的定义"></a>差分数组的定义</h2><p>​        对于已知有n个元素的离线数列d，我们可以建立记录它每项与前一项差值的差分数组f，显然有：</p><p>$$<br>f[i]&#x3D;\begin{cases} d[i]，(i&#x3D;0);\ d[i]-d[i-1]， (1&lt;&#x3D;i&lt;n);\end{cases}<br>$$</p><h2 id="差分数组性质"><a href="#差分数组性质" class="headerlink" title="差分数组性质"></a>差分数组性质</h2><p>​        (1)计算数列各项的值：<strong>原数列第<code>i</code>项的值是可以用差分数组的前i项的和计算的</strong>，即<strong>前缀和</strong>。<br>​        (2)计算数列每一项的前缀和：第i项的前缀和即为数列前i项的和，那么推导可知:<br>$$<br>SUM_x&#x3D;\sum_{i&#x3D;1}^x{d_x}&#x3D;{\sum_{i&#x3D;1}^x}{\sum_{j&#x3D;1}^x{f_j}}&#x3D;\sum_{i&#x3D;1}^x{(x-i+1)*f_i}<br>$$<br>​        即可用差分数组求出数列前缀和；</p><h2 id="差分数组的用途"><a href="#差分数组的用途" class="headerlink" title="差分数组的用途"></a>差分数组的用途</h2><p>​        <strong>1）快速处理区间加减操作：</strong></p><p>​        假如现在对数列中区间[L,R]上的数加上x，我们通过性质(1)可知道，第一个受影响的差分数组中的元素为 f[l],即令 f[l]+&#x3D;x，那么后面数组元素在计算过程中都会加上x；最后一个受影响的差分数组中的元素为 f[r],所以令 f[r+1]-&#x3D;x，即可保证不会影响到 r 以后数列元素的计算。这样我们不必对区间内每一个数进行处理，只需处理两个差分后的数即可；</p><p>​        <strong>2）询问区间和问题：</strong></p><p>​        由性质(2)我们可以计算出数列各项的前缀和数组sum各项的值；那么显然，区间 [l,r] 的和即为ans&#x3D;sum[r]-sum[l-1];</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>​        <strong>题目描述</strong></p><p>​        小明拥有n个彩灯，第 i个彩灯的初始亮度为a<del>i</del>。</p><p>​        小明将进行q次操作，每次操作可选择一段区间，并使区间内彩灯的亮度 +x（x可能为负数）。</p><p>​        求q次操作后每个彩灯的亮度（若彩灯亮度为负数则输出0）。</p><p>​        <strong>输入描述</strong></p><p>​        第一行包含两个正整数 n, q，分别表示彩灯的数量和操作的次数。</p><p>​        第二行包含n个整数，表示彩灯的初始亮度。</p><p>​        接下来 q 行每行包含一个操作，格式如下：</p><p>​        l r x ，表示将区间 l ~ r 的彩灯的亮度 +x。</p><p>​        1 ≤ n， q ≤ 5 ✖ 10<sup>5</sup>，0 ≤ a<sub>i</sub> ≤ 10<sup>9</sup>，1 ≤ l ≤ r ≤ n，-10<sup>9</sup> ≤ x ≤ 10<sup>9</sup></p><p>​        <strong>输出描述</strong></p><p>​        输出共 1 行，包含 n 个整数，表示每个彩灯的亮度。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @author Cherish_779 * @version 1.0 * @Description     差分 --> 小明的彩灯 * @date 2022/4/3 14:33 */</span><span class="token comment">/**   差分数组： f[i] = d[i] --> i = 0*            f[i] = d[i] - d[i-1]  --> 1 &lt;= i &lt; n**       (1)计算原数列各项的值：原数列第i项的值 是可以用差分数组的前i项的 和 计算的，即前缀和。*        1.快速处理区间加减操作：        假如现在对数列中区间[L,R]上的数加上x，我们通过性质(1)知道，第一个受影响的差分数组中的元素为f[L],        即令f[L]+=x，那么后面数列元素在计算过程中都会加上x；最后一个受影响的差分数组中的元素为f[R],        所以令f[R+1]-=x，即可保证不会影响到R以后数列元素的计算。这样我们不必对区间内每一个数进行处理，        只需处理两个差分后的数即可；        2.询问区间和问题：        由性质(2)我们可以计算出数列各项的前缀和数组sum各项的值；那么显然，            区间[L,R]的和即为ans=sum[R]-sum[L-1];** */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        //超出时间限制 --> 暴力遍历        final int N = (int)5e+05;        int[] arr1 = new int[N];        int[] arr2 = new int[N];        Scanner scanner = new Scanner(System.in);        int n = scanner.nextInt();//彩灯的数量        int q = scanner.nextInt();//操作的次数        for(int i = 0; i &lt; n; i++)&#123;            arr1[i] = scanner.nextInt(); //n个整数，表示彩灯的初始亮度        &#125;        for(int i = 0; i &lt; q; i++)&#123;            int l = scanner.nextInt();            int r = scanner.nextInt();            long x = scanner.nextLong();            for(int j = l-1; j &lt; r; j++)&#123;                arr2[j] += x;  //将每次操作后的亮度x赋给arr2数组            &#125;        &#125;        for(int i = 0; i &lt; n; i++)&#123;            arr1[i] += arr2[i];            if(arr1[i] &lt;= 0)&#123;                arr1[i] = 0;            &#125;            System.out.print(arr1[i] + "\t");        &#125;        */</span>             <span class="token comment">//优化 -->  差分数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">500010</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//原数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">500010</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//差分数组</span>        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数组长度</span>        <span class="token keyword">int</span> q <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//操作次数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输入原数组元素值</span>        <span class="token punctuation">&#125;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//创建差分数组</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//每次的操作</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>            f<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        差分数组对于元素多的数组，多次遍历修改数值以及求解区间和时非常方便，主要是要理解差分数组的性质以及原理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE学习之尚硅谷java基础(项目一) —— 家庭记账软件</title>
      <link href="/2022/03/20/JavaSE%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B0%9A%E7%A1%85%E8%B0%B7java%E5%9F%BA%E7%A1%80(%E9%A1%B9%E7%9B%AE%E4%B8%80)%20%E2%80%94%E2%80%94%20%E5%AE%B6%E5%BA%AD%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/03/20/JavaSE%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%B0%9A%E7%A1%85%E8%B0%B7java%E5%9F%BA%E7%A1%80(%E9%A1%B9%E7%9B%AE%E4%B8%80)%20%E2%80%94%E2%80%94%20%E5%AE%B6%E5%BA%AD%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaSE学习之尚硅谷java基础-项目一-——-家庭记账软件"><a href="#JavaSE学习之尚硅谷java基础-项目一-——-家庭记账软件" class="headerlink" title="JavaSE学习之尚硅谷java基础(项目一) —— 家庭记账软件"></a>JavaSE学习之尚硅谷java基础(项目一) —— 家庭记账软件</h1><p>[TOC]</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>​        • 模拟实现一个基于文本界面的《家庭记账软件》 </p><p>​        • 掌握初步的编程技巧和调试技巧</p><p>​        主要涉及以下知识点：</p><p>​            1、 变量的定义</p><p>​            2、基本数据类型的使用</p><p>​            3、 循环语句</p><p>​            4、 分支语句</p><p>​            5、 方法声明、调用和返回值的接收</p><p>​            6、 简单的屏幕输出格式控制</p><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>​        • 模拟实现基于文本界面的《家庭记账软件》。 </p><p>​        • 该软件能够记录家庭的收入、支出，并能够打印收支明细表。</p><p>​        • 项目采用分级菜单方式。主菜单如下：</p><p>​        —————–家庭收支记账软件—————–</p><p>​                                1 收支明细</p><p>​                                2 登记收入</p><p>​                                3 登记支出</p><p>​                                4 退     出</p><p>​                                请选择(1-4)：_</p><hr><p>​        假设家庭起始的生活基本金为10000元。</p><p>​        • 每次登记收入（菜单2）后，收入的金额应累加到基本金上，并记录本次收入明细，以便后续的查询。</p><p>​        • 每次登记支出（菜单3）后，支出的金额应从基本金中扣除，并记录本次支出明细，以便后续的查询。</p><p>​        • 查询收支明细（ 菜单1）时，将显示所有的收入、支出名细列表</p><hr><p>​        “登记收入”的界面及操作过程如下所示：</p><p>​        —————–家庭收支记账软件—————–</p><p>​                                1 收支明细</p><p>​                                2 登记收入</p><p>​                                3 登记支出</p><p>​                                4 退     出</p><p>​                                请选择(1-4)：2</p><p>​    本次收入金额：1000</p><p>​    本次收入说明：劳务费</p><hr><p>​        “登记支出”的界面及操作过程如下所示：</p><p>​        —————–家庭收支记账软件—————–</p><p>​                                1 收支明细</p><p>​                                2 登记收入</p><p>​                                3 登记支出</p><p>​                                4 退     出</p><p>​                                请选择(1-4)：3</p><p>​    本次支出金额：800</p><p>​    本次支出说明：物业费</p><hr><p>​        “收支明细”的界面及操作过程如下所示：</p><p>​        —————–家庭收支记账软件—————–</p><p>​                                1 收支明细</p><p>​                                2 登记收入</p><p>​                                3 登记支出</p><p>​                                4 退    出</p><p>​                                请选择(1-4)：1</p><p>​        —————–当前收支明细记录—————–</p><p>​        收支     账户金额     收支金额     说 明</p><p>​        收入     11000         1000         劳务费</p><p>​        支出     10200         800         物业费</p><p>​        -———————————————————-</p><p>​    • 提示：明细表格的对齐，可以简单使用制表符‘\t’来实现</p><hr><p>​        • “退 出”的界面及操作过程如下所示：</p><p>​        —————–家庭收支记账软件—————–</p><p>​                                1 收支明细</p><p>​                                2 登记收入</p><p>​                                3 登记支出</p><p>​                                4 退     出</p><p>​                                请选择(1-4)：4</p><p>​    确认是否退出(Y&#x2F;N)：_</p><hr><p>​        • 基本金的记录可以使用int类型的变量来实现：</p><p>​            int balance &#x3D; 10000;</p><p>​        • 收支明细记录可以使用Sting类型的变量来实现，其初始值为明细表的表头。例如：</p><p>​            String details &#x3D; “收支\t账户金额\t收支金额\t说 明\n”;</p><p>​        • 在登记收支时，将收支金额与balance相加或相减，收支记录直接串接到details后面即可。</p><hr><h3 id="项目中提供了Utility-java类，可用来方便地实现键盘访问。"><a href="#项目中提供了Utility-java类，可用来方便地实现键盘访问。" class="headerlink" title="项目中提供了Utility.java类，可用来方便地实现键盘访问。"></a><strong>项目中提供了Utility.java类，可用来方便地实现键盘访问。</strong></h3><p>​        • 该类提供了以下静态方法：</p><p>​            1、 public static char readMenuSelection() ：该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键                    入字符。</p><p>​            2、public static int readNumber() ：该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值。</p><p>​            3、public static String readString() ：该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法的返回值。</p><p>​            4、 public static char readConfirmSelection() ：该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</p><hr><h3 id="第一步：实现主程序结构"><a href="#第一步：实现主程序结构" class="headerlink" title="第一步：实现主程序结构"></a><strong>第一步：实现主程序结构</strong></h3><p>​            1、 创建FamilyAccount类及main方法</p><p>​            2、在main方法中，参照主流程图，实现程序主体结构</p><p>​            3、测试程序，确认可以正常执行第1和第4菜单选项</p><hr><h3 id="第二步：实现收入和支出登记处理"><a href="#第二步：实现收入和支出登记处理" class="headerlink" title="第二步：实现收入和支出登记处理"></a><strong>第二步：实现收入和支出登记处理</strong></h3><p>​            1、在main方法中，参照收入和支出流程，实现“登记收入”功能</p><p>​            2、测试“登记收入”功能</p><p>​             3、在main方法中，参照收入和支出流程，实现“登记支出”功能</p><p>​             4、测试“登记支出”功能</p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="Utility工具类"><a href="#Utility工具类" class="headerlink" title="Utility工具类"></a>Utility工具类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/*  Utility 工具类：        将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。* */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utility</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*        用于界面菜单的选择，该方法读取键盘，如果用户键入'1'-'4'中的任意字符，        则方法返回。返回值为用户键入字符。    * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">readMenuSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span>  str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">'1'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'2'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'3'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token char">'4'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选择错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*        用于收入和支出金额的输入。该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值。    * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字输入错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    *   用于收入和支出说明的输入。该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法返回值。    * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    *   用于确认选择的输入。该方法从键盘读取'y'或'n'，并将其作为方法的返回值。    * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">readConfirmSelections</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换为大写的字符</span>            c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'Y'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'N'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"选择错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> line<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            line<span class="token operator">=</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入长度(不大于"</span><span class="token operator">+</span>limit<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> line<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FamilyAccount-主程序类"><a href="#FamilyAccount-主程序类" class="headerlink" title="FamilyAccount  主程序类"></a>FamilyAccount  主程序类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FamilyAccount</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//用于定义用户收入支出明细</span>        <span class="token class-name">String</span> details <span class="token operator">=</span> <span class="token string">"收支\t\t账户金额\t\t收支金额\t\t说明\n"</span><span class="token punctuation">;</span>        <span class="token comment">//初始金额</span>        <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------家庭收支记账软件----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"          1、收支明细"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"          2、登记收入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"          3、登记支出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"          4、退   出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"          请选择(1-4)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取用户的选择：1-4</span>            <span class="token keyword">char</span> selection <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readMenuSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token char">'1'</span><span class="token operator">:</span>                    <span class="token comment">//System.out.println("1、收支明细");</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------当前收支明细记录----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                    System.out.println("收支\t\t账户金额\t\t收支金额\t\t说明\n");</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'2'</span><span class="token operator">:</span><span class="token comment">//                    System.out.println("2、登记收入");</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"本次收入登记："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"本次收入说明："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    balance <span class="token operator">+=</span> money<span class="token punctuation">;</span>                    details <span class="token operator">+=</span> <span class="token string">"收入\t\t"</span> <span class="token operator">+</span> balance <span class="token operator">+</span> <span class="token string">"\t\t"</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"\t\t\t"</span> <span class="token operator">+</span> info <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------登记完成--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'3'</span><span class="token operator">:</span>                    <span class="token comment">//System.out.println("3、登记支出");</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"本次支出登记："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> moneyOut <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"本次支出说明："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> outInfo <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    balance <span class="token operator">-=</span> moneyOut<span class="token punctuation">;</span>                    details <span class="token operator">+=</span> <span class="token string">"支出\t\t"</span> <span class="token operator">+</span> balance <span class="token operator">+</span> <span class="token string">"\t\t"</span> <span class="token operator">+</span> moneyOut <span class="token operator">+</span> <span class="token string">"\t\t\t"</span> <span class="token operator">+</span> outInfo <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------登记完成--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'4'</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"是否要退出？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//调用Utility封装好的判断方法返回Y/N</span>                    <span class="token keyword">char</span> isExit <span class="token operator">=</span> <span class="token class-name">Utility</span><span class="token punctuation">.</span><span class="token function">readConfirmSelections</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>isExit <span class="token operator">==</span> <span class="token char">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>​        <img src="/images/%E5%B0%9A%E7%A1%85%E8%B0%B7%E9%A1%B9%E7%9B%AE%E4%B8%80_1.png"></p><p>​        <img src="/images/%E5%B0%9A%E7%A1%85%E8%B0%B7%E9%A1%B9%E7%9B%AE%E4%B8%80_2.png"></p><p>​        <img src="/images/%E5%B0%9A%E7%A1%85%E8%B0%B7%E9%A1%B9%E7%9B%AE%E4%B8%80_3.png"></p><p>​        <img src="/images/%E5%B0%9A%E7%A1%85%E8%B0%B7%E9%A1%B9%E7%9B%AE%E4%B8%80_4.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        此案例是我学习尚硅谷javase基础课程的第一个项目案例，比较简单，算是总结前面所学的基础知识。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE基础案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo + Github搭建个人博客</title>
      <link href="/2022/03/18/%E5%9F%BA%E4%BA%8EHexo+Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA(%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B)/"/>
      <url>/2022/03/18/%E5%9F%BA%E4%BA%8EHexo+Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA(%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B)/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Hexo-Github搭建免费的个人的博客——个人心得"><a href="#基于Hexo-Github搭建免费的个人的博客——个人心得" class="headerlink" title="基于Hexo + Github搭建免费的个人的博客——个人心得"></a>基于Hexo + Github搭建免费的个人的博客——个人心得</h1><hr><p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        虽然我们可以在网上找到很多个人博客的教程，但是对于我这种小白来说，即使是跟着B站up主的视频一步一步做也还是会出现很多的错误，这篇文章主要是针对于我在第一次搭建个人博客中所遇到的一些细节性的问题作出一个说明记录。</p><h4 id="注意：本文中所有代码后的-代表注释，复制的时候不要一起复制上去了。"><a href="#注意：本文中所有代码后的-代表注释，复制的时候不要一起复制上去了。" class="headerlink" title="注意：本文中所有代码后的  # 代表注释，复制的时候不要一起复制上去了。"></a>注意：本文中所有代码后的  # 代表注释，复制的时候不要一起复制上去了。</h4><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>注册一个Github账号</p></li><li><p>下载 Nodejs、npm</p></li><li><p>下载 Git for windows （根据自己的系统而定下什么版本，本文是基于windows10）</p><p>以上工具的下载配置请自行上网查阅，本文就不一一介绍了。</p></li></ol><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ol><li><p>在完成准备工作之后，我们打开cmd在里面先下载hexo包：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看是否安装好：</p><pre class="line-numbers language-none"><code class="language-none">hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ol><li>我们可以先去自己的Github上创建好我们所要存放Blog的仓库。</li></ol><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ol><li><p>在任意盘【最好是选择以后存放Blog的盘里】进入任意一个文件夹，右击进入 git bash here 输入：</p><pre class="line-numbers language-none"><code class="language-none">ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着输入：</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;github注册邮箱【QQ邮箱】&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 紧接着是四次enter  【每次加载完成后敲一次，总共四次】</p><p>完成与 Github 连接的公钥私钥生成。</p></li></ol><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ol><li><p>进入C盘user –&gt; Administrator 【我的是 用户 –&gt; dell】，找到刚刚生成的  .ssh  文件夹</p><p>进入后，打开  .pub  文件 【用记事本打开都行，主要是为了复制里面的公钥】</p><p>这里最好是直接  ctrl + A  –&gt;  ctrl + C【主要是害怕格式出错】</p></li></ol><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><ol><li>打开Github，点击右上角头像处Settings –&gt; 然后找到并点击左侧 SHH and GPG keys<br>接着在SHH keys 那栏右侧点击 NEW SHH key<br>Title 随便输入什么都可以<br>key 这一栏就将第四步复制的公钥复制进去，点击 Add SSH key 完成添加。</li></ol><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><ol><li><p>在第三步的盘里面新建一个Blog文件夹；</p></li><li><p>进入里面右击选择 git bash here ，打开窗口：<br>这里第一次创建的时候要下载hexo包【虽然第一步的时候就下过 hexo 但是这里还是要再下一次，之后就不用了】<br>输入：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车后再输入：</p><pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面这一步是初始化一下 git</p><p>回车后继续输入：</p><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车，上面这一步是初始化hexo </p><p>然后再次输入：</p><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只有通过以上步骤后，才能将我们所需的博客的环境文件初始化到我们创建的 Blog 文件夹中。</p></li><li><p>窗口不用关，回到创建的 Blog 文件中如果上面的步骤没有出错的话，此时就会自动生成了很多文件，然后我们找到  _config.yml       文件,打开进入后，将最后两行删除：</p><p><img src="/images/1.png"></p><p>换成：</p><pre class="line-numbers language-none"><code class="language-none">deploy:    type: git    repository: https:&#x2F;&#x2F;github.com&#x2F;Cherish779&#x2F;Cherish779.github.io.git  #这个是自己github上的仓库地址    branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个只要设置一次就行</p></li><li><p>启动服务【本地服务器，就是上传之前给自己在本地测试效果的】</p><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车，会出现一个本地的网址，选中网址，右击 Open  ，切记不要  Ctrl + C ，因为这里代表终止本地服务器，当我们看完效果后，再去 Ctrl + C 终止。</p></li></ol><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>​            在进行最后远程连接之前，我建议最好是先去hexo官网：</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                先去选择自己喜欢的博客主题！！！不然要是先连接的话后期不好改，可以去b站这些地方去找主题，我先拿我的做个例子。</p><p>​            我用的是 Matery 主题，可以在上述官网链接里面搜索框搜想要的主题类型，找到喜欢的主题后，进入，【这些都是别人的博客，           别人模改过的，所以后期刚下下来肯定不如别人的好看，要自己动手去写代码改。】 </p><p>​                1、点击github的图标，进入他的 Github【这些主题都是开源在Github上的】</p><p>​                 注意：在所有有关Github的过程中，网卡、加载不出，都是正常的，因为是外网的东西，我们会很卡,所以一次加载不出就多加        载 几次，哈哈。</p><p>​                2、进入后，看见名字为 hexo-theme-XXX 的public的开源包 —&gt; 点击  进入后再点击绿色的Code下来列表 选择 Download ZIP        下载下来，然后解压到我们创建的Blog文件夹中的themes文件夹中，【注意：默认解压后的文件夹有两层文件夹，我们要移出来，        只留一层在themes文件夹中，然后复制文件夹名】</p><h3 id="这里我们开始细节部分了，注意："><a href="#这里我们开始细节部分了，注意：" class="headerlink" title="这里我们开始细节部分了，注意：!!!!!!!"></a>这里我们开始细节部分了，注意：!!!!!!!</h3><p>​                3、我们在 Blog 文件夹中找到   _config.yml  文件，点击进入，找到 language: en，将它改成中文的：  注意：在  .yml  文件中        修改任何东西都必须是<strong>英文状态</strong>，并且要在冒号后面敲一个<strong>空格</strong>，害怕出错的话建议直接复制下面的代码：</p><pre class="line-numbers language-none"><code class="language-none">language: zh-CN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                </p><p>​                然后继续找到  theme: XXX , 将冒号后面的删掉，换成我们前面复制的 hexo 的主题的文件夹名，这里代表着将默认主题替换成        我们想要的主题。</p><pre class="line-numbers language-none"><code class="language-none">theme: hexo-theme-matery-develop #这个就是将刚刚解压的文件夹名复制上来，只有这样才能使用这个主题<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                最后记得  ctrl + S 保存文档</p><p>​                 4、接着是最重要的一步，网上都没有找到什么教程的办法：<br>​                        ~ 首先要在文件夹中打开显式所有隐藏文件<br>​                        ~ 然后找到  .git  文件夹 –&gt; 找到  config  文件，打开，最后面输入：</p><pre class="line-numbers language-none"><code class="language-none">[user]    #注意这个一定要顶格写email &#x3D; 765149691@qq.com  #自己注册github的邮箱name &#x3D; Cherish779  #github账号的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​                然后，必须再继续在 Blog 文件夹里找 .deploy_git 文件夹，进入，找到隐藏的 .git 文件夹，一样也是找到 config 文件输入上述        的代码。都要记得 ctrl + s 保存！！！！！！！！！！</p><h2 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h2><h3 id="——-最关键的是与远程Github仓库连接："><a href="#——-最关键的是与远程Github仓库连接：" class="headerlink" title="—— 最关键的是与远程Github仓库连接："></a>—— 最关键的是与远程Github仓库连接：</h3><p>​                    1. 我们在自己创建好的 Blog 文件夹中右击选择  git bash here  进入 git 命令窗口：</p><p><img src="/images/2.png"></p><p>​                    首先来测试一下 SSH 是否绑定成功：</p><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​            回车            </p><p>​                    2. 成功的话会像如下显示：名字是你的 github 账号名:</p><pre class="line-numbers language-none"><code class="language-none">Hi Cherish779! You&#39;ve successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                    3. 很重要！！！！！！！</p><p>​                        a. 初始化 git :</p><pre class="line-numbers language-none"><code class="language-none">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                        b. 添加 origin</p><pre class="line-numbers language-none"><code class="language-none">git remote add origin github仓库地址    #【github仓库地址】这个要去Github复制<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                        c. 查看是否已添加成功</p><pre class="line-numbers language-none"><code class="language-none">git remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                        d. 把 README.md 文件从 Github仓库 扒下来放到本地Bolg文件夹中</p><pre class="line-numbers language-none"><code class="language-none">git pull origin main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                         e. 反之，本地数据丢到远程</p><pre class="line-numbers language-none"><code class="language-none">git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                    4、最后一步：依次执行下面三步：【以后每次执行  git 也是这样依次三步】</p><pre class="line-numbers language-none"><code class="language-none">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/3.png"></p><p><img src="/images/4.png"></p><p><img src="/images/5.png"></p><p><img src="/images/7.png"></p><p><img src="/images/6.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><h4 id="如果最后-hexo-d-成功了就代表上传到了github了这下就可以通过你的仓库名来在网页上进入你的博客了。"><a href="#如果最后-hexo-d-成功了就代表上传到了github了这下就可以通过你的仓库名来在网页上进入你的博客了。" class="headerlink" title="如果最后 hexo d 成功了就代表上传到了github了这下就可以通过你的仓库名来在网页上进入你的博客了。"></a>如果最后 hexo d 成功了就代表上传到了github了这下就可以通过你的仓库名来在网页上进入你的博客了。</h4><p>​                不过建议在执行  hexo d 之前要先去执行  hexo s 在本地测试一下，看看实际的效果，如果没有问题再 ctrl + C  后，去执行 hexo  d，上传到  Github 的远程仓库中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​            本文中只针对与后面 hexo 连接到 Github 上产生问题时的一些解决方案，对于怎么下载工具并没有去讲解，建议不会操作的小白去百度，或者去B站查找相关资料，另外当我们最后在利用 hexo d  连接上传本地文件至远程 Github 时，一定要有耐心，因为经常会因为连接超时等问题上传失败，这时候我们一定要多试几次，如果还是不行，建议关掉窗口，过会儿再试，当然这个方法只针对于和我一样想完全白嫖仓库的人，哈哈，以上就是我第一次接触并独立创建博客的一些经验，欢迎大家与我交流。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo + Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First</title>
      <link href="/2022/03/18/%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/03/18/%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="这是我的第一篇博客"><a href="#这是我的第一篇博客" class="headerlink" title="这是我的第一篇博客"></a>这是我的第一篇博客</h2><img src="/images/2.jpg" alt="world" style="zoom:25%;"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
